import React, { useState, useEffect, useRef, useCallback } from 'react';

type Rarity = 'Common' | 'Uncommon' | 'Rare' | 'Epic' | 'Legendary' | 'Mythic' | 'Secret';
type ItemCategory = 'Relics' | 'Artifacts' | 'Weapons' | 'Pets';
type TabType = 'game' | 'shop' | 'inventory' | 'upgrades';

interface ShopItem {
  id: number;
  name: string;
  category: ItemCategory;
  rarity: Rarity;
  price: number;
  gemPrice: number;
  energyMultiplier: number;
  gemMultiplier: number;
  description: string;
}

interface InventoryItem extends ShopItem {
  quantity: number;
  level: number;
  mutations?: WeatherMutation[];
  isGold?: boolean;
  isRainbow?: boolean;
}

interface EquippedItems {
  weapon: InventoryItem | null;
  artifact: InventoryItem | null;
  relic: InventoryItem | null;
  pets: (InventoryItem | null)[];
}

interface Area {
  id: number;
  name: string;
  description: string;
  requiredEnergy: number;
  energyMultiplier: number;
  gemMultiplier: number;
  background: string;
}

interface Upgrade {
  id: number;
  name: string;
  description: string;
  cost: number;
  costType: 'gems' | 'energy';
  effect: 'clickMultiplier' | 'gemChance' | 'energyMultiplier' | 'gemMultiplier';
  value: number;
  maxLevel: number;
}

interface WeatherEvent {
  id: string;
  name: string;
  emoji: string;
  rarity: Rarity;
  mutationChance: number;
  multiplierBonus: number;
  description: string;
  startTime: number;
  duration: number;
}

interface WeatherMutation {
  weatherId: string;
  weatherName: string;
  multiplierBonus: number;
  emoji: string;
}

const rarityColors: Record<Rarity, string> = {
  Common: '#9ca3af',
  Uncommon: '#10b981',
  Rare: '#3b82f6',
  Epic: '#8b5cf6',
  Legendary: '#f59e0b',
  Mythic: '#ef4444',
  Secret: '#000000'
};

const rarityChances: Record<Rarity, number> = {
  Common: 45,
  Uncommon: 25,
  Rare: 17,
  Epic: 9,
  Legendary: 3,
  Mythic: 0.9,
  Secret: 0.1
};

const gachaBoxPrices: Record<ItemCategory, number> = {
  Weapons: 50,
  Pets: 75,
  Relics: 100,
  Artifacts: 125
};

const etherealGachaBoxPrices: Record<ItemCategory, number> = {
  Weapons: 50000000000,  // 50B
  Pets: 75000000000,     // 75B  
  Relics: 100000000000,  // 100B
  Artifacts: 125000000000 // 125B
};

const cosmicGachaBoxPrices: Record<ItemCategory, number> = {
  Weapons: 5e16,    // 50 Quadrillion 
  Pets: 7.5e16,     // 75 Quadrillion
  Relics: 1e17,     // 100 Quadrillion
  Artifacts: 1.25e17 // 125 Quadrillion
};

const transcendentGachaBoxPrices: Record<ItemCategory, number> = {
  Weapons: 5e22,  // 50 Sextillion 
  Pets: 7.5e22,     // 75 Sextillion
  Relics: 1e23,  // 100 Sextillion
  Artifacts: 1.25e23 // 125 Sextillion
};

const absoluteGachaBoxPrices: Record<ItemCategory, number> = {
  Weapons: 5e25,    // 50 Septillion (1000x higher than Transcendent)
  Pets: 7.5e25,     // 75 Septillion  
  Relics: 1e26,     // 100 Septillion
  Artifacts: 1.25e26 // 125 Septillion
};

const AnimeClickerGame = () => {
  const [isLoggedIn, setIsLoggedIn] = useState(false);
  const [username, setUsername] = useState('');
  const [loginInput, setLoginInput] = useState('');
  const [passwordInput, setPasswordInput] = useState('');
  const [isRegistering, setIsRegistering] = useState(false);
  const [clickCount, setClickCount] = useState(0);
  
  // Weather System
  const [activeWeatherEvents, setActiveWeatherEvents] = useState<WeatherEvent[]>([]);
  const [weatherForecast, setWeatherForecast] = useState<Omit<WeatherEvent, 'id' | 'startTime' | 'duration'>[]>([]);

  // Auto Delete System
  const [autoDeleteSettings, setAutoDeleteSettings] = useState<{
    enabled: boolean;
    deleteCommon: boolean;
    deleteUncommon: boolean;
    deleteRare: boolean;
    keepMutated: boolean;
  }>({
    enabled: false,
    deleteCommon: false,
    deleteUncommon: false,
    deleteRare: false,
    keepMutated: true
  });
  const [isClicked, setIsClicked] = useState(false);
  const [gems, setGems] = useState(0);
  const [energy, setEnergy] = useState(0);
  const [activeTab, setActiveTab] = useState<TabType>('game');
  const [inventoryCategory, setInventoryCategory] = useState<ItemCategory>('Relics');
  const [sortBy, setSortBy] = useState<'rarity' | 'energyMultiplier'>('rarity');
  const [equipped, setEquipped] = useState<EquippedItems>({
    weapon: null,
    artifact: null,
    relic: null,
    pets: [null, null, null]
  });
  
  const [currentArea, setCurrentArea] = useState(1);
  const [areaDropdownOpen, setAreaDropdownOpen] = useState(false);
  const [notification, setNotification] = useState<string | null>(null);
  const dropdownRef = useRef<HTMLDivElement>(null);
  const [upgrades, setUpgrades] = useState<Record<number, number>>({});  // upgrade id -> level
  
  const [areas] = useState<Area[]>([
    {
      id: 1,
      name: "Beginner's Meadow",
      description: "A peaceful green meadow where new adventurers start their journey.",
      requiredEnergy: 0,
      energyMultiplier: 1,
      gemMultiplier: 1,
      background: `linear-gradient(135deg, rgba(72, 187, 120, 0.8), rgba(56, 178, 172, 0.8)), url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><rect width="100" height="100" fill="%2348BB78"/><circle cx="20" cy="20" r="3" fill="%23FFF"/><circle cx="80" cy="30" r="2" fill="%23FFF"/><circle cx="30" cy="70" r="2.5" fill="%23FFF"/></svg>')`
    },
    {
      id: 2,
      name: "Mystic Forest",
      description: "An enchanted forest with towering trees and magical creatures.",
      requiredEnergy: 100000,
      energyMultiplier: 1.2,
      gemMultiplier: 1.1,
      background: `linear-gradient(135deg, rgba(26, 95, 63, 0.9), rgba(45, 143, 95, 0.9)), url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><rect width="100" height="100" fill="%231A5F3F"/><polygon points="10,90 20,70 30,90" fill="%232D8F5F"/><polygon points="40,90 50,65 60,90" fill="%232D8F5F"/><polygon points="70,90 80,75 90,90" fill="%232D8F5F"/></svg>')`
    },
    {
      id: 3,
      name: "Ancient Ruins",
      description: "Crumbling stone structures from a lost civilization.",
      requiredEnergy: 500000,
      energyMultiplier: 1.5,
      gemMultiplier: 1.3,
      background: `linear-gradient(135deg, rgba(120, 113, 108, 0.9), rgba(168, 162, 158, 0.9)), url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><rect width="100" height="100" fill="%23787170"/><rect x="10" y="60" width="15" height="30" fill="%23A8A29E"/><rect x="30" y="50" width="20" height="40" fill="%23A8A29E"/><rect x="60" y="55" width="25" height="35" fill="%23A8A29E"/></svg>')`
    },
    {
      id: 4,
      name: "Crystal Caverns",
      description: "Underground caverns filled with glowing purple crystals.",
      requiredEnergy: 1500000,
      energyMultiplier: 1.8,
      gemMultiplier: 1.6,
      background: `linear-gradient(135deg, rgba(74, 20, 140, 0.9), rgba(156, 39, 176, 0.9)), url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><rect width="100" height="100" fill="%234A148C"/><polygon points="20,80 30,50 40,80" fill="%239C27B0"/><polygon points="50,85 65,45 80,85" fill="%239C27B0"/><polygon points="10,90 15,70 20,90" fill="%239C27B0"/></svg>')`
    },
    {
      id: 5,
      name: "Frozen Tundra",
      description: "A vast icy wasteland with howling winds and blizzards.",
      requiredEnergy: 4000000,
      energyMultiplier: 2.2,
      gemMultiplier: 1.9,
      background: `linear-gradient(135deg, rgba(147, 197, 253, 0.9), rgba(219, 234, 254, 0.9)), url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><rect width="100" height="100" fill="%2393C5FD"/><circle cx="25" cy="25" r="3" fill="%23FFF"/><circle cx="70" cy="35" r="4" fill="%23FFF"/><circle cx="40" cy="60" r="2" fill="%23FFF"/><circle cx="80" cy="75" r="3" fill="%23FFF"/></svg>')`
    },
    {
      id: 6,
      name: "Volcanic Peaks",
      description: "Dangerous mountains with molten lava and fire elementals.",
      requiredEnergy: 10000000,
      energyMultiplier: 2.7,
      gemMultiplier: 2.3,
      background: `linear-gradient(135deg, rgba(191, 54, 12, 0.9), rgba(255, 87, 34, 0.9)), url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><rect width="100" height="100" fill="%23BF360C"/><polygon points="20,90 35,40 50,90" fill="%23FF5722"/><polygon points="60,90 75,30 90,90" fill="%23FF5722"/><circle cx="40" cy="50" r="2" fill="%23FFEB3B"/></svg>')`
    },
    {
      id: 7,
      name: "Desert Oasis",
      description: "A rare sanctuary of life in the endless burning desert.",
      requiredEnergy: 25000000,
      energyMultiplier: 3.2,
      gemMultiplier: 2.8,
      background: `linear-gradient(135deg, rgba(245, 158, 11, 0.9), rgba(251, 191, 36, 0.9)), url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><rect width="100" height="100" fill="%23F59E0B"/><ellipse cx="50" cy="70" rx="20" ry="8" fill="%2306B6D4"/><rect x="45" y="50" width="10" height="20" fill="%2315803D"/><circle cx="50" cy="45" r="8" fill="%2315803D"/></svg>')`
    },
    {
      id: 8,
      name: "Haunted Swamp",
      description: "A cursed marshland where lost souls wander eternally.",
      requiredEnergy: 60000000,
      energyMultiplier: 3.8,
      gemMultiplier: 3.4,
      background: `linear-gradient(135deg, rgba(52, 73, 85, 0.9), rgba(71, 85, 105, 0.9)), url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><rect width="100" height="100" fill="%23345155"/><circle cx="30" cy="60" r="5" fill="%23475569" opacity="0.7"/><circle cx="70" cy="40" r="7" fill="%23475569" opacity="0.7"/><rect x="40" y="80" width="20" height="10" fill="%23475569"/></svg>')`
    },
    {
      id: 9,
      name: "Skyborne Citadel",
      description: "A magnificent floating city high above the clouds.",
      requiredEnergy: 150000000,
      energyMultiplier: 4.5,
      gemMultiplier: 4.0,
      background: `linear-gradient(135deg, rgba(99, 102, 241, 0.9), rgba(168, 85, 247, 0.9)), url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><rect width="100" height="100" fill="%236366F1"/><rect x="30" y="60" width="40" height="30" fill="%23A855F7"/><rect x="35" y="45" width="30" height="15" fill="%23A855F7"/><circle cx="50" cy="35" r="8" fill="%23FFF" opacity="0.8"/></svg>')`
    },
    {
      id: 10,
      name: "Abyssal Depths",
      description: "The deepest ocean trenches where ancient horrors dwell.",
      requiredEnergy: 400000000,
      energyMultiplier: 5.2,
      gemMultiplier: 4.7,
      background: `linear-gradient(135deg, rgba(15, 23, 42, 0.95), rgba(30, 41, 59, 0.95)), url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><rect width="100" height="100" fill="%230F172A"/><circle cx="20" cy="30" r="2" fill="%2306B6D4" opacity="0.6"/><circle cx="80" cy="50" r="3" fill="%2306B6D4" opacity="0.6"/><circle cx="50" cy="80" r="1.5" fill="%2306B6D4" opacity="0.6"/></svg>')`
    },
    {
      id: 11,
      name: "Celestial Gardens",
      description: "Divine gardens where angels tend to starlight flowers.",
      requiredEnergy: 1000000000,
      energyMultiplier: 6.0,
      gemMultiplier: 5.5,
      background: `linear-gradient(135deg, rgba(251, 207, 232, 0.9), rgba(253, 230, 138, 0.9)), url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><rect width="100" height="100" fill="%23FBCFE8"/><circle cx="30" cy="40" r="4" fill="%23FDE68A"/><circle cx="70" cy="30" r="5" fill="%23FDE68A"/><circle cx="50" cy="70" r="3" fill="%23FDE68A"/><polygon points="50,20 52,26 58,26 53,30 55,36 50,32 45,36 47,30 42,26 48,26" fill="%23FFF"/></svg>')`
    },
    {
      id: 12,
      name: "Void Nexus",
      description: "A tear in reality where space and time collapse into nothingness.",
      requiredEnergy: 2500000000,
      energyMultiplier: 7.0,
      gemMultiplier: 6.4,
      background: `linear-gradient(135deg, rgba(0, 0, 0, 0.95), rgba(30, 27, 75, 0.95)), url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><rect width="100" height="100" fill="%23000"/><circle cx="50" cy="50" r="20" fill="none" stroke="%239333EA" stroke-width="2"/><circle cx="50" cy="50" r="10" fill="none" stroke="%23A855F7" stroke-width="1"/><circle cx="50" cy="50" r="5" fill="%23C084FC"/></svg>')`
    },
    {
      id: 13,
      name: "Dragon's Throne",
      description: "The ancient seat of the Dragon Emperor, wreathed in eternal flames.",
      requiredEnergy: 6000000000,
      energyMultiplier: 8.2,
      gemMultiplier: 7.5,
      background: `linear-gradient(135deg, rgba(127, 29, 29, 0.9), rgba(239, 68, 68, 0.9)), url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><rect width="100" height="100" fill="%237F1D1D"/><polygon points="50,20 60,40 80,35 65,50 75,65 50,60 25,65 35,50 20,35 40,40" fill="%23EF4444"/><rect x="40" y="70" width="20" height="20" fill="%23EF4444"/></svg>')`
    },
    {
      id: 14,
      name: "Primordial Forest",
      description: "The first forest, where the World Tree's roots began to grow.",
      requiredEnergy: 9000000000,
      energyMultiplier: 9.5,
      gemMultiplier: 8.8,
      background: `linear-gradient(135deg, rgba(20, 83, 45, 0.9), rgba(34, 197, 94, 0.9)), url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><rect width="100" height="100" fill="%2314532D"/><circle cx="50" cy="50" r="25" fill="%2322C55E" opacity="0.7"/><rect x="45" y="30" width="10" height="40" fill="%23854D0E"/><circle cx="50" cy="25" r="15" fill="%2322C55E"/></svg>')`
    },
    {
      id: 15,
      name: "Astral Observatory",
      description: "A cosmic watchtower that observes the birth and death of stars.",
      requiredEnergy: 20000000000,
      energyMultiplier: 11.0,
      gemMultiplier: 10.2,
      background: `linear-gradient(135deg, rgba(15, 23, 42, 0.9), rgba(99, 102, 241, 0.9)), url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><rect width="100" height="100" fill="%230F172A"/><circle cx="50" cy="30" r="8" fill="%236366F1"/><rect x="45" y="35" width="10" height="30" fill="%236366F1"/><circle cx="25" cy="20" r="1" fill="%23FFF"/><circle cx="75" cy="25" r="1.5" fill="%23FFF"/><circle cx="80" cy="70" r="1" fill="%23FFF"/></svg>')`
    },
    {
      id: 16,
      name: "Phoenix Sanctuary",
      description: "The eternal burning sanctuary where phoenixes are reborn from ashes.",
      requiredEnergy: 45000000000,
      energyMultiplier: 12.8,
      gemMultiplier: 11.9,
      background: `linear-gradient(135deg, rgba(194, 65, 12, 0.9), rgba(251, 146, 60, 0.9)), url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><rect width="100" height="100" fill="%23C2410C"/><circle cx="50" cy="50" r="20" fill="%23FB923C"/><polygon points="50,30 55,40 65,35 58,45 68,50 58,55 65,65 55,60 50,70 45,60 35,65 42,55 32,50 42,45 35,35 45,40" fill="%23FEF3C7"/></svg>')`
    },
    {
      id: 17,
      name: "Titan's Graveyard",
      description: "Where the bones of ancient titans form mountain ranges.",
      requiredEnergy: 100000000000,
      energyMultiplier: 15.0,
      gemMultiplier: 13.8,
      background: `linear-gradient(135deg, rgba(87, 83, 78, 0.9), rgba(168, 162, 158, 0.9)), url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><rect width="100" height="100" fill="%2357534E"/><ellipse cx="30" cy="70" rx="15" ry="8" fill="%23A8A29E"/><ellipse cx="70" cy="60" rx="20" ry="10" fill="%23A8A29E"/><rect x="45" y="40" width="8" height="25" fill="%23A8A29E"/></svg>')`
    },
    {
      id: 18,
      name: "Genesis Core",
      description: "The heart of creation itself, where all existence began.",
      requiredEnergy: 250000000000,
      energyMultiplier: 18.0,
      gemMultiplier: 16.5,
      background: `linear-gradient(135deg, rgba(255, 255, 255, 0.9), rgba(251, 207, 232, 0.9)), url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><rect width="100" height="100" fill="%23FFF"/><circle cx="50" cy="50" r="25" fill="none" stroke="%23FBCFE8" stroke-width="3"/><circle cx="50" cy="50" r="15" fill="none" stroke="%23F9A8D4" stroke-width="2"/><circle cx="50" cy="50" r="8" fill="%23EC4899"/></svg>')`
    },
    {
      id: 19,
      name: "Omega Dimension",
      description: "The final frontier where reality ends and the infinite void begins.",
      requiredEnergy: 600000000000,
      energyMultiplier: 22.0,
      gemMultiplier: 20.0,
      background: `linear-gradient(135deg, rgba(0, 0, 0, 0.98), rgba(67, 56, 202, 0.8)), url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><rect width="100" height="100" fill="%23000"/><rect x="20" y="20" width="60" height="60" fill="none" stroke="%234338CA" stroke-width="2"/><circle cx="50" cy="50" r="20" fill="none" stroke="%236366F1" stroke-width="1"/><polygon points="50,35 55,45 65,45 57,52 60,62 50,57 40,62 43,52 35,45 45,45" fill="%239333EA"/></svg>')`
    },
    {
      id: 20,
      name: "Creator's Domain",
      description: "The ultimate realm where the Creator of all universes resides in eternal light.",
      requiredEnergy: 1500000000000,
      energyMultiplier: 30.0,
      gemMultiplier: 25.0,
      background: `linear-gradient(135deg, rgba(255, 251, 235, 0.95), rgba(254, 240, 138, 0.95)), url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><rect width="100" height="100" fill="%23FFFBEB"/><circle cx="50" cy="50" r="30" fill="%23FEF08A" opacity="0.8"/><polygon points="50,20 52,30 60,30 54,35 57,45 50,40 43,45 46,35 40,30 48,30" fill="%23FFF"/><polygon points="30,30 32,35 37,35 33,38 35,43 30,40 25,43 27,38 23,35 28,35" fill="%23FFF"/><polygon points="70,30 72,35 77,35 73,38 75,43 70,40 65,43 67,38 63,35 68,35" fill="%23FFF"/></svg>')`
    },
    
    // === SECOND WORLD: ETHEREAL REALMS ===
    {
      id: 21,
      name: "Ethereal Gateway",
      description: "The threshold between mortal and divine realms, where reality becomes fluid.",
      requiredEnergy: 5000000000000,
      energyMultiplier: 45.0,
      gemMultiplier: 35.0,
      background: `linear-gradient(135deg, rgba(139, 92, 246, 0.9), rgba(168, 85, 247, 0.9)), url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><rect width="100" height="100" fill="%238B5CF6"/><circle cx="50" cy="50" r="25" fill="none" stroke="%23A855F7" stroke-width="3"/><circle cx="50" cy="50" r="15" fill="none" stroke="%23C084FC" stroke-width="2"/><circle cx="50" cy="50" r="8" fill="%23DDD6FE"/></svg>')`
    },
    {
      id: 22,
      name: "Spectral Mountains",
      description: "Ghostly peaks that phase in and out of existence, home to ancient spirits.",
      requiredEnergy: 12500000000000,
      energyMultiplier: 55.0,
      gemMultiplier: 42.0,
      background: `linear-gradient(135deg, rgba(75, 85, 99, 0.9), rgba(156, 163, 175, 0.9)), url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><rect width="100" height="100" fill="%234B5563"/><polygon points="20,90 35,30 50,90" fill="%239CA3AF" opacity="0.7"/><polygon points="50,90 65,25 80,90" fill="%239CA3AF" opacity="0.7"/><circle cx="40" cy="40" r="3" fill="%23FFF" opacity="0.5"/><circle cx="70" cy="35" r="2" fill="%23FFF" opacity="0.5"/></svg>')`
    },
    {
      id: 23,
      name: "Void Expanse",
      description: "An endless darkness where matter and energy dissolve into pure potential.",
      requiredEnergy: 30000000000000,
      energyMultiplier: 70.0,
      gemMultiplier: 50.0,
      background: `linear-gradient(135deg, rgba(0, 0, 0, 0.98), rgba(17, 24, 39, 0.9)), url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><rect width="100" height="100" fill="%23000"/><circle cx="25" cy="25" r="1" fill="%236366F1" opacity="0.8"/><circle cx="75" cy="30" r="1.5" fill="%238B5CF6" opacity="0.8"/><circle cx="60" cy="70" r="1" fill="%23A855F7" opacity="0.8"/><circle cx="30" cy="80" r="1" fill="%23C084FC" opacity="0.8"/></svg>')`
    },
    {
      id: 24,
      name: "Prismatic Cascade",
      description: "Waterfalls of liquid light that refract into infinite rainbow dimensions.",
      requiredEnergy: 75000000000000,
      energyMultiplier: 90.0,
      gemMultiplier: 65.0,
      background: `linear-gradient(135deg, rgba(236, 72, 153, 0.8), rgba(59, 130, 246, 0.8), rgba(34, 197, 94, 0.8)), url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><rect width="100" height="100" fill="%23EC4899"/><rect x="20" y="0" width="10" height="100" fill="%233B82F6" opacity="0.7"/><rect x="40" y="0" width="10" height="100" fill="%2322C55E" opacity="0.7"/><rect x="60" y="0" width="10" height="100" fill="%23FBBF24" opacity="0.7"/><rect x="80" y="0" width="10" height="100" fill="%23F87171" opacity="0.7"/></svg>')`
    },
    {
      id: 25,
      name: "Time Shattered Plains",
      description: "Broken landscapes where past, present, and future collide in temporal chaos.",
      requiredEnergy: 180000000000000,
      energyMultiplier: 115.0,
      gemMultiplier: 80.0,
      background: `linear-gradient(135deg, rgba(251, 191, 36, 0.9), rgba(245, 158, 11, 0.9)), url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><rect width="100" height="100" fill="%23FBBF24"/><polygon points="10,60 25,40 40,65 55,35 70,70 85,45 100,80 100,100 0,100" fill="%23F59E0B" opacity="0.8"/><circle cx="30" cy="30" r="5" fill="none" stroke="%23FFF" stroke-width="2"/><circle cx="70" cy="50" r="7" fill="none" stroke="%23FFF" stroke-width="2"/></svg>')`
    },
    {
      id: 26,
      name: "Quantum Labyrinth",
      description: "A maze that exists in multiple states simultaneously, defying logic.",
      requiredEnergy: 450000000000000,
      energyMultiplier: 145.0,
      gemMultiplier: 100.0,
      background: `linear-gradient(135deg, rgba(99, 102, 241, 0.9), rgba(168, 85, 247, 0.9)), url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><rect width="100" height="100" fill="%236366F1"/><rect x="10" y="10" width="80" height="10" fill="%23A855F7"/><rect x="10" y="10" width="10" height="80" fill="%23A855F7"/><rect x="80" y="10" width="10" height="80" fill="%23A855F7"/><rect x="30" y="30" width="40" height="10" fill="%23A855F7"/><rect x="50" y="50" width="10" height="40" fill="%23A855F7"/></svg>')`
    },
    {
      id: 27,
      name: "Stellar Nursery",
      description: "Birthplace of new stars, where cosmic dust swirls in eternal dance.",
      requiredEnergy: 1100000000000000,
      energyMultiplier: 180.0,
      gemMultiplier: 125.0,
      background: `linear-gradient(135deg, rgba(67, 56, 202, 0.9), rgba(139, 92, 246, 0.9)), url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><rect width="100" height="100" fill="%234338CA"/><circle cx="30" cy="30" r="8" fill="%238B5CF6" opacity="0.8"/><circle cx="70" cy="50" r="12" fill="%23A855F7" opacity="0.9"/><circle cx="20" cy="70" r="6" fill="%23C084FC" opacity="0.7"/><circle cx="80" cy="20" r="4" fill="%23FFF" opacity="0.9"/><circle cx="50" cy="80" r="5" fill="%23FFF" opacity="0.8"/></svg>')`
    },
    {
      id: 28,
      name: "Dimensional Rift",
      description: "A tear in spacetime where infinite realities bleed through the cracks.",
      requiredEnergy: 2700000000000000,
      energyMultiplier: 225.0,
      gemMultiplier: 155.0,
      background: `linear-gradient(135deg, rgba(239, 68, 68, 0.9), rgba(168, 85, 247, 0.9)), url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><rect width="100" height="100" fill="%23EF4444"/><polygon points="50,10 60,30 80,25 70,45 90,50 70,55 80,75 60,70 50,90 40,70 20,75 30,55 10,50 30,45 20,25 40,30" fill="%23A855F7" opacity="0.8"/><circle cx="50" cy="50" r="15" fill="none" stroke="%23FFF" stroke-width="3"/></svg>')`
    },
    {
      id: 29,
      name: "Antimatter Core",
      description: "The heart of anti-creation, where existence itself is questioned.",
      requiredEnergy: 6500000000000000,
      energyMultiplier: 280.0,
      gemMultiplier: 195.0,
      background: `linear-gradient(135deg, rgba(0, 0, 0, 0.95), rgba(239, 68, 68, 0.8)), url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><rect width="100" height="100" fill="%23000"/><circle cx="50" cy="50" r="30" fill="none" stroke="%23EF4444" stroke-width="4"/><circle cx="50" cy="50" r="20" fill="none" stroke="%23FFF" stroke-width="2"/><circle cx="50" cy="50" r="10" fill="%23EF4444"/><rect x="45" y="25" width="10" height="50" fill="%23FFF"/><rect x="25" y="45" width="50" height="10" fill="%23FFF"/></svg>')`
    },
    {
      id: 30,
      name: "Nexus of Infinity",
      description: "Where all possibilities converge into a single point of infinite potential.",
      requiredEnergy: 15000000000000000,
      energyMultiplier: 350.0,
      gemMultiplier: 240.0,
      background: `linear-gradient(135deg, rgba(255, 255, 255, 0.9), rgba(99, 102, 241, 0.8)), url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><rect width="100" height="100" fill="%23FFF"/><circle cx="50" cy="50" r="35" fill="none" stroke="%236366F1" stroke-width="5"/><circle cx="50" cy="50" r="25" fill="none" stroke="%238B5CF6" stroke-width="3"/><circle cx="50" cy="50" r="15" fill="none" stroke="%23A855F7" stroke-width="2"/><circle cx="50" cy="50" r="8" fill="%23C084FC"/></svg>')`
    },
    {
      id: 31,
      name: "Dreamscape Meadows",
      description: "Fields of crystallized dreams where thoughts take physical form.",
      requiredEnergy: 35000000000000000,
      energyMultiplier: 435.0,
      gemMultiplier: 300.0,
      background: `linear-gradient(135deg, rgba(251, 207, 232, 0.9), rgba(196, 181, 253, 0.9)), url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><rect width="100" height="100" fill="%23FBCFE8"/><circle cx="20" cy="30" r="6" fill="%23C4B5FD" opacity="0.8"/><circle cx="40" cy="50" r="8" fill="%23A78BFA" opacity="0.7"/><circle cx="70" cy="25" r="5" fill="%23C4B5FD" opacity="0.9"/><circle cx="60" cy="70" r="7" fill="%238B5CF6" opacity="0.6"/><circle cx="85" cy="60" r="4" fill="%23FFF" opacity="0.8"/></svg>')`
    },
    {
      id: 32,
      name: "Maelstrom of Souls",
      description: "A vortex where the essence of all living beings swirls in eternal motion.",
      requiredEnergy: 80000000000000000,
      energyMultiplier: 540.0,
      gemMultiplier: 375.0,
      background: `linear-gradient(135deg, rgba(55, 48, 163, 0.9), rgba(139, 92, 246, 0.9)), url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><rect width="100" height="100" fill="%233730A3"/><circle cx="50" cy="50" r="40" fill="none" stroke="%238B5CF6" stroke-width="6" stroke-dasharray="10,5"/><circle cx="50" cy="50" r="25" fill="none" stroke="%23A855F7" stroke-width="4" stroke-dasharray="8,4"/><circle cx="50" cy="50" r="12" fill="%23C084FC" opacity="0.8"/></svg>')`
    },
    {
      id: 33,
      name: "Paradox Engine",
      description: "A mechanical impossibility that powers itself through contradictions.",
      requiredEnergy: 180000000000000000,
      energyMultiplier: 670.0,
      gemMultiplier: 465.0,
      background: `linear-gradient(135deg, rgba(75, 85, 99, 0.9), rgba(229, 231, 235, 0.8)), url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><rect width="100" height="100" fill="%234B5563"/><rect x="20" y="20" width="60" height="60" fill="none" stroke="%23E5E7EB" stroke-width="4"/><circle cx="50" cy="50" r="15" fill="%23E5E7EB"/><rect x="42" y="15" width="16" height="70" fill="%23E5E7EB"/><rect x="15" y="42" width="70" height="16" fill="%23E5E7EB"/></svg>')`
    },
    {
      id: 34,
      name: "Echo Chamber",
      description: "Where the reverberations of creation itself still ring through eternity.",
      requiredEnergy: 400000000000000000,
      energyMultiplier: 830.0,
      gemMultiplier: 580.0,
      background: `linear-gradient(135deg, rgba(55, 65, 81, 0.9), rgba(107, 114, 128, 0.8)), url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><rect width="100" height="100" fill="%23374151"/><circle cx="50" cy="50" r="35" fill="none" stroke="%236B7280" stroke-width="2"/><circle cx="50" cy="50" r="25" fill="none" stroke="%236B7280" stroke-width="2"/><circle cx="50" cy="50" r="15" fill="none" stroke="%236B7280" stroke-width="2"/><circle cx="50" cy="50" r="5" fill="%236B7280"/></svg>')`
    },
    {
      id: 35,
      name: "Crystalline Throne",
      description: "The seat of the Eternal Sovereign, carved from pure concentrated willpower.",
      requiredEnergy: 900000000000000000,
      energyMultiplier: 1025.0,
      gemMultiplier: 720.0,
      background: `linear-gradient(135deg, rgba(219, 234, 254, 0.9), rgba(147, 197, 253, 0.8)), url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><rect width="100" height="100" fill="%23DBEAFE"/><polygon points="50,10 70,30 90,20 80,50 95,70 50,60 5,70 20,50 10,20 30,30" fill="%2393C5FD" opacity="0.8"/><rect x="40" y="50" width="20" height="35" fill="%2393C5FD"/><rect x="35" y="45" width="30" height="10" fill="%2393C5FD"/></svg>')`
    },
    {
      id: 36,
      name: "Probability Storm",
      description: "Chaotic weather where every raindrop contains a different possible future.",
      requiredEnergy: 200000000000000000000,
      energyMultiplier: 1270.0,
      gemMultiplier: 890.0,
      background: `linear-gradient(135deg, rgba(79, 70, 229, 0.9), rgba(236, 72, 153, 0.8)), url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><rect width="100" height="100" fill="%234F46E5"/><rect x="10" y="10" width="3" height="15" fill="%23EC4899"/><rect x="25" y="20" width="3" height="12" fill="%23EC4899"/><rect x="40" y="5" width="3" height="18" fill="%23EC4899"/><rect x="60" y="15" width="3" height="14" fill="%23EC4899"/><rect x="75" y="8" width="3" height="20" fill="%23EC4899"/><rect x="85" y="25" width="3" height="10" fill="%23EC4899"/></svg>')`
    },
    {
      id: 37,
      name: "Memory Palace",
      description: "An impossible library containing every thought ever conceived by any being.",
      requiredEnergy: 450000000000000000000,
      energyMultiplier: 1575.0,
      gemMultiplier: 1100.0,
      background: `linear-gradient(135deg, rgba(120, 113, 108, 0.9), rgba(231, 229, 228, 0.8)), url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><rect width="100" height="100" fill="%23787170"/><rect x="10" y="20" width="80" height="60" fill="%23E7E5E4" opacity="0.8"/><rect x="15" y="25" width="10" height="50" fill="%23787170"/><rect x="30" y="25" width="10" height="50" fill="%23787170"/><rect x="45" y="25" width="10" height="50" fill="%23787170"/><rect x="60" y="25" width="10" height="50" fill="%23787170"/><rect x="75" y="25" width="10" height="50" fill="%23787170"/></svg>')`
    },
    {
      id: 38,
      name: "Entropy Garden",
      description: "Where the universe slowly unravels, creating beautiful patterns of decay.",
      requiredEnergy: 1000000000000000000000,
      energyMultiplier: 1950.0,
      gemMultiplier: 1360.0,
      background: `linear-gradient(135deg, rgba(127, 29, 29, 0.9), rgba(239, 68, 68, 0.8)), url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><rect width="100" height="100" fill="%237F1D1D"/><circle cx="25" cy="25" r="8" fill="%23EF4444" opacity="0.7"/><circle cx="75" cy="35" r="6" fill="%23EF4444" opacity="0.5"/><circle cx="40" cy="60" r="10" fill="%23EF4444" opacity="0.6"/><circle cx="70" cy="70" r="7" fill="%23EF4444" opacity="0.8"/><circle cx="15" cy="80" r="5" fill="%23EF4444" opacity="0.4"/></svg>')`
    },
    {
      id: 39,
      name: "Temporal Singularity",
      description: "The point where all time streams converge, creating infinite recursive loops.",
      requiredEnergy: 2250000000000000000000,
      energyMultiplier: 2400.0,
      gemMultiplier: 1680.0,
      background: `linear-gradient(135deg, rgba(0, 0, 0, 0.98), rgba(67, 56, 202, 0.8)), url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><rect width="100" height="100" fill="%23000"/><circle cx="50" cy="50" r="30" fill="none" stroke="%234338CA" stroke-width="4"/><circle cx="50" cy="50" r="20" fill="none" stroke="%236366F1" stroke-width="3"/><circle cx="50" cy="50" r="10" fill="none" stroke="%238B5CF6" stroke-width="2"/><circle cx="50" cy="50" r="3" fill="%23FFF"/></svg>')`
    },
    {
      id: 40,
      name: "Origin Point Zero",
      description: "The ultimate realm where all existence began and will eventually return.",
      requiredEnergy: 5000000000000000000000,
      energyMultiplier: 3000.0,
      gemMultiplier: 2100.0,
      background: `linear-gradient(135deg, rgba(255, 255, 255, 0.95), rgba(255, 251, 235, 0.9)), url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><rect width="100" height="100" fill="%23FFF"/><circle cx="50" cy="50" r="40" fill="%23FFFBEB" opacity="0.9"/><circle cx="50" cy="50" r="30" fill="%23FEF3C7" opacity="0.8"/><circle cx="50" cy="50" r="20" fill="%23FDE68A" opacity="0.7"/><circle cx="50" cy="50" r="10" fill="%23FBBF24" opacity="0.6"/><circle cx="50" cy="50" r="5" fill="%23F59E0B"/></svg>')`
    },
    
    // World 3: Cosmic Dimension (Areas 41-60)
    {
      id: 41,
      name: "Stellar Gateway",
      description: "The cosmic portal connecting the lower realms to the infinite beyond.",
      requiredEnergy: 2.5e36,
      energyMultiplier: 5000.0,
      gemMultiplier: 3500.0,
      background: `linear-gradient(135deg, rgba(30, 41, 59, 0.95), rgba(99, 102, 241, 0.9)), url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><rect width="100" height="100" fill="%231E293B"/><circle cx="50" cy="50" r="25" fill="none" stroke="%236366F1" stroke-width="4"/><circle cx="50" cy="50" r="15" fill="none" stroke="%238B5CF6" stroke-width="2"/><polygon points="50,20 55,40 50,30 45,40" fill="%23A855F7"/><polygon points="50,80 55,60 50,70 45,60" fill="%23A855F7"/><polygon points="20,50 40,45 30,50 40,55" fill="%23A855F7"/><polygon points="80,50 60,45 70,50 60,55" fill="%23A855F7"/></svg>')`
    },
    {
      id: 42,
      name: "Quantum Void",
      description: "An emptiness so profound that it creates matter from pure thought.",
      requiredEnergy: 1.25e37,
      energyMultiplier: 7500.0,
      gemMultiplier: 5200.0,
      background: `linear-gradient(135deg, rgba(0, 0, 0, 0.98), rgba(30, 41, 59, 0.95)), url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><rect width="100" height="100" fill="%23000"/><circle cx="25" cy="25" r="2" fill="%236366F1" opacity="0.7"/><circle cx="75" cy="30" r="1.5" fill="%238B5CF6" opacity="0.8"/><circle cx="60" cy="70" r="1" fill="%23A855F7" opacity="0.9"/><circle cx="30" cy="80" r="2.5" fill="%23C084FC" opacity="0.6"/><circle cx="85" cy="15" r="1" fill="%23FFF" opacity="0.9"/></svg>')`
    },
    {
      id: 43,
      name: "Nebular Gardens",
      description: "Cosmic nurseries where new universes bud like flowers on celestial vines.",
      requiredEnergy: 6.25e37,
      energyMultiplier: 11250.0,
      gemMultiplier: 7800.0,
      background: `linear-gradient(135deg, rgba(219, 39, 119, 0.8), rgba(147, 51, 234, 0.9)), url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><rect width="100" height="100" fill="%23DB2777"/><circle cx="20" cy="30" r="8" fill="%239333EA" opacity="0.7"/><circle cx="60" cy="20" r="6" fill="%23A855F7" opacity="0.8"/><circle cx="40" cy="60" r="10" fill="%23C084FC" opacity="0.6"/><circle cx="80" cy="70" r="7" fill="%23DDD6FE" opacity="0.9"/><path d="M30,50 Q40,30 50,50 T70,50" stroke="%23FDE047" stroke-width="2" fill="none"/></svg>')`
    },
    {
      id: 44,
      name: "Hyperdimensional Maze",
      description: "A labyrinth existing in twelve dimensions, where every path leads to itself.",
      requiredEnergy: 3.125e38,
      energyMultiplier: 16875.0,
      gemMultiplier: 11700.0,
      background: `linear-gradient(135deg, rgba(67, 56, 202, 0.9), rgba(168, 85, 247, 0.8)), url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><rect width="100" height="100" fill="%234338CA"/><rect x="10" y="10" width="20" height="20" fill="none" stroke="%23A855F7" stroke-width="2"/><rect x="40" y="40" width="20" height="20" fill="none" stroke="%23C084FC" stroke-width="2"/><rect x="70" y="10" width="20" height="20" fill="none" stroke="%23A855F7" stroke-width="2"/><rect x="10" y="70" width="20" height="20" fill="none" stroke="%23C084FC" stroke-width="2"/><rect x="70" y="70" width="20" height="20" fill="none" stroke="%23A855F7" stroke-width="2"/></svg>')`
    },
    {
      id: 45,
      name: "Primordial Flame",
      description: "The first fire that ever burned, still raging at the heart of creation.",
      requiredEnergy: 1.5625e39,
      energyMultiplier: 25312.0,
      gemMultiplier: 17550.0,
      background: `linear-gradient(135deg, rgba(239, 68, 68, 0.95), rgba(251, 146, 60, 0.9)), url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><rect width="100" height="100" fill="%23EF4444"/><polygon points="50,10 60,40 50,30 40,40" fill="%23FB923C"/><polygon points="50,30 65,60 50,50 35,60" fill="%23FBBF24"/><polygon points="50,50 70,80 50,70 30,80" fill="%23FDE047"/><circle cx="50" cy="40" r="8" fill="%23FFF" opacity="0.8"/></svg>')`
    },
    {
      id: 46,
      name: "Gravity Well Nexus",
      description: "Where the gravitational pull of a trillion black holes creates impossible architecture.",
      requiredEnergy: 7.8125e39,
      energyMultiplier: 37968.0,
      gemMultiplier: 26325.0,
      background: `linear-gradient(135deg, rgba(17, 24, 39, 0.98), rgba(75, 85, 99, 0.9)), url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><rect width="100" height="100" fill="%23111827"/><circle cx="50" cy="50" r="30" fill="none" stroke="%234B5563" stroke-width="8"/><circle cx="50" cy="50" r="20" fill="none" stroke="%236B7280" stroke-width="4"/><circle cx="50" cy="50" r="10" fill="none" stroke="%239CA3AF" stroke-width="2"/><circle cx="50" cy="50" r="5" fill="%23000"/></svg>')`
    },
    {
      id: 47,
      name: "Chrono-Cascade",
      description: "A waterfall of time itself, where past and future merge into eternal now.",
      requiredEnergy: 3.90625e40,
      energyMultiplier: 56952.0,
      gemMultiplier: 39487.0,
      background: `linear-gradient(135deg, rgba(59, 130, 246, 0.9), rgba(147, 197, 253, 0.8)), url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><rect width="100" height="100" fill="%233B82F6"/><rect x="20" y="0" width="8" height="100" fill="%2393C5FD" opacity="0.8"/><rect x="35" y="0" width="6" height="100" fill="%23DBEAFE" opacity="0.7"/><rect x="48" y="0" width="4" height="100" fill="%23FFF" opacity="0.9"/><rect x="60" y="0" width="6" height="100" fill="%23DBEAFE" opacity="0.7"/><rect x="75" y="0" width="8" height="100" fill="%2393C5FD" opacity="0.8"/></svg>')`
    },
    {
      id: 48,
      name: "Consciousness Substrate",
      description: "The fundamental layer upon which all thoughts and dreams are constructed.",
      requiredEnergy: 1.953125e41,
      energyMultiplier: 85428.0,
      gemMultiplier: 59230.0,
      background: `linear-gradient(135deg, rgba(236, 72, 153, 0.9), rgba(251, 207, 232, 0.8)), url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><rect width="100" height="100" fill="%23EC4899"/><circle cx="30" cy="30" r="10" fill="%23FBCFE8" opacity="0.8"/><circle cx="70" cy="25" r="8" fill="%23F9A8D4" opacity="0.9"/><circle cx="50" cy="60" r="12" fill="%23FBCFE8" opacity="0.7"/><circle cx="25" cy="75" r="6" fill="%23FDF2F8" opacity="0.9"/><circle cx="80" cy="80" r="9" fill="%23F9A8D4" opacity="0.8"/></svg>')`
    },
    {
      id: 49,
      name: "Multiverse Convergence",
      description: "The crossroads where infinite realities intersect and exchange possibilities.",
      requiredEnergy: 9.765625e41,
      energyMultiplier: 128142.0,
      gemMultiplier: 88845.0,
      background: `linear-gradient(135deg, rgba(168, 85, 247, 0.9), rgba(196, 181, 253, 0.8)), url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><rect width="100" height="100" fill="%23A855F7"/><polygon points="50,10 60,40 50,30 40,40" fill="%23C4B5FD"/><polygon points="10,50 40,40 30,50 40,60" fill="%23C4B5FD"/><polygon points="90,50 60,40 70,50 60,60" fill="%23C4B5FD"/><polygon points="50,90 40,60 50,70 60,60" fill="%23C4B5FD"/><circle cx="50" cy="50" r="10" fill="%23FFF" opacity="0.9"/></svg>')`
    },
    {
      id: 50,
      name: "Omega Singularity",
      description: "The final point where all energy, matter, and information compress into unity.",
      requiredEnergy: 4.8828125e42,
      energyMultiplier: 192213.0,
      gemMultiplier: 133267.0,
      background: `linear-gradient(135deg, rgba(0, 0, 0, 0.99), rgba(255, 255, 255, 0.1)), url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><rect width="100" height="100" fill="%23000"/><circle cx="50" cy="50" r="35" fill="none" stroke="%23FFF" stroke-width="1" opacity="0.3"/><circle cx="50" cy="50" r="25" fill="none" stroke="%23FFF" stroke-width="2" opacity="0.5"/><circle cx="50" cy="50" r="15" fill="none" stroke="%23FFF" stroke-width="3" opacity="0.7"/><circle cx="50" cy="50" r="8" fill="none" stroke="%23FFF" stroke-width="4" opacity="0.9"/><circle cx="50" cy="50" r="3" fill="%23FFF"/></svg>')`
    },
    {
      id: 51,
      name: "Cosmic Forge",
      description: "The workshop where new laws of physics are hammered into existence.",
      requiredEnergy: 2.44140625e43,
      energyMultiplier: 288319.0,
      gemMultiplier: 199901.0,
      background: `linear-gradient(135deg, rgba(245, 158, 11, 0.95), rgba(239, 68, 68, 0.9)), url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><rect width="100" height="100" fill="%23F59E0B"/><rect x="40" y="20" width="20" height="60" fill="%23EF4444" opacity="0.8"/><circle cx="50" cy="30" r="8" fill="%23FFF" opacity="0.9"/><circle cx="50" cy="50" r="10" fill="%23FFF" opacity="0.8"/><circle cx="50" cy="70" r="6" fill="%23FFF" opacity="0.9"/><polygon points="30,40 50,30 70,40 50,50" fill="%23FEF3C7" opacity="0.7"/></svg>')`
    },
    {
      id: 52,
      name: "Fractal Eternity",
      description: "An infinitely recursive realm where each part contains the whole universe.",
      requiredEnergy: 1.220703125e44,
      energyMultiplier: 432478.0,
      gemMultiplier: 299851.0,
      background: `linear-gradient(135deg, rgba(34, 197, 94, 0.9), rgba(74, 222, 128, 0.8)), url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><rect width="100" height="100" fill="%2322C55E"/><rect x="25" y="25" width="50" height="50" fill="none" stroke="%234ADE80" stroke-width="3"/><rect x="35" y="35" width="30" height="30" fill="none" stroke="%2386EFAC" stroke-width="2"/><rect x="42.5" y="42.5" width="15" height="15" fill="none" stroke="%23BBF7D0" stroke-width="1"/><rect x="46.25" y="46.25" width="7.5" height="7.5" fill="%23FFF" opacity="0.9"/></svg>')`
    },
    {
      id: 53,
      name: "Probability Storm",
      description: "A maelstrom of potential outcomes where every possibility exists simultaneously.",
      requiredEnergy: 6.103515625e44,
      energyMultiplier: 648717.0,
      gemMultiplier: 449777.0,
      background: `linear-gradient(135deg, rgba(139, 92, 246, 0.9), rgba(196, 181, 253, 0.8)), url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><rect width="100" height="100" fill="%238B5CF6"/><circle cx="20" cy="20" r="8" fill="%23C4B5FD" opacity="0.7"/><circle cx="80" cy="30" r="6" fill="%23DDD6FE" opacity="0.8"/><circle cx="30" cy="70" r="10" fill="%23C4B5FD" opacity="0.6"/><circle cx="70" cy="80" r="7" fill="%23DDD6FE" opacity="0.9"/><circle cx="50" cy="50" r="12" fill="%23FFF" opacity="0.8"/></svg>')`
    },
    {
      id: 54,
      name: "Akashic Records",
      description: "The cosmic library containing the complete history of every soul across all timelines.",
      requiredEnergy: 3.0517578125e45,
      energyMultiplier: 973075.0,
      gemMultiplier: 674665.0,
      background: `linear-gradient(135deg, rgba(99, 102, 241, 0.9), rgba(165, 180, 252, 0.8)), url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><rect width="100" height="100" fill="%236366F1"/><rect x="15" y="20" width="70" height="60" fill="%23A5B4FC" opacity="0.8"/><rect x="20" y="25" width="8" height="50" fill="%236366F1"/><rect x="32" y="25" width="8" height="50" fill="%236366F1"/><rect x="44" y="25" width="8" height="50" fill="%236366F1"/><rect x="56" y="25" width="8" height="50" fill="%236366F1"/><rect x="68" y="25" width="8" height="50" fill="%236366F1"/></svg>')`
    },
    {
      id: 55,
      name: "Dimensional Keystone",
      description: "The cornerstone that holds the architecture of reality itself in place.",
      requiredEnergy: 1.52587890625e46,
      energyMultiplier: 1459612.0,
      gemMultiplier: 1011998.0,
      background: `linear-gradient(135deg, rgba(220, 38, 127, 0.9), rgba(244, 114, 182, 0.8)), url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><rect width="100" height="100" fill="%23DC267F"/><polygon points="50,15 65,35 50,25 35,35" fill="%23F472B6" opacity="0.8"/><polygon points="65,35 85,50 75,50 65,65" fill="%23F472B6" opacity="0.8"/><polygon points="50,85 35,65 50,75 65,65" fill="%23F472B6" opacity="0.8"/><polygon points="35,65 15,50 25,50 35,35" fill="%23F472B6" opacity="0.8"/><rect x="40" y="40" width="20" height="20" fill="%23FFF" opacity="0.9"/></svg>')`
    },
    {
      id: 56,
      name: "Metacosmic Nexus",
      description: "The hub connecting not just universes, but entire classes of existence.",
      requiredEnergy: 7.62939453125e46,
      energyMultiplier: 2189418.0,
      gemMultiplier: 1517997.0,
      background: `linear-gradient(135deg, rgba(168, 85, 247, 0.9), rgba(126, 34, 206, 0.9)), url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><rect width="100" height="100" fill="%23A855F7"/><circle cx="50" cy="50" r="30" fill="none" stroke="%237E22CE" stroke-width="6"/><circle cx="50" cy="50" r="20" fill="none" stroke="%239333EA" stroke-width="4"/><circle cx="50" cy="50" r="10" fill="none" stroke="%23A855F7" stroke-width="2"/><circle cx="50" cy="50" r="5" fill="%23FFF"/></svg>')`
    },
    {
      id: 57,
      name: "Consciousness Matrix",
      description: "The substrate grid upon which all awareness and intelligence is built.",
      requiredEnergy: 3.814697265625e47,
      energyMultiplier: 3284127.0,
      gemMultiplier: 2276995.0,
      background: `linear-gradient(135deg, rgba(34, 197, 94, 0.9), rgba(16, 185, 129, 0.8)), url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><rect width="100" height="100" fill="%2322C55E"/><rect x="10" y="10" width="80" height="80" fill="none" stroke="%2310B981" stroke-width="4"/><rect x="20" y="20" width="60" height="60" fill="none" stroke="%2310B981" stroke-width="3"/><rect x="30" y="30" width="40" height="40" fill="none" stroke="%2310B981" stroke-width="2"/><rect x="40" y="40" width="20" height="20" fill="none" stroke="%2310B981" stroke-width="1"/><circle cx="50" cy="50" r="5" fill="%23FFF"/></svg>')`
    },
    {
      id: 58,
      name: "Omniversal Throne",
      description: "The seat of power from which the laws governing all possible realities are decreed.",
      requiredEnergy: 1.9073486328125e48,
      energyMultiplier: 4926190.0,
      gemMultiplier: 3415493.0,
      background: `linear-gradient(135deg, rgba(251, 191, 36, 0.95), rgba(252, 211, 77, 0.9)), url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><rect width="100" height="100" fill="%23FBBF24"/><polygon points="50,10 70,30 90,20 80,50 95,70 50,60 5,70 20,50 10,20 30,30" fill="%23FCD34D" opacity="0.8"/><rect x="35" y="50" width="30" height="40" fill="%23FCD34D" opacity="0.9"/><rect x="25" y="45" width="50" height="10" fill="%23FEF3C7" opacity="0.9"/><circle cx="50" cy="35" r="8" fill="%23FFF"/></svg>')`
    },
    {
      id: 59,
      name: "Infinity Engine",
      description: "The perpetual motion machine that generates endless energy from mathematical paradoxes.",
      requiredEnergy: 9.5367431640625e48,
      energyMultiplier: 7389285.0,
      gemMultiplier: 5123239.0,
      background: `linear-gradient(135deg, rgba(239, 68, 68, 0.95), rgba(248, 113, 113, 0.9)), url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><rect width="100" height="100" fill="%23EF4444"/><circle cx="50" cy="50" r="35" fill="none" stroke="%23F87171" stroke-width="6"/><circle cx="50" cy="50" r="25" fill="none" stroke="%23FCA5A5" stroke-width="4"/><circle cx="50" cy="50" r="15" fill="none" stroke="%23FEE2E2" stroke-width="2"/><circle cx="50" cy="50" r="8" fill="%23FFF"/><rect x="45" y="20" width="10" height="60" fill="%23FFF" opacity="0.8"/><rect x="20" y="45" width="60" height="10" fill="%23FFF" opacity="0.8"/></svg>')`
    },
    {
      id: 60,
      name: "Absolute Zero Point",
      description: "The ultimate destination where all journeys end and all new journeys begin.",
      requiredEnergy: 4.76837158203125e49,
      energyMultiplier: 11083927.0,
      gemMultiplier: 7684859.0,
      background: `linear-gradient(135deg, rgba(255, 255, 255, 0.98), rgba(255, 255, 255, 0.95)), url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><rect width="100" height="100" fill="%23FFF"/><circle cx="50" cy="50" r="45" fill="none" stroke="%23E5E7EB" stroke-width="8"/><circle cx="50" cy="50" r="35" fill="none" stroke="%23D1D5DB" stroke-width="6"/><circle cx="50" cy="50" r="25" fill="none" stroke="%23B5B5B5" stroke-width="4"/><circle cx="50" cy="50" r="15" fill="none" stroke="%2374747" stroke-width="2"/><circle cx="50" cy="50" r="8" fill="%23000"/></svg>')`
    },
    
    // World 4 - Transcendence Realm (61-80)
    {
      id: 61,
      name: "Primordial Awakening",
      description: "The first moment of consciousness emerging from pure potentiality.",
      requiredEnergy: 2.384185791015625e54,
      energyMultiplier: 16625890.0,
      gemMultiplier: 11526288.0,
      background: `linear-gradient(135deg, rgba(139, 69, 19, 0.95), rgba(160, 82, 45, 0.9)), url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><rect width="100" height="100" fill="%238B4513"/><circle cx="50" cy="50" r="25" fill="%23A0522D" opacity="0.8"/><circle cx="50" cy="50" r="15" fill="%23CD853F" opacity="0.7"/><circle cx="50" cy="50" r="8" fill="%23F4A460" opacity="0.9"/><circle cx="50" cy="50" r="3" fill="%23FFF"/></svg>')`
    },
    {
      id: 62,
      name: "Essence Forge",
      description: "Where the fundamental building blocks of existence are shaped and molded.",
      requiredEnergy: 1.1920928955078125e55,
      energyMultiplier: 24938835.0,
      gemMultiplier: 17279432.0,
      background: `linear-gradient(135deg, rgba(205, 133, 63, 0.95), rgba(222, 184, 135, 0.9)), url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><rect width="100" height="100" fill="%23CD853F"/><polygon points="50,20 60,40 40,40" fill="%23DEB887" opacity="0.8"/><rect x="35" y="40" width="30" height="20" fill="%23DEB887" opacity="0.8"/><polygon points="30,60 35,80 65,80 70,60" fill="%23F5DEB3" opacity="0.9"/><rect x="47" y="25" width="6" height="50" fill="%23FF4500"/></svg>')`
    },
    {
      id: 63,
      name: "Metamorphic Chamber",
      description: "A realm where entities undergo fundamental transformations beyond recognition.",
      requiredEnergy: 5.9604644775390625e55,
      energyMultiplier: 37408252.0,
      gemMultiplier: 25919148.0,
      background: `linear-gradient(135deg, rgba(75, 0, 130, 0.95), rgba(138, 43, 226, 0.9)), url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><rect width="100" height="100" fill="%234B0082"/><ellipse cx="25" cy="25" rx="8" ry="12" fill="%238A2BE2" opacity="0.7"/><ellipse cx="75" cy="35" rx="12" ry="8" fill="%239370DB" opacity="0.8"/><ellipse cx="50" cy="70" rx="15" ry="10" fill="%23BA55D3" opacity="0.6"/><circle cx="60" cy="50" r="6" fill="%23FFF" opacity="0.9"/></svg>')`
    },
    {
      id: 64,
      name: "Platonic Ideals",
      description: "The perfect realm where all concepts exist in their purest, most absolute form.",
      requiredEnergy: 2.9802322387695312e56,
      energyMultiplier: 56112378.0,
      gemMultiplier: 38887722.0,
      background: `linear-gradient(135deg, rgba(255, 215, 0, 0.95), rgba(255, 248, 220, 0.9)), url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><rect width="100" height="100" fill="%23FFD700"/><polygon points="50,10 90,30 70,70 30,70 10,30" fill="%23FFF8DC" opacity="0.8"/><polygon points="50,25 75,35 65,55 35,55 25,35" fill="%23FFFACD" opacity="0.9"/><circle cx="50" cy="45" r="10" fill="%23FFF" opacity="0.9"/></svg>')`
    },
    {
      id: 65,
      name: "Noosphere Core",
      description: "The collective sphere of human thought and consciousness made manifest.",
      requiredEnergy: 1.4901161193847656e57,
      energyMultiplier: 84168567.0,
      gemMultiplier: 58331583.0,
      background: `linear-gradient(135deg, rgba(0, 255, 127, 0.95), rgba(144, 238, 144, 0.9)), url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><rect width="100" height="100" fill="%2300FF7F"/><circle cx="50" cy="50" r="40" fill="none" stroke="%2390EE90" stroke-width="4"/><circle cx="50" cy="50" r="25" fill="none" stroke="%2398FB98" stroke-width="3"/><circle cx="50" cy="50" r="15" fill="none" stroke="%23AFEEEE" stroke-width="2"/><circle cx="50" cy="50" r="8" fill="%23FFF"/></svg>')`
    },
    {
      id: 66,
      name: "Archetypal Pantheon",
      description: "Where the universal patterns that guide all stories and myths reside.",
      requiredEnergy: 7.450580596923828e57,
      energyMultiplier: 126252850.0,
      gemMultiplier: 87497374.0,
      background: `linear-gradient(135deg, rgba(128, 0, 128, 0.95), rgba(186, 85, 211, 0.9)), url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><rect width="100" height="100" fill="%23800080"/><circle cx="30" cy="30" r="12" fill="%23BA55D3" opacity="0.8"/><circle cx="70" cy="25" r="10" fill="%23DDA0DD" opacity="0.7"/><circle cx="50" cy="60" r="15" fill="%23E6E6FA" opacity="0.9"/><circle cx="25" cy="75" r="8" fill="%23BA55D3" opacity="0.6"/><circle cx="80" cy="80" r="9" fill="%23DDA0DD" opacity="0.8"/></svg>')`
    },
    {
      id: 67,
      name: "Temporal Singularity",
      description: "A point where past, present, and future converge into a single eternal moment.",
      requiredEnergy: 3.725290298461914e58,
      energyMultiplier: 189379275.0,
      gemMultiplier: 131246061.0,
      background: `linear-gradient(135deg, rgba(70, 130, 180, 0.95), rgba(135, 206, 250, 0.9)), url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><rect width="100" height="100" fill="%234682B4"/><circle cx="50" cy="50" r="30" fill="none" stroke="%2387CEEB" stroke-width="6"/><path d="M50,20 Q30,50 50,80 Q70,50 50,20" fill="%23FFF" opacity="0.7"/><circle cx="50" cy="50" r="8" fill="%23000"/></svg>')`
    },
    {
      id: 68,
      name: "Logic Paradox",
      description: "A realm where contradictions coexist and impossibilities become possible.",
      requiredEnergy: 1.862645149230957e59,
      energyMultiplier: 284068912.0,
      gemMultiplier: 196869091.0,
      background: `linear-gradient(135deg, rgba(255, 20, 147, 0.95), rgba(255, 105, 180, 0.9)), url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><rect width="100" height="100" fill="%23FF1493"/><rect x="10" y="10" width="35" height="35" fill="%23FFF" opacity="0.8"/><circle cx="72.5" cy="27.5" r="17.5" fill="%23000" opacity="0.8"/><circle cx="27.5" cy="72.5" r="17.5" fill="%23FFF" opacity="0.8"/><rect x="55" y="55" width="35" height="35" fill="%23000" opacity="0.8"/></svg>')`
    },
    {
      id: 69,
      name: "Metanarrative Weave",
      description: "The story that contains all stories, including the story of itself.",
      requiredEnergy: 9.313225746154785e59,
      energyMultiplier: 426103368.0,
      gemMultiplier: 295303636.0,
      background: `linear-gradient(135deg, rgba(255, 165, 0, 0.95), rgba(255, 218, 185, 0.9)), url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><rect width="100" height="100" fill="%23FFA500"/><path d="M10,10 Q50,30 90,10 Q70,50 90,90 Q50,70 10,90 Q30,50 10,10" fill="%23FFDAB9" opacity="0.8"/><path d="M25,25 Q50,35 75,25 Q65,50 75,75 Q50,65 25,75 Q35,50 25,25" fill="%23FFF" opacity="0.6"/></svg>')`
    },
    {
      id: 70,
      name: "Consciousness Engine",
      description: "The mechanical source from which all awareness and self-reflection emerges.",
      requiredEnergy: 4.656612873077393e60,
      energyMultiplier: 639155052.0,
      gemMultiplier: 442955454.0,
      background: `linear-gradient(135deg, rgba(169, 169, 169, 0.95), rgba(192, 192, 192, 0.9)), url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><rect width="100" height="100" fill="%23A9A9A9"/><rect x="20" y="20" width="60" height="40" fill="%23C0C0C0" opacity="0.9"/><circle cx="35" cy="35" r="8" fill="%23FFF"/><circle cx="65" cy="35" r="8" fill="%23FFF"/><rect x="40" y="45" width="20" height="8" fill="%23000" opacity="0.7"/><circle cx="50" cy="75" r="5" fill="%23FF0000"/></svg>')`
    },
    {
      id: 71,
      name: "Quantum Myth",
      description: "Where legends exist in superposition until observed and made manifest.",
      requiredEnergy: 2.3283064365386963e61,
      energyMultiplier: 958732578.0,
      gemMultiplier: 664433181.0,
      background: `linear-gradient(135deg, rgba(72, 61, 139, 0.95), rgba(123, 104, 238, 0.9)), url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><rect width="100" height="100" fill="%23483D8B"/><circle cx="50" cy="50" r="30" fill="none" stroke="%237B68EE" stroke-width="4" stroke-dasharray="5,5"/><circle cx="50" cy="50" r="20" fill="none" stroke="%239370DB" stroke-width="3" stroke-dasharray="3,3"/><circle cx="50" cy="50" r="10" fill="none" stroke="%23DDA0DD" stroke-width="2"/><circle cx="50" cy="50" r="5" fill="%23FFF"/></svg>')`
    },
    {
      id: 72,
      name: "Akashic Compiler",
      description: "The processing center that transforms raw experience into wisdom and knowledge.",
      requiredEnergy: 1.1641532182693481e62,
      energyMultiplier: 1438098867.0,
      gemMultiplier: 996649771.0,
      background: `linear-gradient(135deg, rgba(0, 100, 0, 0.95), rgba(50, 205, 50, 0.9)), url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><rect width="100" height="100" fill="%23006400"/><rect x="10" y="20" width="80" height="60" fill="%2332CD32" opacity="0.8"/><rect x="15" y="25" width="70" height="10" fill="%23006400"/><rect x="15" y="40" width="70" height="4" fill="%23006400"/><rect x="15" y="48" width="70" height="4" fill="%23006400"/><rect x="15" y="56" width="70" height="4" fill="%23006400"/><rect x="15" y="64" width="70" height="10" fill="%23006400"/></svg>')`
    },
    {
      id: 73,
      name: "Dimensional Architect",
      description: "The master builder who designs and constructs new layers of reality.",
      requiredEnergy: 5.8207660913467407e62,
      energyMultiplier: 2157148300.0,
      gemMultiplier: 1495974657.0,
      background: `linear-gradient(135deg, rgba(139, 0, 139, 0.95), rgba(218, 112, 214, 0.9)), url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><rect width="100" height="100" fill="%238B008B"/><polygon points="50,10 80,25 65,50 80,75 50,90 20,75 35,50 20,25" fill="%23DA70D6" opacity="0.8"/><polygon points="50,20 70,30 60,50 70,70 50,80 30,70 40,50 30,30" fill="%23DDA0DD" opacity="0.9"/><circle cx="50" cy="50" r="8" fill="%23FFF"/></svg>')`
    },
    {
      id: 74,
      name: "Eternal Recursion",
      description: "An infinite loop of self-reference where every ending becomes a new beginning.",
      requiredEnergy: 2.9103830456733704e63,
      energyMultiplier: 3235722450.0,
      gemMultiplier: 2243961985.0,
      background: `linear-gradient(135deg, rgba(184, 134, 11, 0.95), rgba(245, 158, 11, 0.9)), url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><rect width="100" height="100" fill="%23B8860B"/><circle cx="50" cy="50" r="40" fill="none" stroke="%23F59E0B" stroke-width="6"/><path d="M50,10 Q90,50 50,90 Q10,50 50,10" fill="none" stroke="%23FDE047" stroke-width="4"/><circle cx="50" cy="50" r="8" fill="%23FFF"/></svg>')`
    },
    {
      id: 75,
      name: "Possibility Engine",
      description: "The generator that creates new potential realities from pure imagination.",
      requiredEnergy: 1.4551915228366852e64,
      energyMultiplier: 4853583675.0,
      gemMultiplier: 3365942977.0,
      background: `linear-gradient(135deg, rgba(255, 0, 255, 0.95), rgba(255, 192, 203, 0.9)), url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><rect width="100" height="100" fill="%23FF00FF"/><rect x="20" y="20" width="60" height="60" fill="%23FFC0CB" opacity="0.8"/><circle cx="35" cy="35" r="8" fill="%23FF69B4"/><circle cx="65" cy="35" r="8" fill="%23FF1493"/><circle cx="50" cy="65" r="12" fill="%23FFF" opacity="0.9"/><polygon points="50,45 55,55 50,50 45,55" fill="%23000"/></svg>')`
    },
    {
      id: 76,
      name: "Transcendence Gate",
      description: "The ultimate threshold beyond which lies something indescribable and unknowable.",
      requiredEnergy: 7.275957614183426e64,
      energyMultiplier: 7280375512.0,
      gemMultiplier: 5047914466.0,
      background: `linear-gradient(135deg, rgba(25, 25, 112, 0.95), rgba(72, 61, 139, 0.9)), url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><rect width="100" height="100" fill="%23191970"/><rect x="25" y="10" width="50" height="80" fill="none" stroke="%23483D8B" stroke-width="8"/><rect x="30" y="15" width="40" height="70" fill="none" stroke="%236A5ACD" stroke-width="6"/><rect x="35" y="20" width="30" height="60" fill="none" stroke="%237B68EE" stroke-width="4"/><circle cx="50" cy="50" r="10" fill="%23FFF"/></svg>')`
    },
    {
      id: 77,
      name: "Meta-Reality Core",
      description: "The central processing unit of existence itself, calculating the laws of all realities.",
      requiredEnergy: 3.637978807091713e65,
      energyMultiplier: 10920563268.0,
      gemMultiplier: 7571871699.0,
      background: `linear-gradient(135deg, rgba(0, 0, 0, 0.98), rgba(25, 25, 25, 0.95)), url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><rect width="100" height="100" fill="%23000"/><circle cx="50" cy="50" r="35" fill="none" stroke="%23191919" stroke-width="6"/><circle cx="50" cy="50" r="25" fill="none" stroke="%23333" stroke-width="4"/><circle cx="50" cy="50" r="15" fill="none" stroke="%23666" stroke-width="2"/><circle cx="50" cy="50" r="8" fill="%23999"/><circle cx="50" cy="50" r="3" fill="%23FFF"/></svg>')`
    },
    {
      id: 78,
      name: "Omnipotence Nexus",
      description: "The focal point where unlimited power intersects with infinite responsibility.",
      requiredEnergy: 1.8189894035458565e66,
      energyMultiplier: 16380844902.0,
      gemMultiplier: 11357807548.0,
      background: `linear-gradient(135deg, rgba(218, 165, 32, 0.98), rgba(255, 215, 0, 0.95)), url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><rect width="100" height="100" fill="%23DAA520"/><polygon points="50,5 70,35 95,35 75,55 85,85 50,70 15,85 25,55 5,35 30,35" fill="%23FFD700" opacity="0.9"/><polygon points="50,15 65,40 85,40 70,52 75,75 50,65 25,75 30,52 15,40 35,40" fill="%23FFF" opacity="0.8"/><circle cx="50" cy="50" r="8" fill="%23FFD700"/></svg>')`
    },
    {
      id: 79,
      name: "Infinite Recursion",
      description: "A realm that contains perfect copies of itself, nested infinitely deep.",
      requiredEnergy: 9.094947017729282e66,
      energyMultiplier: 24571267353.0,
      gemMultiplier: 17037711322.0,
      background: `linear-gradient(135deg, rgba(138, 43, 226, 0.98), rgba(186, 85, 211, 0.95)), url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><rect width="100" height="100" fill="%238A2BE2"/><rect x="10" y="10" width="80" height="80" fill="none" stroke="%23BA55D3" stroke-width="4"/><rect x="20" y="20" width="60" height="60" fill="none" stroke="%23DA70D6" stroke-width="3"/><rect x="30" y="30" width="40" height="40" fill="none" stroke="%23DDA0DD" stroke-width="2"/><rect x="40" y="40" width="20" height="20" fill="none" stroke="%23E6E6FA" stroke-width="1"/><circle cx="50" cy="50" r="5" fill="%23FFF"/></svg>')`
    },
    {
      id: 80,
      name: "Origin Point",
      description: "The ultimate source from which all existence, consciousness, and possibility springs forth.",
      requiredEnergy: 4.5474735088646412e67,
      energyMultiplier: 36856901029.0,
      gemMultiplier: 25562566983.0,
      background: `linear-gradient(135deg, rgba(255, 255, 255, 1.0), rgba(240, 248, 255, 0.98)), url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><rect width="100" height="100" fill="%23FFF"/><circle cx="50" cy="50" r="45" fill="none" stroke="%23F0F8FF" stroke-width="10"/><circle cx="50" cy="50" r="35" fill="none" stroke="%23E6E6FA" stroke-width="8"/><circle cx="50" cy="50" r="25" fill="none" stroke="%23D3D3D3" stroke-width="6"/><circle cx="50" cy="50" r="15" fill="none" stroke="%23A9A9A9" stroke-width="4"/><circle cx="50" cy="50" r="8" fill="none" stroke="%23696969" stroke-width="2"/><circle cx="50" cy="50" r="3" fill="%23000"/></svg>')`
    },
    
    // World 5 - Infinite Ascension (81-100)
    {
      id: 81,
      name: "Ascension Gate",
      description: "The first threshold where finite beings attempt to comprehend infinity.",
      requiredEnergy: 2.2737367544423206e71,
      energyMultiplier: 55285351543.0,
      gemMultiplier: 38335095044.0,
      background: `linear-gradient(135deg, rgba(255, 215, 0, 0.98), rgba(255, 248, 220, 0.95)), url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><rect width="100" height="100" fill="%23FFD700"/><rect x="10" y="10" width="80" height="80" fill="none" stroke="%23FFF8DC" stroke-width="6"/><rect x="20" y="20" width="60" height="60" fill="none" stroke="%23FFFACD" stroke-width="4"/><rect x="30" y="30" width="40" height="40" fill="none" stroke="%23FFF" stroke-width="2"/><circle cx="50" cy="50" r="10" fill="%23FFF"/></svg>')`
    },
    {
      id: 82,
      name: "Hierarchy Breach",
      description: "Where the ordered layers of existence begin to break down.",
      requiredEnergy: 1.1368683772211603e72,
      energyMultiplier: 82928027314.0,
      gemMultiplier: 57525142566.0,
      background: `linear-gradient(135deg, rgba(138, 43, 226, 0.98), rgba(186, 85, 211, 0.95)), url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><rect width="100" height="100" fill="%238A2BE2"/><polygon points="50,5 25,35 75,35" fill="%23BA55D3" opacity="0.8"/><polygon points="25,35 50,65 75,35" fill="%23DDA0DD" opacity="0.7"/><polygon points="50,65 25,95 75,95" fill="%23E6E6FA" opacity="0.9"/></svg>')`
    },
    {
      id: 83,
      name: "Concept Factory",
      description: "The manufacturing center where abstract ideas are given substance.",
      requiredEnergy: 5.684341886105801e72,
      energyMultiplier: 124392040971.0,
      gemMultiplier: 86218213849.0,
      background: `linear-gradient(135deg, rgba(105, 105, 105, 0.98), rgba(169, 169, 169, 0.95)), url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><rect width="100" height="100" fill="%23696969"/><rect x="10" y="30" width="20" height="40" fill="%23A9A9A9"/><rect x="30" y="20" width="15" height="60" fill="%23A9A9A9"/><rect x="50" y="35" width="18" height="30" fill="%23A9A9A9"/><rect x="75" y="25" width="15" height="50" fill="%23A9A9A9"/></svg>')`
    },
    {
      id: 84,
      name: "Infinite Regression",
      description: "A place that contains smaller versions of itself, endlessly nested.",
      requiredEnergy: 2.8421709430529006e73,
      energyMultiplier: 186588061456.0,
      gemMultiplier: 129327320773.0,
      background: `linear-gradient(135deg, rgba(0, 255, 255, 0.98), rgba(224, 255, 255, 0.95)), url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><rect width="100" height="100" fill="%2300FFFF"/><rect x="5" y="5" width="90" height="90" fill="none" stroke="%23E0FFFF" stroke-width="3"/><rect x="15" y="15" width="70" height="70" fill="none" stroke="%23F0FFFF" stroke-width="2"/><rect x="25" y="25" width="50" height="50" fill="none" stroke="%23FFF" stroke-width="1"/><rect x="40" y="40" width="20" height="20" fill="%23FFF"/></svg>')`
    },
    {
      id: 85,
      name: "Logic Overflow",
      description: "Where rational thought breaks down under the weight of infinite complexity.",
      requiredEnergy: 1.4210854715264503e74,
      energyMultiplier: 279882092184.0,
      gemMultiplier: 194019481160.0,
      background: `linear-gradient(135deg, rgba(255, 0, 0, 0.98), rgba(255, 192, 203, 0.95)), url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><rect width="100" height="100" fill="%23FF0000"/><circle cx="20" cy="20" r="15" fill="%23FFC0CB" opacity="0.8"/><circle cx="80" cy="30" r="12" fill="%23FFB6C1" opacity="0.7"/><circle cx="30" cy="70" r="18" fill="%23FFC0CB" opacity="0.9"/><circle cx="70" cy="80" r="10" fill="%23FFE4E1" opacity="0.8"/></svg>')`
    },
    {
      id: 86,
      name: "Paradox Engine",
      description: "A machine powered by contradictions, generating impossible energy.",
      requiredEnergy: 7.105427357632251e74,
      energyMultiplier: 419823138276.0,
      gemMultiplier: 291029221740.0,
      background: `linear-gradient(135deg, rgba(75, 0, 130, 0.98), rgba(138, 43, 226, 0.95)), url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><rect width="100" height="100" fill="%234B0082"/><circle cx="50" cy="50" r="35" fill="none" stroke="%238A2BE2" stroke-width="4"/><polygon points="50,15 65,45 35,45" fill="%239370DB"/><polygon points="50,85 35,55 65,55" fill="%239370DB"/><circle cx="50" cy="50" r="8" fill="%23FFF"/></svg>')`
    },
    {
      id: 87,
      name: "Meta-Mathematics",
      description: "Where numbers study themselves and equations become self-aware.",
      requiredEnergy: 3.5527136788161256e75,
      energyMultiplier: 629734707414.0,
      gemMultiplier: 436543832610.0,
      background: `linear-gradient(135deg, rgba(0, 128, 0, 0.98), rgba(144, 238, 144, 0.95)), url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><rect width="100" height="100" fill="%23008000"/><text x="20" y="30" font-family="serif" font-size="20" fill="%2390EE90">∞</text><text x="60" y="50" font-family="serif" font-size="15" fill="%2398FB98">π</text><text x="30" y="70" font-family="serif" font-size="18" fill="%23AFEEEE">∅</text><text x="70" y="80" font-family="serif" font-size="12" fill="%23FFF">∴</text></svg>')`
    },
    {
      id: 88,
      name: "Thought Synthesizer",
      description: "Combines pure ideas to create new forms of consciousness.",
      requiredEnergy: 1.7763568394080628e76,
      energyMultiplier: 944602061121.0,
      gemMultiplier: 654815248915.0,
      background: `linear-gradient(135deg, rgba(255, 20, 147, 0.98), rgba(255, 182, 193, 0.95)), url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><rect width="100" height="100" fill="%23FF1493"/><ellipse cx="30" cy="30" rx="15" ry="10" fill="%23FFB6C1" opacity="0.8"/><ellipse cx="70" cy="40" rx="12" ry="15" fill="%23FFC0CB" opacity="0.7"/><ellipse cx="50" cy="70" rx="20" ry="8" fill="%23FFE4E1" opacity="0.9"/></svg>')`
    },
    {
      id: 89,
      name: "Omniscience Buffer",
      description: "A temporary storage for infinite knowledge that would destroy finite minds.",
      requiredEnergy: 8.881784197040314e76,
      energyMultiplier: 1416903091681.0,
      gemMultiplier: 982187873372.0,
      background: `linear-gradient(135deg, rgba(72, 61, 139, 0.98), rgba(147, 112, 219, 0.95)), url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><rect width="100" height="100" fill="%23483D8B"/><rect x="15" y="25" width="70" height="50" fill="%239370DB" opacity="0.8"/><rect x="20" y="30" width="60" height="5" fill="%23DDA0DD"/><rect x="20" y="40" width="60" height="3" fill="%23DDA0DD"/><rect x="20" y="50" width="60" height="3" fill="%23DDA0DD"/><rect x="20" y="60" width="60" height="5" fill="%23DDA0DD"/></svg>')`
    },
    {
      id: 90,
      name: "Reality Compiler",
      description: "Converts abstract possibilities into concrete existence.",
      requiredEnergy: 4.440892098520157e77,
      energyMultiplier: 2125354637522.0,
      gemMultiplier: 1473281810058.0,
      background: `linear-gradient(135deg, rgba(139, 0, 139, 0.98), rgba(218, 112, 214, 0.95)), url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><rect width="100" height="100" fill="%238B008B"/><polygon points="15,15 85,15 85,45 50,65 15,45" fill="%23DA70D6" opacity="0.8"/><polygon points="15,55 50,35 85,55 85,85 15,85" fill="%23DDA0DD" opacity="0.9"/></svg>')`
    },
    {
      id: 91,
      name: "Infinite Loop Nexus",
      description: "The central hub of all recursive processes in existence.",
      requiredEnergy: 2.2204460492600785e78,
      energyMultiplier: 3188031956283.0,
      gemMultiplier: 2210081715087.0,
      background: `linear-gradient(135deg, rgba(255, 140, 0, 0.98), rgba(255, 218, 185, 0.95)), url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><rect width="100" height="100" fill="%23FF8C00"/><circle cx="50" cy="50" r="40" fill="none" stroke="%23FFDAB9" stroke-width="8"/><path d="M25,50 Q50,25 75,50 Q50,75 25,50" fill="none" stroke="%23FFF" stroke-width="4"/></svg>')`
    },
    {
      id: 92,
      name: "Conceptual Forge",
      description: "Where the tools of creation are themselves created.",
      requiredEnergy: 1.1102230246300392e79,
      energyMultiplier: 4782047934424.0,
      gemMultiplier: 3315622572631.0,
      background: `linear-gradient(135deg, rgba(165, 42, 42, 0.98), rgba(205, 92, 92, 0.95)), url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><rect width="100" height="100" fill="%23A52A2A"/><polygon points="40,20 60,20 70,40 60,60 40,60 30,40" fill="%23CD5C5C" opacity="0.8"/><rect x="45" y="60" width="10" height="20" fill="%23BC8F8F"/><circle cx="50" cy="30" r="8" fill="%23FFF"/></svg>')`
    },
    {
      id: 93,
      name: "Transcendental Function",
      description: "A mathematical entity that has achieved self-awareness and autonomy.",
      requiredEnergy: 5.551115123150196e79,
      energyMultiplier: 7173071901636.0,
      gemMultiplier: 4973433858946.0,
      background: `linear-gradient(135deg, rgba(30, 144, 255, 0.98), rgba(173, 216, 230, 0.95)), url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><rect width="100" height="100" fill="%231E90FF"/><path d="M10,90 Q30,10 50,50 Q70,90 90,10" stroke="%23ADD8E6" stroke-width="6" fill="none"/><circle cx="30" cy="30" r="5" fill="%23FFF"/><circle cx="50" cy="50" r="7" fill="%23FFF"/><circle cx="70" cy="30" r="5" fill="%23FFF"/></svg>')`
    },
    {
      id: 94,
      name: "Meta-Existence Layer",
      description: "A level of being that exists beyond the concept of existence itself.",
      requiredEnergy: 2.775557561575098e80,
      energyMultiplier: 10759607852454.0,
      gemMultiplier: 7460508788419.0,
      background: `linear-gradient(135deg, rgba(128, 128, 128, 0.98), rgba(211, 211, 211, 0.95)), url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><rect width="100" height="100" fill="%23808080"/><rect x="5" y="10" width="90" height="10" fill="%23D3D3D3" opacity="0.8"/><rect x="5" y="25" width="90" height="10" fill="%23D3D3D3" opacity="0.6"/><rect x="5" y="40" width="90" height="10" fill="%23D3D3D3" opacity="0.8"/><rect x="5" y="55" width="90" height="10" fill="%23D3D3D3" opacity="0.6"/><rect x="5" y="70" width="90" height="10" fill="%23D3D3D3" opacity="0.8"/></svg>')`
    },
    {
      id: 95,
      name: "Absolute Singularity",
      description: "A point of infinite density containing all possible information.",
      requiredEnergy: 1.387778780787549e81,
      energyMultiplier: 16139411778681.0,
      gemMultiplier: 11193261183628.0,
      background: `linear-gradient(135deg, rgba(0, 0, 0, 1.0), rgba(25, 25, 25, 0.98)), url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><rect width="100" height="100" fill="%23000"/><circle cx="50" cy="50" r="1" fill="%23FFF"/><circle cx="50" cy="50" r="5" fill="none" stroke="%23FFF" stroke-width="0.5" opacity="0.8"/><circle cx="50" cy="50" r="10" fill="none" stroke="%23FFF" stroke-width="0.3" opacity="0.6"/><circle cx="50" cy="50" r="20" fill="none" stroke="%23FFF" stroke-width="0.2" opacity="0.4"/></svg>')`
    },
    {
      id: 96,
      name: "Omnipotence Overflow",
      description: "Where unlimited power spills over into adjacent dimensions.",
      requiredEnergy: 6.938893903937745e81,
      energyMultiplier: 24209117668021.0,
      gemMultiplier: 16790175425442.0,
      background: `linear-gradient(135deg, rgba(255, 215, 0, 1.0), rgba(255, 255, 224, 0.98)), url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><rect width="100" height="100" fill="%23FFD700"/><polygon points="50,10 60,40 90,40 68,58 78,88 50,70 22,88 32,58 10,40 40,40" fill="%23FFFFE0" opacity="0.9"/><circle cx="50" cy="50" r="15" fill="%23FFF"/></svg>')`
    },
    {
      id: 97,
      name: "Hyper-Recursion Core",
      description: "Recursion that recurses upon its own recursion infinitely.",
      requiredEnergy: 3.4694469519688726e82,
      energyMultiplier: 36313676502032.0,
      gemMultiplier: 25185763138163.0,
      background: `linear-gradient(135deg, rgba(199, 21, 133, 0.98), rgba(219, 112, 147, 0.95)), url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><rect width="100" height="100" fill="%23C71585"/><rect x="10" y="10" width="80" height="80" fill="none" stroke="%23DB7093" stroke-width="4"/><rect x="20" y="20" width="60" height="60" fill="none" stroke="%23DB7093" stroke-width="3"/><rect x="30" y="30" width="40" height="40" fill="none" stroke="%23DB7093" stroke-width="2"/><rect x="40" y="40" width="20" height="20" fill="none" stroke="%23DB7093" stroke-width="1"/><circle cx="50" cy="50" r="5" fill="%23FFF"/></svg>')`
    },
    {
      id: 98,
      name: "Perfect Information",
      description: "Complete knowledge of all states across infinite realities.",
      requiredEnergy: 1.7347234759844363e83,
      energyMultiplier: 54470514753048.0,
      gemMultiplier: 37779644707244.0,
      background: `linear-gradient(135deg, rgba(70, 130, 180, 0.98), rgba(176, 196, 222, 0.95)), url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><rect width="100" height="100" fill="%234682B4"/><circle cx="50" cy="50" r="35" fill="none" stroke="%23B0C4DE" stroke-width="6"/><path d="M15,50 L85,50 M50,15 L50,85 M25,25 L75,75 M75,25 L25,75" stroke="%23FFF" stroke-width="2" opacity="0.8"/><circle cx="50" cy="50" r="8" fill="%23FFF"/></svg>')`
    },
    {
      id: 99,
      name: "Ultimate Paradox",
      description: "The final contradiction that resolves all other contradictions.",
      requiredEnergy: 8.673617379922181e83,
      energyMultiplier: 81705772129572.0,
      gemMultiplier: 56677466058866.0,
      background: `linear-gradient(135deg, rgba(128, 0, 128, 0.98), rgba(221, 160, 221, 0.95)), url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><rect width="100" height="100" fill="%23800080"/><circle cx="25" cy="25" r="20" fill="%23DDA0DD" opacity="0.5"/><rect x="55" y="55" width="40" height="40" fill="%23DDA0DD" opacity="0.5"/><polygon points="75,5 95,25 75,45 55,25" fill="%23E6E6FA" opacity="0.7"/><circle cx="25" cy="75" r="15" fill="%23E6E6FA" opacity="0.8"/></svg>')`
    },
    {
      id: 100,
      name: "Infinity's End",
      description: "The impossible destination where infinity finally concludes and begins anew.",
      requiredEnergy: 4.3368086899610907e84,
      energyMultiplier: 122558658194358.0,
      gemMultiplier: 85046087088299.0,
      background: `linear-gradient(135deg, rgba(255, 255, 255, 1.0), rgba(0, 0, 0, 0.0)), url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><defs><radialGradient id="infinityGrad" cx="50%" cy="50%" r="50%"><stop offset="0%" stop-color="white" stop-opacity="1"/><stop offset="100%" stop-color="black" stop-opacity="1"/></radialGradient></defs><rect width="100" height="100" fill="url(%23infinityGrad)"/><text x="50" y="55" font-family="serif" font-size="30" fill="gray" text-anchor="middle">∞</text></svg>')`
    }
  ]);
  
  const weatherEvents: Omit<WeatherEvent, 'id' | 'startTime' | 'duration'>[] = [
    // Common Weather (60% chance)
    { name: 'Sunny Skies', emoji: '☀️', rarity: 'Common', mutationChance: 1, multiplierBonus: 1.1, description: 'Bright sunshine energizes all equipment' },
    { name: 'Light Rain', emoji: '🌧️', rarity: 'Common', mutationChance: 1, multiplierBonus: 1.15, description: 'Gentle rain cleanses and refreshes gear' },
    { name: 'Cloudy Weather', emoji: '☁️', rarity: 'Common', mutationChance: 1, multiplierBonus: 1.1, description: 'Overcast skies create mysterious energy' },
    
    // Uncommon Weather (25% chance)
    { name: 'Thunder Storm', emoji: '⛈️', rarity: 'Uncommon', mutationChance: 2, multiplierBonus: 1.25, description: 'Electric storms charge equipment with power' },
    { name: 'Heavy Snow', emoji: '❄️', rarity: 'Uncommon', mutationChance: 2, multiplierBonus: 1.2, description: 'Freezing conditions crystallize magical properties' },
    { name: 'Strong Winds', emoji: '💨', rarity: 'Uncommon', mutationChance: 2, multiplierBonus: 1.3, description: 'Powerful gusts infuse items with wind energy' },
    
    // Rare Weather (10% chance)
    { name: 'Aurora Display', emoji: '🌌', rarity: 'Rare', mutationChance: 3, multiplierBonus: 1.5, description: 'Northern lights imbue items with cosmic energy' },
    { name: 'Meteor Shower', emoji: '☄️', rarity: 'Rare', mutationChance: 3, multiplierBonus: 1.6, description: 'Falling stars enhance equipment with stellar power' },
    { name: 'Solar Eclipse', emoji: '🌑', rarity: 'Rare', mutationChance: 3, multiplierBonus: 1.4, description: 'Eclipse shadows unlock hidden potential' },
    
    // Epic Weather (3% chance)
    { name: 'Reality Storm', emoji: '🌀', rarity: 'Epic', mutationChance: 4, multiplierBonus: 2.0, description: 'Reality itself becomes unstable, warping equipment' },
    { name: 'Temporal Anomaly', emoji: '⏰', rarity: 'Epic', mutationChance: 4, multiplierBonus: 2.2, description: 'Time distortions accelerate item evolution' },
    { name: 'Dimensional Rift', emoji: '🕳️', rarity: 'Epic', mutationChance: 4, multiplierBonus: 1.8, description: 'Rifts between dimensions leak exotic energy' },
    
    // Legendary Weather (1.5% chance)
    { name: 'Cosmic Convergence', emoji: '✨', rarity: 'Legendary', mutationChance: 5, multiplierBonus: 3.0, description: 'Multiple universes align, supercharging all items' },
    { name: 'Divine Intervention', emoji: '👑', rarity: 'Legendary', mutationChance: 5, multiplierBonus: 2.8, description: 'Gods themselves bless the realm with power' },
    
    // Mythic Weather (0.5% chance)
    { name: 'Origin Event', emoji: '💫', rarity: 'Mythic', mutationChance: 5, multiplierBonus: 5.0, description: 'A recreation of the universe\'s birth moment' }
  ];

  const availableItems: ShopItem[] = [
    // Relics
    { id: 1, name: 'Broken Stone Tablet', category: 'Relics', rarity: 'Common', price: 0, gemPrice: 0, energyMultiplier: 1.15, gemMultiplier: 1.1, description: 'A cracked tablet with faded inscriptions' },
    { id: 2, name: 'Ancient Scroll', category: 'Relics', rarity: 'Uncommon', price: 0, gemPrice: 0, energyMultiplier: 1.35, gemMultiplier: 1.25, description: 'An old scroll that radiates power' },
    { id: 3, name: 'Crystal Orb', category: 'Relics', rarity: 'Rare', price: 0, gemPrice: 0, energyMultiplier: 1.8, gemMultiplier: 1.6, description: 'A mystical orb pulsing with energy' },
    { id: 4, name: 'Golden Chalice', category: 'Relics', rarity: 'Epic', price: 0, gemPrice: 0, energyMultiplier: 2.5, gemMultiplier: 2.2, description: 'A chalice blessed by ancient gods' },
    { id: 5, name: 'Divine Altar', category: 'Relics', rarity: 'Legendary', price: 0, gemPrice: 0, energyMultiplier: 3.5, gemMultiplier: 3.0, description: 'An altar that channels divine power' },
    { id: 6, name: 'World Tree Branch', category: 'Relics', rarity: 'Mythic', price: 0, gemPrice: 0, energyMultiplier: 5.0, gemMultiplier: 4.2, description: 'A branch from the legendary World Tree' },
    { id: 7, name: 'Genesis Stone', category: 'Relics', rarity: 'Secret', price: 0, gemPrice: 0, energyMultiplier: 8.0, gemMultiplier: 7.0, description: 'The primordial stone of creation' },
    
    // Artifacts (Highest multipliers)
    { id: 8, name: 'Worn Ring', category: 'Artifacts', rarity: 'Common', price: 0, gemPrice: 0, energyMultiplier: 1.25, gemMultiplier: 1.2, description: 'A simple ring showing signs of wear' },
    { id: 9, name: 'Power Ring', category: 'Artifacts', rarity: 'Uncommon', price: 0, gemPrice: 0, energyMultiplier: 1.5, gemMultiplier: 1.4, description: 'A ring that amplifies your strength' },
    { id: 10, name: 'Mystic Amulet', category: 'Artifacts', rarity: 'Rare', price: 0, gemPrice: 0, energyMultiplier: 2.2, gemMultiplier: 1.9, description: 'An amulet blessed by ancient magic' },
    { id: 11, name: 'Crown of Kings', category: 'Artifacts', rarity: 'Epic', price: 0, gemPrice: 0, energyMultiplier: 3.2, gemMultiplier: 2.8, description: 'A crown worn by ancient kings' },
    { id: 12, name: 'Crown of Legends', category: 'Artifacts', rarity: 'Legendary', price: 0, gemPrice: 0, energyMultiplier: 4.5, gemMultiplier: 3.8, description: 'A crown worn by legendary heroes' },
    { id: 13, name: 'Infinity Gauntlet', category: 'Artifacts', rarity: 'Mythic', price: 0, gemPrice: 0, energyMultiplier: 6.5, gemMultiplier: 5.5, description: 'A gauntlet that controls reality itself' },
    { id: 14, name: 'Heart of Universe', category: 'Artifacts', rarity: 'Secret', price: 0, gemPrice: 0, energyMultiplier: 10.0, gemMultiplier: 8.5, description: 'The core essence of the universe' },
    
    // Weapons
    { id: 15, name: 'Rusty Dagger', category: 'Weapons', rarity: 'Common', price: 0, gemPrice: 0, energyMultiplier: 1.1, gemMultiplier: 1.08, description: 'A dull blade covered in rust' },
    { id: 16, name: 'Iron Sword', category: 'Weapons', rarity: 'Uncommon', price: 0, gemPrice: 0, energyMultiplier: 1.3, gemMultiplier: 1.2, description: 'A sturdy iron blade' },
    { id: 17, name: 'Silver Katana', category: 'Weapons', rarity: 'Rare', price: 0, gemPrice: 0, energyMultiplier: 1.7, gemMultiplier: 1.5, description: 'A gleaming silver katana' },
    { id: 18, name: 'Dragon Blade', category: 'Weapons', rarity: 'Epic', price: 0, gemPrice: 0, energyMultiplier: 2.3, gemMultiplier: 2.0, description: 'A blade forged from dragon scales' },
    { id: 19, name: 'Excalibur', category: 'Weapons', rarity: 'Legendary', price: 0, gemPrice: 0, energyMultiplier: 3.2, gemMultiplier: 2.7, description: 'The legendary sword of kings' },
    { id: 20, name: 'Godslayer', category: 'Weapons', rarity: 'Mythic', price: 0, gemPrice: 0, energyMultiplier: 4.5, gemMultiplier: 3.8, description: 'A weapon capable of slaying gods' },
    { id: 21, name: 'Void Ripper', category: 'Weapons', rarity: 'Secret', price: 0, gemPrice: 0, energyMultiplier: 7.5, gemMultiplier: 6.5, description: 'A blade that tears through reality itself' },
    
    // Pets (Lowest multipliers but you can have 3)
    // Common Pets
    { id: 22, name: 'Garden Snake', category: 'Pets', rarity: 'Common', price: 0, gemPrice: 0, energyMultiplier: 1.08, gemMultiplier: 1.06, description: 'A small harmless snake' },
    { id: 29, name: 'House Mouse', category: 'Pets', rarity: 'Common', price: 0, gemPrice: 0, energyMultiplier: 1.09, gemMultiplier: 1.07, description: 'A tiny but loyal companion' },
    { id: 30, name: 'Wild Rabbit', category: 'Pets', rarity: 'Common', price: 0, gemPrice: 0, energyMultiplier: 1.07, gemMultiplier: 1.08, description: 'A fluffy forest creature' },
    
    // Uncommon Pets
    { id: 23, name: 'Spirit Cat', category: 'Pets', rarity: 'Uncommon', price: 0, gemPrice: 0, energyMultiplier: 1.2, gemMultiplier: 1.15, description: 'A mystical feline companion' },
    { id: 31, name: 'Storm Owl', category: 'Pets', rarity: 'Uncommon', price: 0, gemPrice: 0, energyMultiplier: 1.18, gemMultiplier: 1.16, description: 'An owl that brings storms' },
    { id: 32, name: 'Crystal Turtle', category: 'Pets', rarity: 'Uncommon', price: 0, gemPrice: 0, energyMultiplier: 1.19, gemMultiplier: 1.14, description: 'A turtle with crystal shell' },
    
    // Rare Pets
    { id: 24, name: 'Fire Fox', category: 'Pets', rarity: 'Rare', price: 0, gemPrice: 0, energyMultiplier: 1.4, gemMultiplier: 1.3, description: 'A fox with flames dancing on its tail' },
    { id: 33, name: 'Ice Wolf', category: 'Pets', rarity: 'Rare', price: 0, gemPrice: 0, energyMultiplier: 1.42, gemMultiplier: 1.28, description: 'A wolf from frozen lands' },
    { id: 34, name: 'Wind Eagle', category: 'Pets', rarity: 'Rare', price: 0, gemPrice: 0, energyMultiplier: 1.38, gemMultiplier: 1.32, description: 'An eagle that rides the wind' },
    
    // Epic Pets
    { id: 25, name: 'Thunder Wolf', category: 'Pets', rarity: 'Epic', price: 0, gemPrice: 0, energyMultiplier: 1.7, gemMultiplier: 1.5, description: 'A wolf that controls lightning' },
    { id: 35, name: 'Shadow Panther', category: 'Pets', rarity: 'Epic', price: 0, gemPrice: 0, energyMultiplier: 1.68, gemMultiplier: 1.52, description: 'A panther that walks in shadows' },
    { id: 36, name: 'Golden Lion', category: 'Pets', rarity: 'Epic', price: 0, gemPrice: 0, energyMultiplier: 1.72, gemMultiplier: 1.48, description: 'A majestic golden-maned lion' },
    
    // Legendary Pets
    { id: 26, name: 'Phoenix Chick', category: 'Pets', rarity: 'Legendary', price: 0, gemPrice: 0, energyMultiplier: 2.2, gemMultiplier: 1.8, description: 'A baby phoenix that brings luck' },
    { id: 37, name: 'Ancient Dragon', category: 'Pets', rarity: 'Legendary', price: 0, gemPrice: 0, energyMultiplier: 2.18, gemMultiplier: 1.82, description: 'An ancient wise dragon' },
    { id: 38, name: 'Celestial Tiger', category: 'Pets', rarity: 'Legendary', price: 0, gemPrice: 0, energyMultiplier: 2.22, gemMultiplier: 1.78, description: 'A tiger blessed by the heavens' },
    
    // Mythic Pets
    { id: 27, name: 'Cosmic Dragon', category: 'Pets', rarity: 'Mythic', price: 0, gemPrice: 0, energyMultiplier: 3.0, gemMultiplier: 2.5, description: 'A dragon from the cosmos itself' },
    { id: 39, name: 'Void Serpent', category: 'Pets', rarity: 'Mythic', price: 0, gemPrice: 0, energyMultiplier: 2.98, gemMultiplier: 2.52, description: 'A serpent from the void dimension' },
    { id: 40, name: 'Star Beast', category: 'Pets', rarity: 'Mythic', price: 0, gemPrice: 0, energyMultiplier: 3.02, gemMultiplier: 2.48, description: 'A creature born from starlight' },
    
    // Secret Pets
    { id: 28, name: 'Origin Beast', category: 'Pets', rarity: 'Secret', price: 0, gemPrice: 0, energyMultiplier: 5.0, gemMultiplier: 4.2, description: 'The first creature ever created' },
    { id: 41, name: 'Genesis Companion', category: 'Pets', rarity: 'Secret', price: 0, gemPrice: 0, energyMultiplier: 4.98, gemMultiplier: 4.22, description: 'Companion from the beginning of time' },
    { id: 42, name: 'Infinity Guardian', category: 'Pets', rarity: 'Secret', price: 0, gemPrice: 0, energyMultiplier: 5.02, gemMultiplier: 4.18, description: 'Guardian of infinite realms' },
    
    // === ETHEREAL TIER EQUIPMENT (Second World) ===
    // Ethereal Relics (Highest multipliers)
    { id: 43, name: 'Spectral Codex', category: 'Relics', rarity: 'Common', price: 0, gemPrice: 0, energyMultiplier: 12.0, gemMultiplier: 8.5, description: 'A ghostly book that phases between dimensions' },
    { id: 44, name: 'Void Crystal', category: 'Relics', rarity: 'Uncommon', price: 0, gemPrice: 0, energyMultiplier: 18.0, gemMultiplier: 14.0, description: 'A crystal containing pure nothingness' },
    { id: 45, name: 'Temporal Anchor', category: 'Relics', rarity: 'Rare', price: 0, gemPrice: 0, energyMultiplier: 28.0, gemMultiplier: 22.0, description: 'Keeps you grounded in the timestream' },
    { id: 46, name: 'Reality Engine', category: 'Relics', rarity: 'Epic', price: 0, gemPrice: 0, energyMultiplier: 45.0, gemMultiplier: 35.0, description: 'A machine that can rewrite the laws of physics' },
    { id: 47, name: 'Consciousness Core', category: 'Relics', rarity: 'Legendary', price: 0, gemPrice: 0, energyMultiplier: 75.0, gemMultiplier: 58.0, description: 'The crystallized awareness of a cosmic entity' },
    { id: 48, name: 'Infinity Nexus', category: 'Relics', rarity: 'Mythic', price: 0, gemPrice: 0, energyMultiplier: 120.0, gemMultiplier: 95.0, description: 'A connection point to all possible realities' },
    { id: 49, name: 'Origin Codex', category: 'Relics', rarity: 'Secret', price: 0, gemPrice: 0, energyMultiplier: 200.0, gemMultiplier: 150.0, description: 'The fundamental laws that govern all existence' },
    
    // Ethereal Artifacts (Supreme multipliers)
    { id: 50, name: 'Phase Ring', category: 'Artifacts', rarity: 'Common', price: 0, gemPrice: 0, energyMultiplier: 15.0, gemMultiplier: 11.0, description: 'A ring that shifts between states of matter' },
    { id: 51, name: 'Quantum Crown', category: 'Artifacts', rarity: 'Uncommon', price: 0, gemPrice: 0, energyMultiplier: 22.0, gemMultiplier: 18.0, description: 'A crown that exists in multiple positions simultaneously' },
    { id: 52, name: 'Paradox Gauntlet', category: 'Artifacts', rarity: 'Rare', price: 0, gemPrice: 0, energyMultiplier: 35.0, gemMultiplier: 28.0, description: 'Gauntlets that violate causality itself' },
    { id: 53, name: 'Ethereal Diadem', category: 'Artifacts', rarity: 'Epic', price: 0, gemPrice: 0, energyMultiplier: 58.0, gemMultiplier: 45.0, description: 'Crown of the Ethereal Sovereign' },
    { id: 54, name: 'Omniscience Circlet', category: 'Artifacts', rarity: 'Legendary', price: 0, gemPrice: 0, energyMultiplier: 95.0, gemMultiplier: 75.0, description: 'Grants awareness of all possibilities' },
    { id: 55, name: 'Cosmic Authority', category: 'Artifacts', rarity: 'Mythic', price: 0, gemPrice: 0, energyMultiplier: 155.0, gemMultiplier: 120.0, description: 'The right to command reality itself' },
    { id: 56, name: 'Transcendent Will', category: 'Artifacts', rarity: 'Secret', price: 0, gemPrice: 0, energyMultiplier: 250.0, gemMultiplier: 190.0, description: 'Pure willpower given form' },
    
    // Ethereal Weapons
    { id: 57, name: 'Spectral Blade', category: 'Weapons', rarity: 'Common', price: 0, gemPrice: 0, energyMultiplier: 10.0, gemMultiplier: 7.5, description: 'A sword that cuts through dimensions' },
    { id: 58, name: 'Void Cutter', category: 'Weapons', rarity: 'Uncommon', price: 0, gemPrice: 0, energyMultiplier: 16.0, gemMultiplier: 12.0, description: 'Cleaves through the fabric of space' },
    { id: 59, name: 'Temporal Saber', category: 'Weapons', rarity: 'Rare', price: 0, gemPrice: 0, energyMultiplier: 25.0, gemMultiplier: 19.0, description: 'Strikes across multiple timelines' },
    { id: 60, name: 'Reality Ripper', category: 'Weapons', rarity: 'Epic', price: 0, gemPrice: 0, energyMultiplier: 40.0, gemMultiplier: 30.0, description: 'Tears holes in the universe itself' },
    { id: 61, name: 'Cosmic Executioner', category: 'Weapons', rarity: 'Legendary', price: 0, gemPrice: 0, energyMultiplier: 65.0, gemMultiplier: 50.0, description: 'Can slay abstract concepts' },
    { id: 62, name: 'Paradox Blade', category: 'Weapons', rarity: 'Mythic', price: 0, gemPrice: 0, energyMultiplier: 105.0, gemMultiplier: 80.0, description: 'A weapon that both exists and doesn\'t' },
    { id: 63, name: 'Origin Slayer', category: 'Weapons', rarity: 'Secret', price: 0, gemPrice: 0, energyMultiplier: 175.0, gemMultiplier: 135.0, description: 'Capable of ending the source of all things' },
    
    // Ethereal Pets (Lowest but still powerful)
    // Common Ethereal Pets
    { id: 64, name: 'Phase Spider', category: 'Pets', rarity: 'Common', price: 0, gemPrice: 0, energyMultiplier: 8.0, gemMultiplier: 6.0, description: 'A spider that walks between realities' },
    { id: 65, name: 'Void Wisp', category: 'Pets', rarity: 'Common', price: 0, gemPrice: 0, energyMultiplier: 8.2, gemMultiplier: 5.8, description: 'A fragment of pure nothingness' },
    { id: 66, name: 'Quantum Mouse', category: 'Pets', rarity: 'Common', price: 0, gemPrice: 0, energyMultiplier: 7.8, gemMultiplier: 6.2, description: 'Exists in superposition until observed' },
    
    // Uncommon Ethereal Pets
    { id: 67, name: 'Spectral Raven', category: 'Pets', rarity: 'Uncommon', price: 0, gemPrice: 0, energyMultiplier: 12.0, gemMultiplier: 9.0, description: 'A ghostly messenger from beyond' },
    { id: 68, name: 'Time Ferret', category: 'Pets', rarity: 'Uncommon', price: 0, gemPrice: 0, energyMultiplier: 11.5, gemMultiplier: 9.5, description: 'Scurries through temporal loops' },
    { id: 69, name: 'Dream Butterfly', category: 'Pets', rarity: 'Uncommon', price: 0, gemPrice: 0, energyMultiplier: 12.3, gemMultiplier: 8.7, description: 'Feeds on crystallized dreams' },
    
    // Rare Ethereal Pets
    { id: 70, name: 'Dimensional Wolf', category: 'Pets', rarity: 'Rare', price: 0, gemPrice: 0, energyMultiplier: 18.0, gemMultiplier: 14.0, description: 'Hunts across multiple dimensions' },
    { id: 71, name: 'Ethereal Tiger', category: 'Pets', rarity: 'Rare', price: 0, gemPrice: 0, energyMultiplier: 17.5, gemMultiplier: 14.5, description: 'Prowls the ethereal planes' },
    { id: 72, name: 'Void Hawk', category: 'Pets', rarity: 'Rare', price: 0, gemPrice: 0, energyMultiplier: 18.5, gemMultiplier: 13.5, description: 'Soars through empty space' },
    
    // Epic Ethereal Pets
    { id: 73, name: 'Paradox Phoenix', category: 'Pets', rarity: 'Epic', price: 0, gemPrice: 0, energyMultiplier: 28.0, gemMultiplier: 22.0, description: 'Dies and is reborn simultaneously' },
    { id: 74, name: 'Quantum Dragon', category: 'Pets', rarity: 'Epic', price: 0, gemPrice: 0, energyMultiplier: 27.5, gemMultiplier: 22.5, description: 'Exists in all possible states' },
    { id: 75, name: 'Temporal Serpent', category: 'Pets', rarity: 'Epic', price: 0, gemPrice: 0, energyMultiplier: 28.5, gemMultiplier: 21.5, description: 'Slithers through the timestream' },
    
    // Legendary Ethereal Pets
    { id: 76, name: 'Reality Sphinx', category: 'Pets', rarity: 'Legendary', price: 0, gemPrice: 0, energyMultiplier: 45.0, gemMultiplier: 35.0, description: 'Guardian of universal truths' },
    { id: 77, name: 'Cosmic Leviathan', category: 'Pets', rarity: 'Legendary', price: 0, gemPrice: 0, energyMultiplier: 44.0, gemMultiplier: 36.0, description: 'Swims through seas of starlight' },
    { id: 78, name: 'Ethereal Titan', category: 'Pets', rarity: 'Legendary', price: 0, gemPrice: 0, energyMultiplier: 46.0, gemMultiplier: 34.0, description: 'A giant that spans dimensions' },
    
    // Mythic Ethereal Pets
    { id: 79, name: 'Void Sovereign', category: 'Pets', rarity: 'Mythic', price: 0, gemPrice: 0, energyMultiplier: 72.0, gemMultiplier: 58.0, description: 'Ruler of empty space' },
    { id: 80, name: 'Infinity Warden', category: 'Pets', rarity: 'Mythic', price: 0, gemPrice: 0, energyMultiplier: 70.0, gemMultiplier: 60.0, description: 'Guardian of endless possibilities' },
    { id: 81, name: 'Paradox Entity', category: 'Pets', rarity: 'Mythic', price: 0, gemPrice: 0, energyMultiplier: 74.0, gemMultiplier: 56.0, description: 'A being that defies logic itself' },
    
    // Secret Ethereal Pets
    { id: 82, name: 'Origin Shepherd', category: 'Pets', rarity: 'Secret', price: 0, gemPrice: 0, energyMultiplier: 120.0, gemMultiplier: 95.0, description: 'Guides the birth of universes' },
    { id: 83, name: 'Absolute Guardian', category: 'Pets', rarity: 'Secret', price: 0, gemPrice: 0, energyMultiplier: 118.0, gemMultiplier: 97.0, description: 'Protects the concept of existence' },
    { id: 84, name: 'Transcendent Being', category: 'Pets', rarity: 'Secret', price: 0, gemPrice: 0, energyMultiplier: 122.0, gemMultiplier: 93.0, description: 'Has moved beyond all limitations' },
    
    // Cosmic Relics (Ultimate tier)
    { id: 85, name: 'Quantum Fragment', category: 'Relics', rarity: 'Common', price: 0, gemPrice: 0, energyMultiplier: 200.0, gemMultiplier: 150.0, description: 'A fragment of pure possibility from the quantum realm' },
    { id: 86, name: 'Stellar Essence', category: 'Relics', rarity: 'Uncommon', price: 0, gemPrice: 0, energyMultiplier: 350.0, gemMultiplier: 275.0, description: 'Condensed starlight that burns with cosmic fire' },
    { id: 87, name: 'Dimensional Key', category: 'Relics', rarity: 'Rare', price: 0, gemPrice: 0, energyMultiplier: 650.0, gemMultiplier: 500.0, description: 'Opens doorways between parallel universes' },
    { id: 88, name: 'Infinity Shard', category: 'Relics', rarity: 'Epic', price: 0, gemPrice: 0, energyMultiplier: 1200.0, gemMultiplier: 900.0, description: 'A piece of mathematical infinity made manifest' },
    { id: 89, name: 'Omniversal Core', category: 'Relics', rarity: 'Legendary', price: 0, gemPrice: 0, energyMultiplier: 2200.0, gemMultiplier: 1650.0, description: 'The heart of all possible realities' },
    { id: 90, name: 'Primordial Seed', category: 'Relics', rarity: 'Mythic', price: 0, gemPrice: 0, energyMultiplier: 4000.0, gemMultiplier: 3000.0, description: 'The seed from which all existence grows' },
    { id: 91, name: 'Absolute Nexus', category: 'Relics', rarity: 'Secret', price: 0, gemPrice: 0, energyMultiplier: 7500.0, gemMultiplier: 5500.0, description: 'The connection point of all cosmic forces' },
    
    // Cosmic Artifacts (Ultimate tier)
    { id: 92, name: 'Reality Ring', category: 'Artifacts', rarity: 'Common', price: 0, gemPrice: 0, energyMultiplier: 250.0, gemMultiplier: 185.0, description: 'Controls the fundamental laws of existence' },
    { id: 93, name: 'Cosmic Crown', category: 'Artifacts', rarity: 'Uncommon', price: 0, gemPrice: 0, energyMultiplier: 425.0, gemMultiplier: 320.0, description: 'Grants dominion over galactic clusters' },
    { id: 94, name: 'Omnipotent Gauntlet', category: 'Artifacts', rarity: 'Rare', price: 0, gemPrice: 0, energyMultiplier: 800.0, gemMultiplier: 600.0, description: 'Wields the power to reshape reality with a gesture' },
    { id: 95, name: 'Transcendent Amulet', category: 'Artifacts', rarity: 'Epic', price: 0, gemPrice: 0, energyMultiplier: 1500.0, gemMultiplier: 1100.0, description: 'Elevates the wearer beyond physical limitations' },
    { id: 96, name: 'Universal Scepter', category: 'Artifacts', rarity: 'Legendary', price: 0, gemPrice: 0, energyMultiplier: 2800.0, gemMultiplier: 2050.0, description: 'Commands the fundamental forces of the cosmos' },
    { id: 97, name: 'Infinity Chalice', category: 'Artifacts', rarity: 'Mythic', price: 0, gemPrice: 0, energyMultiplier: 5100.0, gemMultiplier: 3750.0, description: 'Contains the essence of unlimited potential' },
    { id: 98, name: 'Omniscient Eye', category: 'Artifacts', rarity: 'Secret', price: 0, gemPrice: 0, energyMultiplier: 9500.0, gemMultiplier: 7000.0, description: 'Sees all possibilities across infinite timelines' },
    
    // Cosmic Weapons (Ultimate tier)
    { id: 99, name: 'Quantum Blade', category: 'Weapons', rarity: 'Common', price: 0, gemPrice: 0, energyMultiplier: 180.0, gemMultiplier: 140.0, description: 'Cuts through the fabric of spacetime itself' },
    { id: 100, name: 'Stellar Hammer', category: 'Weapons', rarity: 'Uncommon', price: 0, gemPrice: 0, energyMultiplier: 320.0, gemMultiplier: 250.0, description: 'Forged in the heart of a dying star' },
    { id: 101, name: 'Void Spear', category: 'Weapons', rarity: 'Rare', price: 0, gemPrice: 0, energyMultiplier: 580.0, gemMultiplier: 450.0, description: 'Pierces through dimensions and reality barriers' },
    { id: 102, name: 'Infinity Sword', category: 'Weapons', rarity: 'Epic', price: 0, gemPrice: 0, energyMultiplier: 1050.0, gemMultiplier: 800.0, description: 'A blade with unlimited sharpness and reach' },
    { id: 103, name: 'Cosmic Scythe', category: 'Weapons', rarity: 'Legendary', price: 0, gemPrice: 0, energyMultiplier: 1950.0, gemMultiplier: 1500.0, description: 'Harvests the energy of entire galaxies' },
    { id: 104, name: 'Reality Breaker', category: 'Weapons', rarity: 'Mythic', price: 0, gemPrice: 0, energyMultiplier: 3600.0, gemMultiplier: 2750.0, description: 'Shatters the boundaries between possible and impossible' },
    { id: 105, name: 'Omnicide Edge', category: 'Weapons', rarity: 'Secret', price: 0, gemPrice: 0, energyMultiplier: 7480.0, gemMultiplier: 5720.0, description: 'The weapon that could end all existence' },
    
    // Cosmic Pets (Ultimate tier) - 3 per rarity
    { id: 106, name: 'Quantum Cat', category: 'Pets', rarity: 'Common', price: 0, gemPrice: 0, energyMultiplier: 160.0, gemMultiplier: 125.0, description: 'Exists in all possible states simultaneously' },
    { id: 107, name: 'Nebula Wolf', category: 'Pets', rarity: 'Common', price: 0, gemPrice: 0, energyMultiplier: 165.0, gemMultiplier: 130.0, description: 'Hunts across the cosmic wilderness' },
    { id: 108, name: 'Void Fox', category: 'Pets', rarity: 'Common', price: 0, gemPrice: 0, energyMultiplier: 170.0, gemMultiplier: 135.0, description: 'Dances through empty space with grace' },
    { id: 109, name: 'Stellar Phoenix', category: 'Pets', rarity: 'Uncommon', price: 0, gemPrice: 0, energyMultiplier: 290.0, gemMultiplier: 230.0, description: 'Reborn from the ashes of collapsed stars' },
    { id: 110, name: 'Cosmic Drake', category: 'Pets', rarity: 'Uncommon', price: 0, gemPrice: 0, energyMultiplier: 300.0, gemMultiplier: 240.0, description: 'Breathes pure cosmic energy' },
    { id: 111, name: 'Dimension Hound', category: 'Pets', rarity: 'Uncommon', price: 0, gemPrice: 0, energyMultiplier: 310.0, gemMultiplier: 250.0, description: 'Tracks quarry across infinite realities' },
    { id: 112, name: 'Reality Spider', category: 'Pets', rarity: 'Rare', price: 0, gemPrice: 0, energyMultiplier: 520.0, gemMultiplier: 410.0, description: 'Weaves webs between dimensions' },
    { id: 113, name: 'Infinity Serpent', category: 'Pets', rarity: 'Rare', price: 0, gemPrice: 0, energyMultiplier: 540.0, gemMultiplier: 430.0, description: 'Coils around the concept of endlessness' },
    { id: 114, name: 'Quantum Leviathan', category: 'Pets', rarity: 'Rare', price: 0, gemPrice: 0, energyMultiplier: 560.0, gemMultiplier: 450.0, description: 'Swims through seas of probability' },
    { id: 115, name: 'Cosmic Titan', category: 'Pets', rarity: 'Epic', price: 0, gemPrice: 0, energyMultiplier: 950.0, gemMultiplier: 750.0, description: 'Holds up the pillars of existence' },
    { id: 116, name: 'Void Colossus', category: 'Pets', rarity: 'Epic', price: 0, gemPrice: 0, energyMultiplier: 980.0, gemMultiplier: 780.0, description: 'Strides through empty dimensions' },
    { id: 117, name: 'Reality Wyrm', category: 'Pets', rarity: 'Epic', price: 0, gemPrice: 0, energyMultiplier: 1020.0, gemMultiplier: 820.0, description: 'Devours inconsistencies in spacetime' },
    { id: 118, name: 'Omniversal Dragon', category: 'Pets', rarity: 'Legendary', price: 0, gemPrice: 0, energyMultiplier: 1800.0, gemMultiplier: 1400.0, description: 'Rules over all possible universes' },
    { id: 119, name: 'Infinity Beast', category: 'Pets', rarity: 'Legendary', price: 0, gemPrice: 0, energyMultiplier: 1850.0, gemMultiplier: 1450.0, description: 'Embodies the concept of boundlessness' },
    { id: 120, name: 'Absolute Entity', category: 'Pets', rarity: 'Legendary', price: 0, gemPrice: 0, energyMultiplier: 1900.0, gemMultiplier: 1500.0, description: 'The perfect being of pure existence' },
    { id: 121, name: 'Prime Consciousness', category: 'Pets', rarity: 'Mythic', price: 0, gemPrice: 0, energyMultiplier: 3300.0, gemMultiplier: 2600.0, description: 'The first and greatest awareness' },
    { id: 122, name: 'Universal Mind', category: 'Pets', rarity: 'Mythic', price: 0, gemPrice: 0, energyMultiplier: 3400.0, gemMultiplier: 2700.0, description: 'Thinks all possible thoughts simultaneously' },
    { id: 123, name: 'Cosmic Will', category: 'Pets', rarity: 'Mythic', price: 0, gemPrice: 0, energyMultiplier: 3500.0, gemMultiplier: 2800.0, description: 'The force that shapes all reality' },
    { id: 124, name: 'Origin Spirit', category: 'Pets', rarity: 'Secret', price: 0, gemPrice: 0, energyMultiplier: 6820.0, gemMultiplier: 5280.0, description: 'The first soul that sparked creation' },
    { id: 125, name: 'Infinite Guardian', category: 'Pets', rarity: 'Secret', price: 0, gemPrice: 0, energyMultiplier: 7040.0, gemMultiplier: 5500.0, description: 'Protects the endless expanse of possibility' },
    { id: 126, name: 'Absolute Creator', category: 'Pets', rarity: 'Secret', price: 0, gemPrice: 0, energyMultiplier: 7260.0, gemMultiplier: 5720.0, description: 'Brings new realities into existence with every breath' },
    
    // Transcendent Weapons (Ultimate++ tier) - 7 items
    { id: 127, name: 'Genesis Blade', category: 'Weapons', rarity: 'Common', price: 0, gemPrice: 0, energyMultiplier: 12000.0, gemMultiplier: 9500.0, description: 'Forged from the first moments of creation itself' },
    { id: 128, name: 'Primordial Hammer', category: 'Weapons', rarity: 'Uncommon', price: 0, gemPrice: 0, energyMultiplier: 22000.0, gemMultiplier: 17500.0, description: 'Shapes reality with each mighty blow' },
    { id: 129, name: 'Transcendent Spear', category: 'Weapons', rarity: 'Rare', price: 0, gemPrice: 0, energyMultiplier: 40000.0, gemMultiplier: 32000.0, description: 'Pierces through the barriers of existence itself' },
    { id: 130, name: 'Omnipotent Sword', category: 'Weapons', rarity: 'Epic', price: 0, gemPrice: 0, energyMultiplier: 75000.0, gemMultiplier: 60000.0, description: 'Cuts through the very concept of impossibility' },
    { id: 131, name: 'Meta-Scythe', category: 'Weapons', rarity: 'Legendary', price: 0, gemPrice: 0, energyMultiplier: 140000.0, gemMultiplier: 112000.0, description: 'Harvests concepts and ideas from pure thought' },
    { id: 132, name: 'Paradox Cleaver', category: 'Weapons', rarity: 'Mythic', price: 0, gemPrice: 0, energyMultiplier: 260000.0, gemMultiplier: 208000.0, description: 'A weapon that destroys by creating and creates by destroying' },
    { id: 133, name: 'Origin Destroyer', category: 'Weapons', rarity: 'Secret', price: 0, gemPrice: 0, energyMultiplier: 500000.0, gemMultiplier: 400000.0, description: 'Capable of unmaking the source code of reality' },
    
    // Transcendent Pets (Ultimate++ tier) - 21 items (3 per rarity)
    { id: 134, name: 'Primordial Phoenix', category: 'Pets', rarity: 'Common', price: 0, gemPrice: 0, energyMultiplier: 11000.0, gemMultiplier: 8800.0, description: 'Born from the first flame of consciousness' },
    { id: 135, name: 'Genesis Wolf', category: 'Pets', rarity: 'Common', price: 0, gemPrice: 0, energyMultiplier: 11500.0, gemMultiplier: 9200.0, description: 'Howls the songs of creation into being' },
    { id: 136, name: 'Origin Fox', category: 'Pets', rarity: 'Common', price: 0, gemPrice: 0, energyMultiplier: 12000.0, gemMultiplier: 9600.0, description: 'Dances at the beginning of all stories' },
    { id: 137, name: 'Transcendent Dragon', category: 'Pets', rarity: 'Uncommon', price: 0, gemPrice: 0, energyMultiplier: 20000.0, gemMultiplier: 16000.0, description: 'Breathes pure possibility into existence' },
    { id: 138, name: 'Meta Serpent', category: 'Pets', rarity: 'Uncommon', price: 0, gemPrice: 0, energyMultiplier: 21000.0, gemMultiplier: 16800.0, description: 'Coils around the concept of concepts' },
    { id: 139, name: 'Paradox Beast', category: 'Pets', rarity: 'Uncommon', price: 0, gemPrice: 0, energyMultiplier: 22000.0, gemMultiplier: 17600.0, description: 'Exists as both question and answer' },
    { id: 140, name: 'Omniscient Owl', category: 'Pets', rarity: 'Rare', price: 0, gemPrice: 0, energyMultiplier: 36000.0, gemMultiplier: 29000.0, description: 'Sees all possibilities across infinite timelines' },
    { id: 141, name: 'Eternal Tiger', category: 'Pets', rarity: 'Rare', price: 0, gemPrice: 0, energyMultiplier: 38000.0, gemMultiplier: 30500.0, description: 'Hunts through the jungles of pure thought' },
    { id: 142, name: 'Infinite Bear', category: 'Pets', rarity: 'Rare', price: 0, gemPrice: 0, energyMultiplier: 40000.0, gemMultiplier: 32000.0, description: 'Protects the endless wilderness of imagination' },
    { id: 143, name: 'Omnipotent Lion', category: 'Pets', rarity: 'Epic', price: 0, gemPrice: 0, energyMultiplier: 68000.0, gemMultiplier: 55000.0, description: 'Rules over the kingdom of all possibilities' },
    { id: 144, name: 'Meta Elephant', category: 'Pets', rarity: 'Epic', price: 0, gemPrice: 0, energyMultiplier: 72000.0, gemMultiplier: 58000.0, description: 'Never forgets any potential future' },
    { id: 145, name: 'Transcendent Eagle', category: 'Pets', rarity: 'Epic', price: 0, gemPrice: 0, energyMultiplier: 76000.0, gemMultiplier: 61000.0, description: 'Soars above the highest concepts' },
    { id: 146, name: 'Origin Whale', category: 'Pets', rarity: 'Legendary', price: 0, gemPrice: 0, energyMultiplier: 125000.0, gemMultiplier: 100000.0, description: 'Swims through oceans of pure consciousness' },
    { id: 147, name: 'Genesis Kraken', category: 'Pets', rarity: 'Legendary', price: 0, gemPrice: 0, energyMultiplier: 132000.0, gemMultiplier: 106000.0, description: 'Tentacles reach across dimensional barriers' },
    { id: 148, name: 'Primordial Leviathan', category: 'Pets', rarity: 'Legendary', price: 0, gemPrice: 0, energyMultiplier: 140000.0, gemMultiplier: 112000.0, description: 'Ancient guardian of the deepest mysteries' },
    { id: 149, name: 'Meta Consciousness', category: 'Pets', rarity: 'Mythic', price: 0, gemPrice: 0, energyMultiplier: 235000.0, gemMultiplier: 190000.0, description: 'Aware of its own awareness across all realities' },
    { id: 150, name: 'Omniversal Mind', category: 'Pets', rarity: 'Mythic', price: 0, gemPrice: 0, energyMultiplier: 250000.0, gemMultiplier: 202000.0, description: 'Thinks the thoughts that create universes' },
    { id: 151, name: 'Infinite Will', category: 'Pets', rarity: 'Mythic', price: 0, gemPrice: 0, energyMultiplier: 265000.0, gemMultiplier: 215000.0, description: 'The ultimate force of determination' },
    { id: 152, name: 'Prime Essence', category: 'Pets', rarity: 'Secret', price: 0, gemPrice: 0, energyMultiplier: 460000.0, gemMultiplier: 370000.0, description: 'The fundamental substance from which all existence is made' },
    { id: 153, name: 'Genesis Source', category: 'Pets', rarity: 'Secret', price: 0, gemPrice: 0, energyMultiplier: 485000.0, gemMultiplier: 390000.0, description: 'The wellspring from which all creation flows' },
    { id: 154, name: 'Origin Absolute', category: 'Pets', rarity: 'Secret', price: 0, gemPrice: 0, energyMultiplier: 510000.0, gemMultiplier: 410000.0, description: 'The perfect unity that contains all diversity' },
    
    // Transcendent Artifacts (Ultimate++ tier) - 14 items (2 per rarity)
    { id: 155, name: 'Genesis Orb', category: 'Artifacts', rarity: 'Common', price: 0, gemPrice: 0, energyMultiplier: 11500.0, gemMultiplier: 9200.0, description: 'Contains the blueprint of all creation' },
    { id: 156, name: 'Primordial Crystal', category: 'Artifacts', rarity: 'Common', price: 0, gemPrice: 0, energyMultiplier: 12000.0, gemMultiplier: 9600.0, description: 'Formed from crystallized pure thought' },
    { id: 157, name: 'Transcendence Stone', category: 'Artifacts', rarity: 'Uncommon', price: 0, gemPrice: 0, energyMultiplier: 20500.0, gemMultiplier: 16400.0, description: 'Allows ascension beyond all limitations' },
    { id: 158, name: 'Meta Gem', category: 'Artifacts', rarity: 'Uncommon', price: 0, gemPrice: 0, energyMultiplier: 21500.0, gemMultiplier: 17200.0, description: 'A gem that contains the concept of gems' },
    { id: 159, name: 'Origin Relic', category: 'Artifacts', rarity: 'Rare', price: 0, gemPrice: 0, energyMultiplier: 37000.0, gemMultiplier: 29600.0, description: 'An artifact from the beginning of everything' },
    { id: 160, name: 'Infinite Sigil', category: 'Artifacts', rarity: 'Rare', price: 0, gemPrice: 0, energyMultiplier: 39000.0, gemMultiplier: 31200.0, description: 'Carved with symbols of endless possibility' },
    { id: 161, name: 'Omnipotent Crown', category: 'Artifacts', rarity: 'Epic', price: 0, gemPrice: 0, energyMultiplier: 70000.0, gemMultiplier: 56000.0, description: 'Worn by the ruler of all realities' },
    { id: 162, name: 'Meta Scepter', category: 'Artifacts', rarity: 'Epic', price: 0, gemPrice: 0, energyMultiplier: 74000.0, gemMultiplier: 59200.0, description: 'Commands authority over existence itself' },
    { id: 163, name: 'Genesis Codex', category: 'Artifacts', rarity: 'Legendary', price: 0, gemPrice: 0, energyMultiplier: 128000.0, gemMultiplier: 102400.0, description: 'The book that writes reality as it\'s read' },
    { id: 164, name: 'Origin Archive', category: 'Artifacts', rarity: 'Legendary', price: 0, gemPrice: 0, energyMultiplier: 135000.0, gemMultiplier: 108000.0, description: 'Contains the complete history of all possibility' },
    { id: 165, name: 'Transcendent Core', category: 'Artifacts', rarity: 'Mythic', price: 0, gemPrice: 0, energyMultiplier: 248000.0, gemMultiplier: 198400.0, description: 'The central processing unit of pure transcendence' },
    { id: 166, name: 'Meta Engine', category: 'Artifacts', rarity: 'Mythic', price: 0, gemPrice: 0, energyMultiplier: 260000.0, gemMultiplier: 210000.0, description: 'Powers the machinery of infinite possibility' },
    { id: 167, name: 'Prime Matrix', category: 'Artifacts', rarity: 'Secret', price: 0, gemPrice: 0, energyMultiplier: 500000.0, gemMultiplier: 400000.0, description: 'The fundamental framework that underlies all existence' },
    { id: 168, name: 'Origin Nexus', category: 'Artifacts', rarity: 'Secret', price: 0, gemPrice: 0, energyMultiplier: 520000.0, gemMultiplier: 416000.0, description: 'The ultimate connection point between all things that are and could be' },
    
    // Transcendent Relics (Ultimate++ tier) - 7 items
    { id: 169, name: 'Genesis Fragment', category: 'Relics', rarity: 'Common', price: 0, gemPrice: 0, energyMultiplier: 11800.0, gemMultiplier: 9400.0, description: 'A piece of the original creation moment' },
    { id: 170, name: 'Primordial Essence', category: 'Relics', rarity: 'Uncommon', price: 0, gemPrice: 0, energyMultiplier: 21200.0, gemMultiplier: 16900.0, description: 'The fundamental substance before existence' },
    { id: 171, name: 'Origin Catalyst', category: 'Relics', rarity: 'Rare', price: 0, gemPrice: 0, energyMultiplier: 38500.0, gemMultiplier: 30800.0, description: 'Accelerates the birth of new realities' },
    { id: 172, name: 'Transcendence Engine', category: 'Relics', rarity: 'Epic', price: 0, gemPrice: 0, energyMultiplier: 72000.0, gemMultiplier: 57600.0, description: 'Powers the ascension beyond all limitations' },
    { id: 173, name: 'Meta-Reality Core', category: 'Relics', rarity: 'Legendary', price: 0, gemPrice: 0, energyMultiplier: 134000.0, gemMultiplier: 107200.0, description: 'Processes the logic of existence itself' },
    { id: 174, name: 'Omnipotence Nexus', category: 'Relics', rarity: 'Mythic', price: 0, gemPrice: 0, energyMultiplier: 240000.0, gemMultiplier: 195000.0, description: 'Where unlimited power meets infinite wisdom' },
    { id: 175, name: 'Origin Absolute', category: 'Relics', rarity: 'Secret', price: 0, gemPrice: 0, energyMultiplier: 470000.0, gemMultiplier: 376000.0, description: 'The perfect unity from which all diversity springs' },

    // World 5 - Absolute Tier Equipment (49 items)
    // Weapons (7 items)
    { id: 176, name: 'Infinity Blade', category: 'Weapons', rarity: 'Common', price: 1e15, gemPrice: 5e14, energyMultiplier: 750000.0, gemMultiplier: 600000.0, description: 'A sword that cuts through the fabric of reality itself' },
    { id: 177, name: 'Omnipotence Staff', category: 'Weapons', rarity: 'Common', price: 2.5e15, gemPrice: 1.25e15, energyMultiplier: 850000.0, gemMultiplier: 680000.0, description: 'Channel unlimited cosmic power through crystallized potential' },
    { id: 178, name: 'Void Hammer', category: 'Weapons', rarity: 'Uncommon', price: 5e15, gemPrice: 2.5e15, energyMultiplier: 950000.0, gemMultiplier: 760000.0, description: 'Forge new realities from the primordial nothingness' },
    { id: 179, name: 'Paradox Bow', category: 'Weapons', rarity: 'Uncommon', price: 1e16, gemPrice: 5e15, energyMultiplier: 1050000.0, gemMultiplier: 840000.0, description: 'Arrows that arrive before they are shot' },
    { id: 180, name: 'Meta-Scythe', category: 'Weapons', rarity: 'Rare', price: 2e16, gemPrice: 1e16, energyMultiplier: 1200000.0, gemMultiplier: 960000.0, description: 'Harvests concepts and abstract possibilities' },
    { id: 181, name: 'Transcendence Spear', category: 'Weapons', rarity: 'Epic', price: 4e16, gemPrice: 2e16, energyMultiplier: 1400000.0, gemMultiplier: 1120000.0, description: 'Pierce the boundaries between finite and infinite' },
    { id: 182, name: 'Absolute Zero Katana', category: 'Weapons', rarity: 'Legendary', price: 8e16, gemPrice: 4e16, energyMultiplier: 1750000.0, gemMultiplier: 1400000.0, description: 'The final sword that ends all conflicts across all realities' },
    { id: 228, name: 'Origin Destroyer', category: 'Weapons', rarity: 'Mythic', price: 1.2e17, gemPrice: 6e16, energyMultiplier: 2100000.0, gemMultiplier: 1680000.0, description: 'Unmakes the source code of reality itself' },
    { id: 229, name: 'Meta Annihilator', category: 'Weapons', rarity: 'Mythic', price: 1.5e17, gemPrice: 7.5e16, energyMultiplier: 2300000.0, gemMultiplier: 1840000.0, description: 'Erases concepts from existence permanently' },
    { id: 230, name: 'Absolute Edge', category: 'Weapons', rarity: 'Secret', price: 0, gemPrice: 0, energyMultiplier: 2800000.0, gemMultiplier: 2240000.0, description: 'The perfect blade that cuts through impossibility' },
    { id: 231, name: 'Omega Weapon', category: 'Weapons', rarity: 'Secret', price: 0, gemPrice: 0, energyMultiplier: 3200000.0, gemMultiplier: 2560000.0, description: 'The final weapon that ends all endings' },

    // Pets (21 items)
    { id: 183, name: 'Quantum Fairy', category: 'Pets', rarity: 'Common', price: 7.5e14, gemPrice: 3.75e14, energyMultiplier: 650000.0, gemMultiplier: 520000.0, description: 'Exists in all possible states simultaneously until observed' },
    { id: 184, name: 'Infinity Cat', category: 'Pets', rarity: 'Common', price: 1.5e15, gemPrice: 7.5e14, energyMultiplier: 700000.0, gemMultiplier: 560000.0, description: 'Has infinite lives, literally' },
    { id: 185, name: 'Paradox Phoenix', category: 'Pets', rarity: 'Common', price: 2.25e15, gemPrice: 1.125e15, energyMultiplier: 750000.0, gemMultiplier: 600000.0, description: 'Dies before it is born, lives after it dies' },
    { id: 186, name: 'Void Serpent', category: 'Pets', rarity: 'Common', price: 3e15, gemPrice: 1.5e15, energyMultiplier: 800000.0, gemMultiplier: 640000.0, description: 'Swims through nothingness like it were water' },
    { id: 187, name: 'Cosmic Owl', category: 'Pets', rarity: 'Common', price: 4.5e15, gemPrice: 2.25e15, energyMultiplier: 850000.0, gemMultiplier: 680000.0, description: 'Sees all possible futures with its infinite eyes' },
    { id: 188, name: 'Meta-Wolf', category: 'Pets', rarity: 'Common', price: 6e15, gemPrice: 3e15, energyMultiplier: 900000.0, gemMultiplier: 720000.0, description: 'Howls at concepts instead of moons' },
    { id: 189, name: 'Fractal Dragon', category: 'Pets', rarity: 'Common', price: 7.5e15, gemPrice: 3.75e15, energyMultiplier: 950000.0, gemMultiplier: 760000.0, description: 'Contains smaller versions of itself infinitely nested' },
    { id: 190, name: 'Probability Spider', category: 'Pets', rarity: 'Uncommon', price: 1e16, gemPrice: 5e15, energyMultiplier: 1000000.0, gemMultiplier: 800000.0, description: 'Webs that catch unlikely events and rare possibilities' },
    { id: 191, name: 'Logic Beetle', category: 'Pets', rarity: 'Uncommon', price: 1.25e16, gemPrice: 6.25e15, energyMultiplier: 1100000.0, gemMultiplier: 880000.0, description: 'Processes contradictions and paradoxes as food' },
    { id: 192, name: 'Dimensional Tiger', category: 'Pets', rarity: 'Uncommon', price: 1.5e16, gemPrice: 7.5e15, energyMultiplier: 1200000.0, gemMultiplier: 960000.0, description: 'Stalks prey across parallel universes' },
    { id: 193, name: 'Ethereal Whale', category: 'Pets', rarity: 'Uncommon', price: 2e16, gemPrice: 1e16, energyMultiplier: 1300000.0, gemMultiplier: 1040000.0, description: 'Swims through oceans of pure consciousness' },
    { id: 194, name: 'Temporal Bear', category: 'Pets', rarity: 'Uncommon', price: 2.5e16, gemPrice: 1.25e16, energyMultiplier: 1400000.0, gemMultiplier: 1120000.0, description: 'Hibernates in the spaces between seconds' },
    { id: 195, name: 'Chaos Butterfly', category: 'Pets', rarity: 'Rare', price: 3e16, gemPrice: 1.5e16, energyMultiplier: 1500000.0, gemMultiplier: 1200000.0, description: 'Its wing beats reshape entire galaxies' },
    { id: 196, name: 'Abstract Lion', category: 'Pets', rarity: 'Rare', price: 4e16, gemPrice: 2e16, energyMultiplier: 1650000.0, gemMultiplier: 1320000.0, description: 'The platonic ideal of courage and strength' },
    { id: 197, name: 'Omniscience Raven', category: 'Pets', rarity: 'Rare', price: 5e16, gemPrice: 2.5e16, energyMultiplier: 1800000.0, gemMultiplier: 1440000.0, description: 'Knows everything that has been and will be' },
    { id: 198, name: 'Infinity Hound', category: 'Pets', rarity: 'Epic', price: 6e16, gemPrice: 3e16, energyMultiplier: 2000000.0, gemMultiplier: 1600000.0, description: 'Loyal beyond the boundaries of space and time' },
    { id: 199, name: 'Transcendent Eagle', category: 'Pets', rarity: 'Epic', price: 7e16, gemPrice: 3.5e16, energyMultiplier: 2200000.0, gemMultiplier: 1760000.0, description: 'Soars above the concept of existence itself' },
    { id: 200, name: 'Paradox Unicorn', category: 'Pets', rarity: 'Epic', price: 8e16, gemPrice: 4e16, energyMultiplier: 2400000.0, gemMultiplier: 1920000.0, description: 'Mythical even among myths, real within unreality' },
    { id: 201, name: 'Absolute Leviathan', category: 'Pets', rarity: 'Legendary', price: 1e17, gemPrice: 5e16, energyMultiplier: 2750000.0, gemMultiplier: 2200000.0, description: 'The primordial entity from which all sea monsters descend' },
    { id: 202, name: 'Meta-Phoenix', category: 'Pets', rarity: 'Legendary', price: 1.2e17, gemPrice: 6e16, energyMultiplier: 3000000.0, gemMultiplier: 2400000.0, description: 'Reborn not from ashes, but from the concept of rebirth itself' },
    { id: 232, name: 'Omniversal Guardian', category: 'Pets', rarity: 'Mythic', price: 1.4e17, gemPrice: 7e16, energyMultiplier: 3250000.0, gemMultiplier: 2600000.0, description: 'Protects all possible realities simultaneously' },
    { id: 233, name: 'Infinity Companion', category: 'Pets', rarity: 'Mythic', price: 1.8e17, gemPrice: 9e16, energyMultiplier: 3750000.0, gemMultiplier: 3000000.0, description: 'Your eternal friend across all dimensions' },
    { id: 203, name: 'Origin Familiar', category: 'Pets', rarity: 'Secret', price: 0, gemPrice: 0, energyMultiplier: 4000000.0, gemMultiplier: 3200000.0, description: 'The first companion, from before the beginning' },
    { id: 234, name: 'Absolute Entity', category: 'Pets', rarity: 'Secret', price: 0, gemPrice: 0, energyMultiplier: 4200000.0, gemMultiplier: 3360000.0, description: 'The perfect being that transcends all categories' },
    { id: 235, name: 'Meta Existence', category: 'Pets', rarity: 'Secret', price: 0, gemPrice: 0, energyMultiplier: 4800000.0, gemMultiplier: 3840000.0, description: 'Exists beyond the concept of existence itself' },

    // Artifacts (14 items)
    { id: 204, name: 'Infinity Stone', category: 'Artifacts', rarity: 'Common', price: 1.25e15, gemPrice: 6.25e14, energyMultiplier: 1200000.0, gemMultiplier: 960000.0, description: 'Contains unlimited potential energy in crystalline form' },
    { id: 205, name: 'Void Crystal', category: 'Artifacts', rarity: 'Common', price: 2e15, gemPrice: 1e15, energyMultiplier: 1250000.0, gemMultiplier: 1000000.0, description: 'Crystallized nothingness that somehow exists' },
    { id: 206, name: 'Paradox Gem', category: 'Artifacts', rarity: 'Common', price: 3.5e15, gemPrice: 1.75e15, energyMultiplier: 1300000.0, gemMultiplier: 1040000.0, description: 'Simultaneously priceless and worthless' },
    { id: 207, name: 'Cosmic Orb', category: 'Artifacts', rarity: 'Uncommon', price: 6e15, gemPrice: 3e15, energyMultiplier: 1500000.0, gemMultiplier: 1200000.0, description: 'Contains a miniature universe within its depths' },
    { id: 208, name: 'Meta-Amulet', category: 'Artifacts', rarity: 'Uncommon', price: 1e16, gemPrice: 5e15, energyMultiplier: 1625000.0, gemMultiplier: 1300000.0, description: 'Protects against conceptual damage and abstract harm' },
    { id: 209, name: 'Reality Anchor', category: 'Artifacts', rarity: 'Uncommon', price: 1.5e16, gemPrice: 7.5e15, energyMultiplier: 1750000.0, gemMultiplier: 1400000.0, description: 'Keeps you grounded when reality becomes fluid' },
    { id: 210, name: 'Transcendence Ring', category: 'Artifacts', rarity: 'Rare', price: 2.5e16, gemPrice: 1.25e16, energyMultiplier: 1900000.0, gemMultiplier: 1520000.0, description: 'A circular symbol of infinite progression' },
    { id: 211, name: 'Omnipotence Crown', category: 'Artifacts', rarity: 'Rare', price: 3.5e16, gemPrice: 1.75e16, energyMultiplier: 2050000.0, gemMultiplier: 1640000.0, description: 'Royal authority over all possible domains' },
    { id: 212, name: 'Infinity Mirror', category: 'Artifacts', rarity: 'Rare', price: 4.5e16, gemPrice: 2.25e16, energyMultiplier: 2200000.0, gemMultiplier: 1760000.0, description: 'Reflects infinite versions of yourself across all realities' },
    { id: 213, name: 'Logic Prism', category: 'Artifacts', rarity: 'Epic', price: 5.5e16, gemPrice: 2.75e16, energyMultiplier: 2500000.0, gemMultiplier: 2000000.0, description: 'Refracts pure reason into its component principles' },
    { id: 214, name: 'Chaos Pendant', category: 'Artifacts', rarity: 'Epic', price: 7e16, gemPrice: 3.5e16, energyMultiplier: 2800000.0, gemMultiplier: 2240000.0, description: 'Embraces randomness as the source of all possibility' },
    { id: 215, name: 'Meta-Codex', category: 'Artifacts', rarity: 'Legendary', price: 9e16, gemPrice: 4.5e16, energyMultiplier: 3200000.0, gemMultiplier: 2560000.0, description: 'The book that contains all other books, including itself' },
    { id: 237, name: 'Meta-Infinity Core', category: 'Artifacts', rarity: 'Mythic', price: 1.5e17, gemPrice: 7.5e16, energyMultiplier: 4500000.0, gemMultiplier: 3600000.0, description: 'The processing unit that runs infinite realities simultaneously' },
    { id: 238, name: 'Omniversal Engine', category: 'Artifacts', rarity: 'Mythic', price: 2e17, gemPrice: 1e17, energyMultiplier: 5200000.0, gemMultiplier: 4160000.0, description: 'Powers the machinery of all possible universes' },
    { id: 216, name: 'Absolute Sphere', category: 'Artifacts', rarity: 'Legendary', price: 1.1e17, gemPrice: 5.5e16, energyMultiplier: 3600000.0, gemMultiplier: 2880000.0, description: 'Perfect geometry containing infinite dimensions' },
    { id: 217, name: 'Origin Matrix', category: 'Artifacts', rarity: 'Secret', price: 0, gemPrice: 0, energyMultiplier: 8500000.0, gemMultiplier: 6800000.0, description: 'The mathematical foundation upon which all reality is built' },

    // Relics (10 items - expanded to include all rarities)
    { id: 218, name: 'Cosmic Fragment', category: 'Relics', rarity: 'Common', price: 2.5e16, gemPrice: 1.25e16, energyMultiplier: 1000000.0, gemMultiplier: 800000.0, description: 'A piece of the original infinity' },
    { id: 219, name: 'Void Shard', category: 'Relics', rarity: 'Uncommon', price: 4e16, gemPrice: 2e16, energyMultiplier: 1250000.0, gemMultiplier: 1000000.0, description: 'Crystallized nothingness with infinite potential' },
    { id: 220, name: 'Reality Core', category: 'Relics', rarity: 'Rare', price: 6e16, gemPrice: 3e16, energyMultiplier: 1580000.0, gemMultiplier: 1264000.0, description: 'The processing unit of existence itself' },
    { id: 221, name: 'Infinite Genesis', category: 'Relics', rarity: 'Epic', price: 8e16, gemPrice: 4e16, energyMultiplier: 2080000.0, gemMultiplier: 1664000.0, description: 'The moment of creation, endlessly repeating' },
    { id: 222, name: 'Omniscience Archive', category: 'Relics', rarity: 'Epic', price: 1e17, gemPrice: 5e16, energyMultiplier: 2330000.0, gemMultiplier: 1864000.0, description: 'All knowledge that ever was or could be' },
    { id: 223, name: 'Paradox Engine Core', category: 'Relics', rarity: 'Legendary', price: 1.2e17, gemPrice: 6e16, energyMultiplier: 2665000.0, gemMultiplier: 2132000.0, description: 'The heart of impossible machinery' },
    { id: 236, name: 'Omnipotence Nexus', category: 'Relics', rarity: 'Mythic', price: 2e17, gemPrice: 1e17, energyMultiplier: 3500000.0, gemMultiplier: 2800000.0, description: 'Where unlimited power meets infinite wisdom' },
    { id: 224, name: 'Meta-Reality Seed', category: 'Relics', rarity: 'Legendary', price: 1.5e17, gemPrice: 7.5e16, energyMultiplier: 3000000.0, gemMultiplier: 2400000.0, description: 'Plant it to grow an entire universe' },
    { id: 225, name: 'Infinity Gate', category: 'Relics', rarity: 'Legendary', price: 1.8e17, gemPrice: 9e16, energyMultiplier: 3000000.0, gemMultiplier: 2400000.0, description: 'The gateway to unlimited possibilities' },
    { id: 226, name: 'Absolute Unity', category: 'Relics', rarity: 'Secret', price: 0, gemPrice: 0, energyMultiplier: 4000000.0, gemMultiplier: 3200000.0, description: 'The perfect harmony of all opposites' },
    { id: 227, name: 'Origin Singularity', category: 'Relics', rarity: 'Secret', price: 0, gemPrice: 0, energyMultiplier: 4800000.0, gemMultiplier: 3840000.0, description: 'The point from which all things emerge and to which all return' },
  ];
  
  const [availableUpgrades] = useState<Upgrade[]>([
    // Click Power Upgrades
    { id: 1, name: 'Enhanced Focus', description: 'Increase energy per click', cost: 2500000, costType: 'gems', effect: 'clickMultiplier', value: 0.5, maxLevel: 20000 },
    { id: 2, name: 'Power Training', description: 'Boost click effectiveness', cost: 2500000, costType: 'gems', effect: 'clickMultiplier', value: 1.0, maxLevel: 2500 },
    { id: 3, name: 'Mystical Awakening', description: 'Unlock hidden potential', cost: 10000000, costType: 'gems', effect: 'clickMultiplier', value: 2.0, maxLevel: 250 },
    
    // Gem Chance Upgrades  
    { id: 4, name: 'Lucky Charm', description: 'Increase gem drop chance', cost: 125000, costType: 'gems', effect: 'gemChance', value: 1.0, maxLevel: 2000 },
    { id: 5, name: 'Fortune Blessing', description: 'Better gem finding luck', cost: 5000000000, costType: 'gems', effect: 'gemChance', value: 2.0, maxLevel: 60 },
    { id: 6, name: 'Treasure Hunter', description: 'Master gem collector', cost: 2500000, costType: 'gems', effect: 'gemChance', value: 3.0, maxLevel: 25 },
    
    // Energy Multiplier Upgrades
    { id: 7, name: 'Energy Amplifier', description: 'Permanent energy boost', cost: 10000000000, costType: 'energy', effect: 'energyMultiplier', value: 0.1, maxLevel: 2500 },
    { id: 8, name: 'Power Core', description: 'Advanced energy systems', cost: 5000000000, costType: 'gems', effect: 'energyMultiplier', value: 0.25, maxLevel: 2000 },
    { id: 9, name: 'Cosmic Resonance', description: 'Harness universal energy', cost: 200000000, costType: 'gems', effect: 'energyMultiplier', value: 0.5, maxLevel: 250 },
    
    // Gem Multiplier Upgrades
    { id: 10, name: 'Gem Polisher', description: 'Enhance gem value', cost: 10000000, costType: 'gems', effect: 'gemMultiplier', value: 0.1, maxLevel: 20000 },
    { id: 11, name: 'Crystal Resonator', description: 'Amplify gem power', cost: 75000000, costType: 'gems', effect: 'gemMultiplier', value: 0.2, maxLevel: 2500 },
    { id: 12, name: 'Infinity Prism', description: 'Ultimate gem enhancement', cost: 5000000000, costType: 'gems', effect: 'gemMultiplier', value: 0.5, maxLevel: 25 },
    
    // Advanced Click Power Upgrades
    { id: 13, name: 'Ethereal Strike', description: 'Transcendent clicking power', cost: 5000000000, costType: 'gems', effect: 'clickMultiplier', value: 5.0, maxLevel: 25 },
    { id: 14, name: 'Divine Touch', description: 'Channel the power of gods', cost: 50000000000000, costType: 'energy', effect: 'clickMultiplier', value: 10.0, maxLevel: 15 },
    
    // Advanced Gem Chance Upgrades  
    { id: 15, name: 'Probability Manipulator', description: 'Bend luck to your will', cost: 10000000000, costType: 'gems', effect: 'gemChance', value: 5.0, maxLevel: 250 },
    { id: 16, name: 'Fortune Oracle', description: 'Foresee all lucky moments', cost: 250000000000, costType: 'gems', effect: 'gemChance', value: 10.0, maxLevel: 15 },
    
    // Advanced Energy Multiplier Upgrades
    { id: 17, name: 'Quantum Field', description: 'Harness quantum energy fluctuations', cost: 5000000000000000, costType: 'energy', effect: 'energyMultiplier', value: 1.0, maxLevel: 60 },
    { id: 18, name: 'Universal Core', description: 'Tap into the universe\'s core energy', cost: 1000000000000, costType: 'gems', effect: 'energyMultiplier', value: 2.0, maxLevel: 200 },
    
    // Advanced Gem Multiplier Upgrades  
    { id: 19, name: 'Reality Forge', description: 'Transform reality into gems', cost: 7500000000000, costType: 'gems', effect: 'gemMultiplier', value: 1.0, maxLevel: 60 },
    { id: 20, name: 'Omnipotent Catalyst', description: 'The ultimate gem amplification', cost: 100000000000000, costType: 'gems', effect: 'gemMultiplier', value: 2.5, maxLevel: 20 },
    
    // Transcendent Tier Upgrades (World 4)
    { id: 21, name: 'Genesis Touch', description: 'Click with the power of creation itself', cost: 1e21, costType: 'gems', effect: 'clickMultiplier', value: 25.0, maxLevel: 100 },
    { id: 22, name: 'Primordial Strike', description: 'Each click echoes through all realities', cost: 2.5e25, costType: 'energy', effect: 'clickMultiplier', value: 50.0, maxLevel: 50 },
    { id: 23, name: 'Meta-Probability', description: 'Control probability at the conceptual level', cost: 5e20, costType: 'gems', effect: 'gemChance', value: 25.0, maxLevel: 200 },
    { id: 24, name: 'Absolute Certainty', description: 'Make impossibility itself possible', cost: 1e22, costType: 'gems', effect: 'gemChance', value: 75.0, maxLevel: 25 },
    { id: 25, name: 'Transcendent Field', description: 'Energy drawn from pure transcendence', cost: 5e26, costType: 'energy', effect: 'energyMultiplier', value: 5.0, maxLevel: 75 },
    { id: 26, name: 'Origin Core', description: 'Tap into the source of all energy', cost: 7.5e20, costType: 'gems', effect: 'energyMultiplier', value: 10.0, maxLevel: 150 },
    { id: 27, name: 'Genesis Forge', description: 'Transform concepts into precious gems', cost: 1.25e21, costType: 'gems', effect: 'gemMultiplier', value: 5.0, maxLevel: 120 },
    { id: 28, name: 'Meta-Catalyst', description: 'Amplify the very idea of amplification', cost: 2.5e22, costType: 'gems', effect: 'gemMultiplier', value: 12.5, maxLevel: 40 },

    // World 5 - Absolute Upgrades
    { id: 29, name: 'Infinite Recursion', description: 'Click power that builds upon itself endlessly', cost: 1e26, costType: 'gems', effect: 'clickMultiplier', value: 25.0, maxLevel: 500 },
    { id: 30, name: 'Paradox Amplifier', description: 'Contradictory forces that somehow strengthen each other', cost: 2.5e26, costType: 'gems', effect: 'clickMultiplier', value: 50.0, maxLevel: 250 },
    { id: 31, name: 'Omnipotence Overflow', description: 'When unlimited power exceeds its own limits', cost: 5e26, costType: 'gems', effect: 'clickMultiplier', value: 100.0, maxLevel: 100 },
    { id: 32, name: 'Meta-Probability Engine', description: 'Reshape the fundamental nature of chance itself', cost: 1e27, costType: 'gems', effect: 'gemChance', value: 100.0, maxLevel: 300 },
    { id: 33, name: 'Absolute Certainty Field', description: 'Where probability becomes inevitable truth', cost: 2.5e27, costType: 'gems', effect: 'gemChance', value: 250.0, maxLevel: 150 },
    { id: 34, name: 'Origin Energy Tap', description: 'Draw power from the source before the beginning', cost: 1e30, costType: 'energy', effect: 'energyMultiplier', value: 50.0, maxLevel: 200 },
    { id: 35, name: 'Infinite Genesis Core', description: 'The eternal moment of creation made manifest', cost: 5e27, costType: 'gems', effect: 'energyMultiplier', value: 100.0, maxLevel: 175 },
    { id: 36, name: 'Transcendent Singularity', description: 'Where all opposites merge into pure potential', cost: 1e28, costType: 'gems', effect: 'gemMultiplier', value: 75.0, maxLevel: 125 },
  ]);

  const [inventory, setInventory] = useState<InventoryItem[]>([]);
  const clickTimeoutRef = useRef<number | null>(null);

  // Save game state
  const saveGame = () => {
    const gameState = {
      clickCount,
      gems,
      energy,
      currentArea,
      equipped,
      inventory,
      upgrades,
      username,
      lastSaved: Date.now()
    };
    localStorage.setItem(`animeClicker_${username}`, JSON.stringify(gameState));
    localStorage.setItem(`animeClicker_pass_${username}`, passwordInput);
  };

  // Migrate inventory items to use current stats from availableItems
  const migrateInventoryStats = (inventory: InventoryItem[], equipped: EquippedItems) => {
    const itemMap = new Map(availableItems.map(item => [item.id, item]));
    
    // Update inventory items
    const updatedInventory = inventory.map(invItem => {
      const currentItem = itemMap.get(invItem.id);
      if (currentItem) {
        return {
          ...invItem,
          energyMultiplier: currentItem.energyMultiplier,
          gemMultiplier: currentItem.gemMultiplier,
          price: currentItem.price,
          gemPrice: currentItem.gemPrice
        };
      }
      return invItem;
    });
    
    // Update equipped items
    const updatedEquipped = { ...equipped };
    
    if (equipped.weapon) {
      const currentWeapon = itemMap.get(equipped.weapon.id);
      if (currentWeapon) {
        updatedEquipped.weapon = {
          ...equipped.weapon,
          energyMultiplier: currentWeapon.energyMultiplier,
          gemMultiplier: currentWeapon.gemMultiplier
        };
      }
    }
    
    if (equipped.artifact) {
      const currentArtifact = itemMap.get(equipped.artifact.id);
      if (currentArtifact) {
        updatedEquipped.artifact = {
          ...equipped.artifact,
          energyMultiplier: currentArtifact.energyMultiplier,
          gemMultiplier: currentArtifact.gemMultiplier
        };
      }
    }
    
    if (equipped.relic) {
      const currentRelic = itemMap.get(equipped.relic.id);
      if (currentRelic) {
        updatedEquipped.relic = {
          ...equipped.relic,
          energyMultiplier: currentRelic.energyMultiplier,
          gemMultiplier: currentRelic.gemMultiplier
        };
      }
    }
    
    // Update pets
    updatedEquipped.pets = equipped.pets.map(pet => {
      if (pet) {
        const currentPet = itemMap.get(pet.id);
        if (currentPet) {
          return {
            ...pet,
            energyMultiplier: currentPet.energyMultiplier,
            gemMultiplier: currentPet.gemMultiplier
          };
        }
      }
      return pet;
    });
    
    return { updatedInventory, updatedEquipped };
  };

  // Load game state
  const loadGame = (playerName: string, password: string) => {
    const savedPassword = localStorage.getItem(`animeClicker_pass_${playerName}`);
    const saved = localStorage.getItem(`animeClicker_${playerName}`);
    
    if (saved && savedPassword) {
      if (savedPassword === password) {
        const gameState = JSON.parse(saved);
        
        // Load basic game state
        setClickCount(gameState.clickCount || 0);
        setGems(gameState.gems || 0);
        setEnergy(gameState.energy || 0);
        setCurrentArea(gameState.currentArea || 1);
        setUpgrades(gameState.upgrades || {});
        
        // Load and migrate inventory/equipped items to current stats
        const defaultEquipped = {
          weapon: null,
          artifact: null,
          relic: null,
          pets: [null, null, null]
        };
        
        const loadedInventory = gameState.inventory || [];
        const loadedEquipped = gameState.equipped || defaultEquipped;
        
        // Migrate stats to current values
        const { updatedInventory, updatedEquipped } = migrateInventoryStats(loadedInventory, loadedEquipped);
        
        setInventory(updatedInventory);
        setEquipped(updatedEquipped);
        setUsername(playerName);
        setIsLoggedIn(true);
        return true;
      } else {
        alert('Wrong password!');
        return false;
      }
    }
    return false;
  };

  // Registration function
  const handleRegister = () => {
    if (loginInput.trim().length >= 3 && passwordInput.trim().length >= 3) {
      const playerName = loginInput.trim();
      const password = passwordInput.trim();
      
      // Check if user already exists
      const existingUser = localStorage.getItem(`animeClicker_pass_${playerName}`);
      if (existingUser) {
        alert('Username already exists! Please choose a different username or switch to login.');
        return;
      }
      
      // Create new user
      localStorage.setItem(`animeClicker_pass_${playerName}`, password);
      setUsername(playerName);
      setIsLoggedIn(true);
      // Initialize fresh game state for new user
      setClickCount(0);
      setGems(0);
      setEnergy(0);
      setCurrentArea(1);
      setEquipped({
        weapon: null,
        artifact: null,
        relic: null,
        pets: [null, null, null]
      });
      setInventory([]);
      setUpgrades({});
      saveGame();
      showNotification('🎉 Welcome! Your account has been created successfully!');
    }
  };

  // Login function
  const handleLogin = () => {
    if (loginInput.trim().length >= 3 && passwordInput.trim().length >= 3) {
      const playerName = loginInput.trim();
      const password = passwordInput.trim();
      
      // Check if user exists
      const existingUser = localStorage.getItem(`animeClicker_pass_${playerName}`);
      if (!existingUser) {
        alert('Username not found! Please register first or check your username.');
        return;
      }
      
      if (loadGame(playerName, password)) {
        showNotification('🎮 Welcome back, ' + playerName + '!');
      }
    }
  };

  // Logout function
  const handleLogout = () => {
    if (username) {
      saveGame();
    }
    
    // Immediate logout - clear all state
    setIsLoggedIn(false);
    setUsername('');
    setLoginInput('');
    setPasswordInput('');
    // Clear any existing game state to ensure fresh login
    setClickCount(0);
    setGems(0);
    setEnergy(0);
    setCurrentArea(1);
    setEquipped({
      weapon: null,
      artifact: null,
      relic: null,
      pets: [null, null, null]
    });
    setInventory([]);
    setUpgrades({});
    
    // Show notification after state is cleared
    showNotification('💾 Progress Saved! Logged out successfully.');
  };

  // Weather System Functions
  const getWeatherRarityChance = () => {
    const rand = Math.random() * 100;
    if (rand < 0.5) return 'Mythic';
    if (rand < 2) return 'Legendary';
    if (rand < 5) return 'Epic';
    if (rand < 15) return 'Rare';
    if (rand < 40) return 'Uncommon';
    return 'Common';
  };

  const startRandomWeatherEvent = useCallback(() => {
    const targetRarity = getWeatherRarityChance();
    const possibleEvents = weatherEvents.filter(event => event.rarity === targetRarity);
    const selectedEvent = possibleEvents[Math.floor(Math.random() * possibleEvents.length)];
    
    const newWeatherEvent: WeatherEvent = {
      id: Math.random().toString(36).substr(2, 9),
      ...selectedEvent,
      duration: 30000 + Math.random() * 120000, // 30s - 2.5min
      startTime: Date.now()
    };

    setActiveWeatherEvents(prev => [...prev, newWeatherEvent]);
    showNotification(`🌤️ Weather Event: ${selectedEvent.emoji} ${selectedEvent.name}!`);
  }, [weatherEvents]);

  const generateWeatherForecast = useCallback(() => {
    const forecast: Omit<WeatherEvent, 'id' | 'startTime' | 'duration'>[] = [];
    
    for (let i = 0; i < 3; i++) {
      const targetRarity = getWeatherRarityChance();
      const possibleEvents = weatherEvents.filter(event => event.rarity === targetRarity);
      const selectedEvent = possibleEvents[Math.floor(Math.random() * possibleEvents.length)];
      forecast.push(selectedEvent);
    }
    
    setWeatherForecast(forecast);
  }, [weatherEvents]);

  const getWeatherAreaEffects = () => {
    let totalEnergyBonus = 1;
    let totalGemBonus = 1;
    const backgroundEffects: string[] = [];
    
    activeWeatherEvents.forEach(weather => {
      // Apply weather bonuses to area multipliers
      totalEnergyBonus *= weather.multiplierBonus;
      totalGemBonus *= weather.multiplierBonus;
      
      // Add visual effects based on weather type
      switch (weather.rarity) {
        case 'Mythic':
          backgroundEffects.push('drop-shadow(0 0 20px rgba(239, 68, 68, 0.8))');
          break;
        case 'Legendary':
          backgroundEffects.push('drop-shadow(0 0 15px rgba(245, 158, 11, 0.6))');
          break;
        case 'Epic':
          backgroundEffects.push('drop-shadow(0 0 10px rgba(139, 92, 246, 0.5))');
          break;
        case 'Rare':
          backgroundEffects.push('drop-shadow(0 0 8px rgba(59, 130, 246, 0.4))');
          break;
        default:
          backgroundEffects.push('drop-shadow(0 0 5px rgba(255, 255, 255, 0.2))');
      }
    });
    
    return {
      energyBonus: totalEnergyBonus,
      gemBonus: totalGemBonus,
      filter: backgroundEffects.length > 0 ? backgroundEffects.join(' ') : 'none'
    };
  };

  const getItemUniqueKey = (item: InventoryItem): string => {
    const mutations = item.mutations || [];
    const weatherIds = mutations.map(m => m.weatherId).sort().join(',');
    const goldPrefix = item.isGold ? 'gold:' : '';
    const rainbowPrefix = item.isRainbow ? 'rainbow:' : '';
    return `${item.id}:${goldPrefix}${rainbowPrefix}${weatherIds}`;
  };

  const mutateItem = (item: InventoryItem): InventoryItem => {
    const mutatedItem = { ...item };
    let totalMultiplier = 1;
    const mutations: WeatherMutation[] = [];

    // Check for weather mutations
    activeWeatherEvents.forEach(weather => {
      const mutationChance = Math.random() * 100;
      if (mutationChance <= weather.mutationChance) {
        const mutation: WeatherMutation = {
          weatherId: weather.id,
          weatherName: weather.name,
          multiplierBonus: weather.multiplierBonus,
          emoji: weather.emoji
        };
        mutations.push(mutation);
        totalMultiplier *= weather.multiplierBonus;
      }
    });

    // Check for gold mutation (1% chance)
    if (Math.random() < 0.01 && !mutatedItem.isGold && !mutatedItem.isRainbow) {
      mutatedItem.isGold = true;
      totalMultiplier *= 2;
    }

    // Check for rainbow mutation (0.1% chance, overrides gold)
    if (Math.random() < 0.001 && !mutatedItem.isRainbow) {
      mutatedItem.isRainbow = true;
      if (mutatedItem.isGold) {
        totalMultiplier /= 2; // Remove gold multiplier first
        mutatedItem.isGold = false;
      }
      totalMultiplier *= 5;
    }

    if (mutations.length > 0 || mutatedItem.isGold || mutatedItem.isRainbow) {
      mutatedItem.mutations = mutations;
      mutatedItem.energyMultiplier *= totalMultiplier;
      mutatedItem.gemMultiplier *= totalMultiplier;
      
      // Update name to show mutations (ensure we don't double-prefix)
      let baseName = mutatedItem.name;
      // Remove any existing prefixes to avoid duplication
      baseName = baseName.replace(/^(🌈|🥇|\s)*/, '').replace(/^[\u2600-\u26FF\u2700-\u27BF]+\s*/, '');
      
      let namePrefix = '';
      if (mutatedItem.isRainbow) namePrefix = '🌈 ';
      else if (mutatedItem.isGold) namePrefix = '🥇 ';
      
      const weatherEmojis = mutations.map(m => m.emoji).join('');
      mutatedItem.name = namePrefix + weatherEmojis + baseName;
    }

    return mutatedItem;
  };

  // Weather event management
  useEffect(() => {
    // Clean up expired weather events
    const interval = setInterval(() => {
      const now = Date.now();
      setActiveWeatherEvents(prev => prev.filter(event => 
        now - event.startTime < event.duration
      ));
    }, 1000);

    // Start random weather events
    const weatherInterval = setInterval(() => {
      // Chance for new weather event every 30 seconds
      if (Math.random() < 0.3) {
        startRandomWeatherEvent();
      }
    }, 30000);

    return () => {
      clearInterval(interval);
      clearInterval(weatherInterval);
    };
  }, [activeWeatherEvents.length]);

  // Weather forecast system
  useEffect(() => {
    // Generate initial forecast
    generateWeatherForecast();
    
    // Update forecast every 2 minutes
    const forecastInterval = setInterval(() => {
      generateWeatherForecast();
    }, 120000);
    
    return () => clearInterval(forecastInterval);
  }, []);

  // Auto-save every 10 seconds
  useEffect(() => {
    if (isLoggedIn && username) {
      const interval = setInterval(saveGame, 10000);
      return () => clearInterval(interval);
    }
  }, [isLoggedIn, username, clickCount, gems, energy, currentArea, equipped, inventory]); // eslint-disable-line react-hooks/exhaustive-deps

  const formatNumber = (num: number): string => {
    if (num >= 1e99) {
      return (num / 1e99).toFixed(1) + 'Tg';   // Trigintillion  
    } else if (num >= 1e96) {
      return (num / 1e96).toFixed(1) + 'NvVg'; // Novemvigintillion
    } else if (num >= 1e93) {
      return (num / 1e93).toFixed(1) + 'OcVg'; // Octovigintillion
    } else if (num >= 1e90) {
      return (num / 1e90).toFixed(1) + 'SpVg'; // Septenvigintillion
    } else if (num >= 1e87) {
      return (num / 1e87).toFixed(1) + 'SxVg'; // Sexvigintillion
    } else if (num >= 1e84) {
      return (num / 1e84).toFixed(1) + 'QnVg'; // Quinvigintillion
    } else if (num >= 1e81) {
      return (num / 1e81).toFixed(1) + 'QaVg'; // Quattuorvigintillion
    } else if (num >= 1e78) {
      return (num / 1e78).toFixed(1) + 'TrVg'; // Tresvigintillion
    } else if (num >= 1e75) {
      return (num / 1e75).toFixed(1) + 'DuVg'; // Duovigintillion
    } else if (num >= 1e72) {
      return (num / 1e72).toFixed(1) + 'UnVg'; // Unvigintillion
    } else if (num >= 1e69) {
      return (num / 1e69).toFixed(1) + 'Vg';   // Vigintillion
    } else if (num >= 1e66) {
      return (num / 1e66).toFixed(1) + 'Tvg';  // Tresvigintillion (old, keeping for compatibility)
    } else if (num >= 1e63) {
      return (num / 1e63).toFixed(1) + 'Dvg';  // Duovigintillion (old)
    } else if (num >= 1e60) {
      return (num / 1e60).toFixed(1) + 'Uvg';  // Unvigintillion (old)
    } else if (num >= 1e57) {
      return (num / 1e57).toFixed(1) + 'NvD';  // Novemdecillion  
    } else if (num >= 1e54) {
      return (num / 1e54).toFixed(1) + 'OcD';  // Octodecillion
    } else if (num >= 1e51) {
      return (num / 1e51).toFixed(1) + 'SpD';  // Septendecillion
    } else if (num >= 1e48) {
      return (num / 1e48).toFixed(1) + 'SxD';  // Sexdecillion
    } else if (num >= 1e45) {
      return (num / 1e45).toFixed(1) + 'QnD';  // Quindecillion
    } else if (num >= 1e42) {
      return (num / 1e42).toFixed(1) + 'QaD';  // Quattuordecillion
    } else if (num >= 1e39) {
      return (num / 1e39).toFixed(1) + 'TrD';  // Tredecillion
    } else if (num >= 1e36) {
      return (num / 1e36).toFixed(1) + 'DuD';  // Duodecillion
    } else if (num >= 1e33) {
      return (num / 1e33).toFixed(1) + 'UnD';  // Undecillion
    } else if (num >= 1e30) {
      return (num / 1e30).toFixed(1) + 'Dc';   // Decillion
    } else if (num >= 1e27) {
      return (num / 1e27).toFixed(1) + 'No';   // Nonillion
    } else if (num >= 1e24) {
      return (num / 1e24).toFixed(1) + 'Oc';   // Octillion
    } else if (num >= 1e21) {
      return (num / 1e21).toFixed(1) + 'Sp';   // Septillion
    } else if (num >= 1e18) {
      return (num / 1e18).toFixed(1) + 'Sx';   // Sextillion
    } else if (num >= 1e15) {
      return (num / 1e15).toFixed(1) + 'Q';    // Quadrillion
    } else if (num >= 1_000_000_000_000) {
      return (num / 1_000_000_000_000).toFixed(1) + 'T';  // Trillion
    } else if (num >= 1_000_000_000) {
      return (num / 1_000_000_000).toFixed(1) + 'B';      // Billion
    } else if (num >= 1_000_000) {
      return (num / 1_000_000).toFixed(1) + 'M';          // Million
    } else if (num >= 1_000) {
      return (num / 1_000).toFixed(1) + 'K';              // Thousand
    }
    return num.toString();
  };

  const getCurrentArea = () => {
    return areas.find(area => area.id === currentArea) || areas[0];
  };

  const getWorldInfo = (areaId: number) => {
    if (areaId <= 20) {
      return { world: 1, name: "First World", emoji: "🌍" };
    } else if (areaId <= 40) {
      return { world: 2, name: "Ethereal Realms", emoji: "🌌" };
    } else if (areaId <= 60) {
      return { world: 3, name: "Cosmic Dimension", emoji: "🌠" };
    } else if (areaId <= 80) {
      return { world: 4, name: "Transcendence Realm", emoji: "🌟" };
    } else {
      return { world: 5, name: "Infinite Ascension", emoji: "🌌" };
    }
  };

  const isWorldUnlocked = (worldNumber: number) => {
    const currentWorld = getWorldInfo(currentArea).world;
    return currentWorld >= worldNumber;
  };

  const getItemWorldInfo = (itemId: number) => {
    if (itemId <= 42) {
      return { world: 1, name: "First World", emoji: "🌍", color: "#4fc3f7" };
    } else if (itemId <= 84) {
      return { world: 2, name: "Ethereal Realms", emoji: "🌌", color: "#8B5CF6" };
    } else if (itemId <= 126) {
      return { world: 3, name: "Cosmic Dimension", emoji: "🌠", color: "#FF6B6B" };
    } else if (itemId <= 175) {
      return { world: 4, name: "Transcendence Realm", emoji: "🌟", color: "#8B4513" };
    } else {
      return { world: 5, name: "Infinite Ascension", emoji: "🌌", color: "#FFD700" };
    }
  };

  const showNotification = (message: string) => {
    setNotification(message);
    setTimeout(() => setNotification(null), 4000);
  };

  const checkAreaUnlocks = (newEnergy: number) => {
    const unlockedAreas = areas.filter(area => 
      newEnergy >= area.requiredEnergy && energy < area.requiredEnergy
    );
    
    unlockedAreas.forEach(area => {
      showNotification(`🎉 New Area Unlocked: ${area.name}!`);
    });
  };

  const calculateTotalMultipliers = () => {
    let energyMult = 1;
    let gemMult = 1;
    let clickMult = 1;
    let gemChanceBonus = 0;
    
    // Area multipliers
    const area = getCurrentArea();
    energyMult *= area.energyMultiplier;
    gemMult *= area.gemMultiplier;
    
    // Weather effects
    const weatherEffects = getWeatherAreaEffects();
    energyMult *= weatherEffects.energyBonus;
    gemMult *= weatherEffects.gemBonus;
    
    // Calculate multipliers from equipped items only
    if (equipped.weapon) {
      energyMult *= equipped.weapon.energyMultiplier;
      gemMult *= equipped.weapon.gemMultiplier;
    }
    if (equipped.artifact) {
      energyMult *= equipped.artifact.energyMultiplier;
      gemMult *= equipped.artifact.gemMultiplier;
    }
    if (equipped.relic) {
      energyMult *= equipped.relic.energyMultiplier;
      gemMult *= equipped.relic.gemMultiplier;
    }
    equipped.pets.forEach(pet => {
      if (pet) {
        energyMult *= pet.energyMultiplier;
        gemMult *= pet.gemMultiplier;
      }
    });
    
    // Apply upgrade bonuses
    availableUpgrades.forEach(upgrade => {
      const level = upgrades[upgrade.id] || 0;
      if (level > 0) {
        const bonus = upgrade.value * level;
        switch (upgrade.effect) {
          case 'clickMultiplier':
            clickMult += bonus;
            break;
          case 'gemChance':
            gemChanceBonus += bonus;
            break;
          case 'energyMultiplier':
            energyMult *= (1 + bonus);
            break;
          case 'gemMultiplier':
            gemMult *= (1 + bonus);
            break;
        }
      }
    });
    
    return { energyMult, gemMult, clickMult, gemChanceBonus };
  };

  const canProgressToArea = (areaId: number) => {
    const area = areas.find(a => a.id === areaId);
    return area && (energy >= area.requiredEnergy || areaId === currentArea);
  };

  const progressToArea = (areaId: number) => {
    const area = areas.find(a => a.id === areaId);
    if (area && (energy >= area.requiredEnergy || areaId === currentArea)) {
      // Check if entering Ethereal Realms (second world)
      if (areaId === 21 && currentArea < 21) {
        showNotification('🌌 Welcome to the Ethereal Realms! New equipment tiers unlocked!');
      }
      // Check if entering Cosmic Dimension (third world)
      if (areaId === 41 && currentArea < 41) {
        showNotification('🌠 Welcome to the Cosmic Dimension! Ultimate equipment tier unlocked!');
      }
      // Check if entering Transcendence Realm (fourth world)
      if (areaId === 61 && currentArea < 61) {
        showNotification('🌟 Welcome to the Transcendence Realm! Transcendent equipment tier unlocked!');
      }
      // Check if entering Infinite Ascension (fifth world)
      if (areaId === 81 && currentArea < 81) {
        showNotification('🌌 Welcome to Infinite Ascension! Absolute equipment tier unlocked!');
      }
      setCurrentArea(areaId);
    }
  };

  const equipItem = (item: InventoryItem) => {
    if (item.category === 'Pets') {
      const emptyPetSlot = equipped.pets.findIndex(pet => pet === null);
      if (emptyPetSlot !== -1) {
        setEquipped(prev => ({
          ...prev,
          pets: prev.pets.map((pet, index) => index === emptyPetSlot ? item : pet)
        }));
      }
    } else {
      // Convert plural category names to singular slot names
      const slotMap: Record<string, keyof Omit<EquippedItems, 'pets'>> = {
        'Weapons': 'weapon',
        'Artifacts': 'artifact',
        'Relics': 'relic'
      };
      const slot = slotMap[item.category];
      setEquipped(prev => ({
        ...prev,
        [slot]: item
      }));
    }
  };

  const unequipItem = (item: InventoryItem) => {
    const itemKey = getItemUniqueKey(item);
    if (item.category === 'Pets') {
      setEquipped(prev => ({
        ...prev,
        pets: prev.pets.map(pet => pet && getItemUniqueKey(pet) === itemKey ? null : pet)
      }));
    } else {
      // Convert plural category names to singular slot names
      const slotMap: Record<string, keyof Omit<EquippedItems, 'pets'>> = {
        'Weapons': 'weapon',
        'Artifacts': 'artifact',
        'Relics': 'relic'
      };
      const slot = slotMap[item.category];
      setEquipped(prev => ({
        ...prev,
        [slot]: null
      }));
    }
  };

  const deleteItem = (item: InventoryItem) => {
    const itemKey = getItemUniqueKey(item);
    
    // First unequip if equipped
    if (isEquipped(item)) {
      unequipItem(item);
    }
    
    // Remove from inventory
    setInventory(prev => prev.filter(invItem => getItemUniqueKey(invItem) !== itemKey));
    showNotification(`🗑️ Deleted ${item.name}`);
  };

  const shouldAutoDelete = (item: InventoryItem): boolean => {
    if (!autoDeleteSettings.enabled) return false;
    
    // Keep mutated items if setting is enabled
    if (autoDeleteSettings.keepMutated && (item.mutations?.length || item.isGold || item.isRainbow)) {
      return false;
    }
    
    // Check rarity-based deletion
    switch (item.rarity) {
      case 'Common':
        return autoDeleteSettings.deleteCommon;
      case 'Uncommon':
        return autoDeleteSettings.deleteUncommon;
      case 'Rare':
        return autoDeleteSettings.deleteRare;
      default:
        return false; // Never auto-delete Epic+ items
    }
  };

  const isEquipped = (item: InventoryItem): boolean => {
    const itemKey = getItemUniqueKey(item);
    if (item.category === 'Pets') {
      return equipped.pets.some(pet => pet && getItemUniqueKey(pet) === itemKey);
    } else {
      // Convert plural category names to singular slot names
      const slotMap: Record<string, keyof Omit<EquippedItems, 'pets'>> = {
        'Weapons': 'weapon',
        'Artifacts': 'artifact',
        'Relics': 'relic'
      };
      const slot = slotMap[item.category];
      return equipped[slot] ? getItemUniqueKey(equipped[slot]!) === itemKey : false;
    }
  };

  const getSortedInventory = (category: ItemCategory) => {
    const categoryItems = inventory.filter(item => item.category === category);
    
    if (sortBy === 'rarity') {
      const rarityOrder = ['Common', 'Uncommon', 'Rare', 'Epic', 'Legendary', 'Mythic', 'Secret'];
      return categoryItems.sort((a, b) => rarityOrder.indexOf(b.rarity) - rarityOrder.indexOf(a.rarity));
    } else {
      return categoryItems.sort((a, b) => b.energyMultiplier - a.energyMultiplier);
    }
  };

  const equipBest = () => {
    // Find best weapon
    const bestWeapon = inventory
      .filter(item => item.category === 'Weapons')
      .sort((a, b) => b.energyMultiplier - a.energyMultiplier)[0];
    
    // Find best artifact
    const bestArtifact = inventory
      .filter(item => item.category === 'Artifacts')
      .sort((a, b) => b.energyMultiplier - a.energyMultiplier)[0];
    
    // Find best relic
    const bestRelic = inventory
      .filter(item => item.category === 'Relics')
      .sort((a, b) => b.energyMultiplier - a.energyMultiplier)[0];
    
    // Find best 3 pets
    const bestPets = inventory
      .filter(item => item.category === 'Pets')
      .sort((a, b) => b.energyMultiplier - a.energyMultiplier)
      .slice(0, 3);

    setEquipped({
      weapon: bestWeapon || null,
      artifact: bestArtifact || null,
      relic: bestRelic || null,
      pets: [
        bestPets[0] || null,
        bestPets[1] || null,
        bestPets[2] || null
      ]
    });
  };

  const unequipAll = () => {
    setEquipped({
      weapon: null,
      artifact: null,
      relic: null,
      pets: [null, null, null]
    });
  };

  const getUpgradeCost = (upgrade: Upgrade, currentLevel: number) => {
    return Math.floor(upgrade.cost * Math.pow(1.15, currentLevel));
  };

  const purchaseUpgrade = (upgradeId: number) => {
    const upgrade = availableUpgrades.find(u => u.id === upgradeId);
    if (!upgrade) return;

    const currentLevel = upgrades[upgradeId] || 0;
    if (currentLevel >= upgrade.maxLevel) return;

    const cost = getUpgradeCost(upgrade, currentLevel);
    
    if (upgrade.costType === 'gems' && gems >= cost) {
      setGems(prev => prev - cost);
      setUpgrades(prev => ({ ...prev, [upgradeId]: currentLevel + 1 }));
      showNotification(`⬆️ Upgraded ${upgrade.name} to Level ${currentLevel + 1}!`);
    } else if (upgrade.costType === 'energy' && energy >= cost) {
      setEnergy(prev => prev - cost);
      setUpgrades(prev => ({ ...prev, [upgradeId]: currentLevel + 1 }));
      showNotification(`⬆️ Upgraded ${upgrade.name} to Level ${currentLevel + 1}!`);
    }
  };

  const handleClick = () => {
    const { energyMult, gemMult, clickMult, gemChanceBonus } = calculateTotalMultipliers();
    const energyGained = Math.floor(1 * energyMult * clickMult);
    
    // Base 5% chance + upgrade bonuses to get 1-3 gems on click
    const gemChancePercent = 5 + gemChanceBonus;
    const gemChance = Math.random() * 100;
    let gemsGained = 0;
    if (gemChance <= gemChancePercent) {
      gemsGained = Math.floor((1 + Math.random() * 3) * gemMult);
    }
    
    const newEnergy = energy + energyGained;
    checkAreaUnlocks(newEnergy);
    
    setClickCount(prevCount => prevCount + energyGained);
    setEnergy(prevEnergy => prevEnergy + energyGained);
    setGems(prevGems => prevGems + gemsGained);
    
    setIsClicked(true);
    
    if (clickTimeoutRef.current) {
      clearTimeout(clickTimeoutRef.current);
    }
    clickTimeoutRef.current = setTimeout(() => {
      setIsClicked(false);
    }, 150);
  };

  const rollRarity = (): Rarity => {
    const random = Math.random() * 100;
    let cumulative = 0;
    
    for (const [rarity, chance] of Object.entries(rarityChances)) {
      cumulative += chance;
      if (random <= cumulative) {
        return rarity as Rarity;
      }
    }
    
    return 'Common';
  };

  const purchaseEtherealGachaBox = (category: ItemCategory) => {
    const cost = etherealGachaBoxPrices[category];
    
    if (gems >= cost) {
      const rarity = rollRarity();
      // Only get Ethereal tier items (id 43-84, World 2 items)
      const availableItemsForCategory = availableItems.filter(item => 
        item.category === category && item.rarity === rarity && item.id >= 43 && item.id <= 84
      );
      
      if (availableItemsForCategory.length > 0) {
        const randomItem = availableItemsForCategory[
          Math.floor(Math.random() * availableItemsForCategory.length)
        ];
        
        // Always apply mutations first to get the final item
        const newItem = mutateItem({ ...randomItem, quantity: 1, level: 1 });
        const newItemKey = getItemUniqueKey(newItem);
        
        // Check if this exact mutated item already exists
        const existingItem = inventory.find(invItem => getItemUniqueKey(invItem) === newItemKey);
        
        if (existingItem) {
          setInventory(prev => prev.map(invItem => 
            getItemUniqueKey(invItem) === newItemKey
              ? { ...invItem, quantity: invItem.quantity + 1 }
              : invItem
          ));
          showNotification(`📦 Got Ethereal ${newItem.name} (${newItem.rarity}) +1!`);
        } else {
          // Check auto-delete before adding to inventory
          if (shouldAutoDelete(newItem)) {
            showNotification(`🗑️ Auto-deleted ${newItem.name} (${newItem.rarity})`);
          } else {
            setInventory(prev => [...prev, newItem]);
            showNotification(`✨ New Ethereal ${randomItem.rarity} ${newItem.name}!`);
          }
        }
        
        setGems(prev => prev - cost);
      } else {
        showNotification(`❌ No Ethereal ${rarity} ${category} available!`);
      }
    }
  };

  const purchaseCosmicGachaBox = (category: ItemCategory) => {
    const cost = cosmicGachaBoxPrices[category];
    
    if (gems >= cost) {
      const rarity = rollRarity();
      // Only get Cosmic tier items (id 85-126, World 3 items)
      const availableItemsForCategory = availableItems.filter(item => 
        item.category === category && item.rarity === rarity && item.id >= 85 && item.id <= 126
      );
      
      if (availableItemsForCategory.length > 0) {
        const randomItem = availableItemsForCategory[
          Math.floor(Math.random() * availableItemsForCategory.length)
        ];
        
        // Always apply mutations first to get the final item
        const newItem = mutateItem({ ...randomItem, quantity: 1, level: 1 });
        const newItemKey = getItemUniqueKey(newItem);
        
        // Check if this exact mutated item already exists
        const existingItem = inventory.find(invItem => getItemUniqueKey(invItem) === newItemKey);
        
        if (existingItem) {
          setInventory(prev => prev.map(invItem => 
            getItemUniqueKey(invItem) === newItemKey
              ? { ...invItem, quantity: invItem.quantity + 1 }
              : invItem
          ));
          showNotification(`📦 Got Cosmic ${newItem.name} (${newItem.rarity}) +1!`);
        } else {
          // Check auto-delete before adding to inventory
          if (shouldAutoDelete(newItem)) {
            showNotification(`🗑️ Auto-deleted ${newItem.name} (${newItem.rarity})`);
          } else {
            setInventory(prev => [...prev, newItem]);
            showNotification(`✨ New Cosmic ${randomItem.rarity} ${newItem.name}!`);
          }
        }
        
        setGems(prev => prev - cost);
      } else {
        showNotification(`❌ No Cosmic ${rarity} ${category} available!`);
      }
    }
  };

  const purchaseTranscendentGachaBox = (category: ItemCategory) => {
    const cost = transcendentGachaBoxPrices[category];
    
    if (gems >= cost) {
      const rarity = rollRarity();
      // Only get Transcendent tier items (id 127-175)
      const availableItemsForCategory = availableItems.filter(item => 
        item.category === category && item.rarity === rarity && item.id >= 127 && item.id <= 175
      );
      
      if (availableItemsForCategory.length > 0) {
        const randomItem = availableItemsForCategory[
          Math.floor(Math.random() * availableItemsForCategory.length)
        ];
        
        // Always apply mutations first to get the final item
        const newItem = mutateItem({ ...randomItem, quantity: 1, level: 1 });
        const newItemKey = getItemUniqueKey(newItem);
        
        // Check if this exact mutated item already exists
        const existingItem = inventory.find(invItem => getItemUniqueKey(invItem) === newItemKey);
        
        if (existingItem) {
          setInventory(prev => prev.map(invItem => 
            getItemUniqueKey(invItem) === newItemKey
              ? { ...invItem, quantity: invItem.quantity + 1 }
              : invItem
          ));
          showNotification(`📦 Got Transcendent ${newItem.name} (${newItem.rarity}) +1!`);
        } else {
          setInventory(prev => [...prev, newItem]);
          showNotification(`🌟 New Transcendent ${randomItem.rarity} ${newItem.name}!`);
          }
        }
        
        setGems(prev => prev - cost);
      } else {
        showNotification(`❌ No Transcendent ${rarity} ${category} available!`);
      }
    }
  };

  const purchaseAbsoluteGachaBox = (category: ItemCategory) => {
    const cost = absoluteGachaBoxPrices[category];
    
    if (gems >= cost) {
      const rarity = rollRarity();
      // Only get Absolute tier items (id 176 and above)
      const availableItemsForCategory = availableItems.filter(item => 
        item.category === category && item.rarity === rarity && item.id >= 176
      );
      
      if (availableItemsForCategory.length > 0) {
        const randomItem = availableItemsForCategory[
          Math.floor(Math.random() * availableItemsForCategory.length)
        ];
        
        // Always apply mutations first to get the final item
        const newItem = mutateItem({ ...randomItem, quantity: 1, level: 1 });
        const newItemKey = getItemUniqueKey(newItem);
        
        // Check if this exact mutated item already exists
        const existingItem = inventory.find(invItem => getItemUniqueKey(invItem) === newItemKey);
        
        if (existingItem) {
          setInventory(prev => prev.map(invItem => 
            getItemUniqueKey(invItem) === newItemKey
              ? { ...invItem, quantity: invItem.quantity + 1 }
              : invItem
          ));
          showNotification(`📦 Got Absolute ${newItem.name} (${newItem.rarity}) +1!`);
        } else {
          // Check auto-delete before adding to inventory
          if (shouldAutoDelete(newItem)) {
            showNotification(`🗑️ Auto-deleted ${newItem.name} (${newItem.rarity})`);
          } else {
            setInventory(prev => [...prev, newItem]);
            showNotification(`🌟 New Absolute ${randomItem.rarity} ${newItem.name}!`);
          }
        }
        
        setGems(prev => prev - cost);
      } else {
        showNotification(`❌ No Absolute ${rarity} ${category} available!`);
      }
    }
  };

  const purchaseGachaBox = (category: ItemCategory) => {
    const cost = gachaBoxPrices[category];
    
    if (gems >= cost) {
      const rarity = rollRarity();
      // Only get first world items (id < 43)
      const availableItemsForCategory = availableItems.filter(item => 
        item.category === category && item.rarity === rarity && item.id < 43
      );
      
      if (availableItemsForCategory.length > 0) {
        const randomItem = availableItemsForCategory[
          Math.floor(Math.random() * availableItemsForCategory.length)
        ];
        
        // Always apply mutations first to get the final item
        const newItem = mutateItem({ ...randomItem, quantity: 1, level: 1 });
        const newItemKey = getItemUniqueKey(newItem);
        
        // Check if this exact mutated item already exists
        const existingItem = inventory.find(invItem => getItemUniqueKey(invItem) === newItemKey);
        
        if (existingItem) {
          setInventory(prev => prev.map(invItem => 
            getItemUniqueKey(invItem) === newItemKey
              ? { ...invItem, quantity: invItem.quantity + 1 }
              : invItem
          ));
          showNotification(`📦 Got ${newItem.name} (${newItem.rarity}) +1!`);
        } else {
          // Check auto-delete before adding to inventory
          if (shouldAutoDelete(newItem)) {
            showNotification(`🗑️ Auto-deleted ${newItem.name} (${newItem.rarity})`);
          } else {
            setInventory(prev => [...prev, newItem]);
            showNotification(`✨ New ${randomItem.rarity} ${newItem.name}!`);
          }
        }
        
        setGems(prev => prev - cost);
      } else {
        showNotification(`❌ No ${rarity} ${category} available!`);
      }
    }
  };

  // Close dropdown when clicking outside
  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (dropdownRef.current && !dropdownRef.current.contains(event.target as Node)) {
        setAreaDropdownOpen(false);
      }
    };

    if (areaDropdownOpen) {
      document.addEventListener('mousedown', handleClickOutside);
    }

    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, [areaDropdownOpen]);

  useEffect(() => {
    return () => {
      if (clickTimeoutRef.current) {
        clearTimeout(clickTimeoutRef.current);
      }
    };
  }, []);

  const renderTabNavigation = () => (
    <div style={{
      display: 'flex',
      backgroundColor: 'rgba(26, 54, 93, 0.95)',
      borderRadius: '15px',
      marginBottom: '2rem',
      boxShadow: '0 8px 32px rgba(0, 0, 0, 0.3)',
      overflow: 'hidden',
      border: '2px solid #ff8c42'
    }}>
      {(['game', 'shop', 'inventory', 'upgrades'] as TabType[]).map(tab => (
        <button
          key={tab}
          onClick={() => setActiveTab(tab)}
          style={{
            flex: 1,
            padding: '1rem',
            border: 'none',
            backgroundColor: activeTab === tab ? '#ff8c42' : 'rgba(26, 54, 93, 0.95)',
            color: activeTab === tab ? '#1a365d' : '#e2e8f0',
            cursor: 'pointer',
            fontSize: '1rem',
            fontWeight: '700',
            textTransform: 'capitalize',
            transition: 'all 0.3s',
            borderRadius: activeTab === tab ? '0' : '0'
          }}
        >
          {tab}
        </button>
      ))}
    </div>
  );

  const renderGameTab = () => (
    <div 
      onClick={activeTab === 'game' ? handleClick : undefined}
      style={{
        textAlign: 'center',
        padding: '3rem',
        backgroundColor: 'rgba(26, 54, 93, 0.95)',
        borderRadius: '15px',
        boxShadow: '0 8px 32px rgba(0, 0, 0, 0.3)',
        border: '2px solid #ff8c42',
        cursor: activeTab === 'game' ? 'pointer' : 'default',
        width: '90%',
        maxWidth: '800px',
        flex: 1,
        display: 'flex',
        flexDirection: 'column',
        justifyContent: 'center'
      }}
    >
      <h1 style={{ color: '#ff8c42', marginBottom: '1rem', fontSize: '3rem' }}>
        Anime Clicker Game
      </h1>
      
      <div style={{ 
        color: '#e2e8f0', 
        marginBottom: '2rem', 
        textAlign: 'center',
        backgroundColor: 'rgba(255, 140, 66, 0.1)',
        padding: '1rem',
        borderRadius: '10px',
        border: '1px solid #ff8c42'
      }}>
        <h3 style={{ color: '#ff8c42', margin: '0 0 0.5rem 0' }}>{getCurrentArea().name}</h3>
        <p style={{ margin: '0', fontSize: '0.9rem' }}>{getCurrentArea().description}</p>
        <div style={{ marginTop: '0.5rem', fontSize: '0.8rem' }}>
          Energy Multiplier: {formatNumber(getCurrentArea().energyMultiplier)}x | Gem Multiplier: {formatNumber(getCurrentArea().gemMultiplier)}x
        </div>
      </div>
      
      <div style={{
        fontSize: '8rem',
        fontWeight: 'bold',
        color: clickCount > 0 ? '#4fc3f7' : '#e2e8f0',
        marginBottom: '3rem',
        transform: isClicked ? 'scale(1.1)' : 'scale(1)',
        transition: 'transform 0.15s',
        textShadow: '0 0 20px rgba(79, 195, 247, 0.5)'
      }}>
        {formatNumber(clickCount)}
      </div>
      
      <p style={{ fontSize: '1.5rem', color: '#e2e8f0', marginBottom: '2rem' }}>
        Click anywhere to gain energy and gems!
      </p>
      
      {/* Equipment Display */}
      <div style={{
        display: 'flex',
        flexDirection: 'column',
        alignItems: 'center',
        gap: '1.5rem',
        marginTop: '2rem',
        width: '100%'
      }}>
        {/* Top row - Weapon, Artifact, Relic */}
        <div style={{ display: 'flex', gap: '2rem' }}>
          <div style={{ textAlign: 'center' }}>
            <h4 style={{ color: '#ff8c42', marginBottom: '0.5rem', fontSize: '1rem' }}>Weapon</h4>
            <div style={{
              width: '120px',
              height: '80px',
              backgroundColor: equipped.weapon ? rarityColors[equipped.weapon.rarity] : 'rgba(45, 90, 135, 0.5)',
              borderRadius: '12px',
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'center',
              color: 'white',
              fontWeight: 'bold',
              border: '2px solid #4fc3f7',
              fontSize: '0.9rem',
              textAlign: 'center',
              padding: '0.5rem'
            }}>
              {equipped.weapon ? equipped.weapon.name : 'None'}
            </div>
          </div>
          
          <div style={{ textAlign: 'center' }}>
            <h4 style={{ color: '#ff8c42', marginBottom: '0.5rem', fontSize: '1rem' }}>Artifact</h4>
            <div style={{
              width: '120px',
              height: '80px',
              backgroundColor: equipped.artifact ? rarityColors[equipped.artifact.rarity] : 'rgba(45, 90, 135, 0.5)',
              borderRadius: '12px',
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'center',
              color: 'white',
              fontWeight: 'bold',
              border: '2px solid #4fc3f7',
              fontSize: '0.9rem',
              textAlign: 'center',
              padding: '0.5rem'
            }}>
              {equipped.artifact ? equipped.artifact.name : 'None'}
            </div>
          </div>
          
          <div style={{ textAlign: 'center' }}>
            <h4 style={{ color: '#ff8c42', marginBottom: '0.5rem', fontSize: '1rem' }}>Relic</h4>
            <div style={{
              width: '120px',
              height: '80px',
              backgroundColor: equipped.relic ? rarityColors[equipped.relic.rarity] : 'rgba(45, 90, 135, 0.5)',
              borderRadius: '12px',
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'center',
              color: 'white',
              fontWeight: 'bold',
              border: '2px solid #4fc3f7',
              fontSize: '0.9rem',
              textAlign: 'center',
              padding: '0.5rem'
            }}>
              {equipped.relic ? equipped.relic.name : 'None'}
            </div>
          </div>
        </div>

        {/* Bottom row - Pets (centered) */}
        <div style={{ textAlign: 'center' }}>
          <h4 style={{ color: '#ff8c42', marginBottom: '0.5rem', fontSize: '1rem' }}>Pets</h4>
          <div style={{ display: 'flex', gap: '1rem', justifyContent: 'center' }}>
            {equipped.pets.map((pet, index) => (
              <div key={index} style={{
                width: '120px',
                height: '80px',
                backgroundColor: pet ? rarityColors[pet.rarity] : 'rgba(45, 90, 135, 0.5)',
                borderRadius: '12px',
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'center',
                color: 'white',
                fontWeight: 'bold',
                fontSize: '0.8rem',
                border: '2px solid #4fc3f7',
                textAlign: 'center',
                padding: '0.5rem'
              }}>
                {pet ? pet.name : 'None'}
              </div>
            ))}
          </div>
        </div>
      </div>
    </div>
  );

  const renderShopTab = () => (
    <div style={{
      backgroundColor: 'rgba(26, 54, 93, 0.95)',
      borderRadius: '15px',
      boxShadow: '0 8px 32px rgba(0, 0, 0, 0.3)',
      border: '2px solid #ff8c42',
      padding: '2rem',
      width: '100%',
      maxWidth: '1000px',
      height: '85vh',
      overflowY: 'auto'
    }}>
      <h2 style={{ color: '#ff8c42', marginBottom: '1rem', textAlign: 'center' }}>Gacha Shop</h2>
      <p style={{ color: '#e2e8f0', marginBottom: '2rem', textAlign: 'center', fontSize: '1rem' }}>
        Purchase gacha boxes to get random items with different rarities!
      </p>
      
      <div style={{
        display: 'flex',
        justifyContent: 'center',
        marginBottom: '2rem',
        fontSize: '0.9rem',
        gap: '2rem',
        flexWrap: 'wrap',
        color: '#e2e8f0'
      }}>
        <div><strong>Common:</strong> 45%</div>
        <div><strong>Uncommon:</strong> 25%</div>
        <div><strong>Rare:</strong> 17%</div>
        <div><strong>Epic:</strong> 9%</div>
        <div><strong>Legendary:</strong> 3%</div>
        <div><strong>Mythic:</strong> 0.9%</div>
        <div style={{ color: '#4fc3f7' }}><strong>Secret:</strong> 0.1%</div>
      </div>
      
      {/* Regular Gacha Boxes */}
      <h3 style={{ color: '#4fc3f7', marginBottom: '1.5rem', textAlign: 'center', fontSize: '1.5rem' }}>🌍 First World Equipment</h3>
      <div style={{
        display: 'grid',
        gridTemplateColumns: 'repeat(auto-fill, minmax(280px, 1fr))',
        gap: '1.5rem',
        marginBottom: '3rem'
      }}>
        {(['Weapons', 'Pets', 'Relics', 'Artifacts'] as ItemCategory[]).map(category => (
          <div key={category} style={{
            border: '2px solid #4fc3f7',
            borderRadius: '12px',
            padding: '2rem',
            backgroundColor: 'rgba(45, 90, 135, 0.7)',
            textAlign: 'center'
          }}>
            <h3 style={{
              color: '#ff8c42',
              marginBottom: '1rem',
              fontSize: '1.2rem'
            }}>
              {category} Box
            </h3>
            
            <div style={{
              fontSize: '2.5rem',
              marginBottom: '1rem'
            }}>
              {category === 'Relics' && '🏺'}
              {category === 'Artifacts' && '💍'}
              {category === 'Weapons' && '⚔️'}
              {category === 'Pets' && '🐾'}
            </div>
            
            <p style={{ 
              color: '#e2e8f0', 
              marginBottom: '1rem', 
              fontSize: '0.85rem',
              lineHeight: '1.3'
            }}>
              Basic tier {category.toLowerCase()} from the first world
            </p>
            
            <div style={{
              backgroundColor: '#4fc3f7',
              color: '#1a365d',
              padding: '0.4rem 0.8rem',
              borderRadius: '15px',
              fontSize: '1rem',
              fontWeight: 'bold',
              marginBottom: '1rem',
              display: 'inline-block'
            }}>
              💎 {formatNumber(gachaBoxPrices[category])} Gems
            </div>
            
            <button
              onClick={() => purchaseGachaBox(category)}
              disabled={gems < gachaBoxPrices[category]}
              style={{
                width: '100%',
                padding: '0.8rem',
                border: 'none',
                borderRadius: '8px',
                backgroundColor: gems >= gachaBoxPrices[category] ? '#ff8c42' : 'rgba(189, 195, 199, 0.5)',
                color: gems >= gachaBoxPrices[category] ? '#1a365d' : '#94a3b8',
                cursor: gems >= gachaBoxPrices[category] ? 'pointer' : 'not-allowed',
                fontSize: '0.9rem',
                fontWeight: '700',
                transition: 'background-color 0.3s'
              }}
            >
              {gems >= gachaBoxPrices[category] ? `Open Box` : 'Not Enough Gems'}
            </button>
          </div>
        ))}
      </div>

      {/* Ethereal Gacha Boxes - World 2 Unlock Required */}
      {isWorldUnlocked(2) && (
        <>
          <h3 style={{ color: '#8B5CF6', marginBottom: '1.5rem', textAlign: 'center', fontSize: '1.5rem' }}>🌌 Ethereal Realm Equipment</h3>
      <div style={{
        display: 'grid',
        gridTemplateColumns: 'repeat(auto-fill, minmax(280px, 1fr))',
        gap: '1.5rem'
      }}>
        {(['Weapons', 'Pets', 'Relics', 'Artifacts'] as ItemCategory[]).map(category => (
          <div key={`ethereal-${category}`} style={{
            border: '2px solid #8B5CF6',
            borderRadius: '12px',
            padding: '2rem',
            backgroundColor: 'rgba(139, 92, 246, 0.2)',
            textAlign: 'center',
            boxShadow: '0 0 20px rgba(139, 92, 246, 0.3)'
          }}>
            <h3 style={{
              color: '#A855F7',
              marginBottom: '1rem',
              fontSize: '1.2rem'
            }}>
              Ethereal {category} Box
            </h3>
            
            <div style={{
              fontSize: '2.5rem',
              marginBottom: '1rem',
              filter: 'drop-shadow(0 0 10px rgba(139, 92, 246, 0.7))'
            }}>
              {category === 'Relics' && '🏺'}
              {category === 'Artifacts' && '💍'}
              {category === 'Weapons' && '⚔️'}
              {category === 'Pets' && '🐾'}
            </div>
            
            <p style={{ 
              color: '#DDD6FE', 
              marginBottom: '1rem', 
              fontSize: '0.85rem',
              lineHeight: '1.3'
            }}>
              Powerful tier {category.toLowerCase()} from the Ethereal Realms
            </p>
            
            <div style={{
              backgroundColor: '#8B5CF6',
              color: '#1a365d',
              padding: '0.4rem 0.8rem',
              borderRadius: '15px',
              fontSize: '1rem',
              fontWeight: 'bold',
              marginBottom: '1rem',
              display: 'inline-block',
              boxShadow: '0 0 10px rgba(139, 92, 246, 0.5)'
            }}>
              💎 {formatNumber(etherealGachaBoxPrices[category])} Gems
            </div>
            
            <button
              onClick={() => purchaseEtherealGachaBox(category)}
              disabled={gems < etherealGachaBoxPrices[category]}
              style={{
                width: '100%',
                padding: '0.8rem',
                border: 'none',
                borderRadius: '8px',
                backgroundColor: gems >= etherealGachaBoxPrices[category] ? '#A855F7' : 'rgba(139, 92, 246, 0.3)',
                color: gems >= etherealGachaBoxPrices[category] ? '#1a365d' : '#94a3b8',
                cursor: gems >= etherealGachaBoxPrices[category] ? 'pointer' : 'not-allowed',
                fontSize: '0.9rem',
                fontWeight: '700',
                transition: 'background-color 0.3s',
                boxShadow: gems >= etherealGachaBoxPrices[category] ? '0 0 10px rgba(168, 85, 247, 0.5)' : 'none'
              }}
            >
              {gems >= etherealGachaBoxPrices[category] ? `Open Ethereal Box` : 'Not Enough Gems'}
            </button>
          </div>
        ))}
      </div>
      </>
      )}

      {/* Cosmic Gacha Boxes - World 3 Unlock Required */}
      {isWorldUnlocked(3) && (
        <>
          <h3 style={{ color: '#FF6B6B', marginBottom: '1.5rem', textAlign: 'center', fontSize: '1.5rem', marginTop: '3rem' }}>🌠 Cosmic Dimension Equipment</h3>
      <div style={{
        display: 'grid',
        gridTemplateColumns: 'repeat(auto-fill, minmax(280px, 1fr))',
        gap: '1.5rem'
      }}>
        {(['Weapons', 'Pets', 'Relics', 'Artifacts'] as ItemCategory[]).map(category => (
          <div key={`cosmic-${category}`} style={{
            border: '2px solid #FF6B6B',
            borderRadius: '12px',
            padding: '2rem',
            backgroundColor: 'rgba(255, 107, 107, 0.2)',
            textAlign: 'center',
            boxShadow: '0 0 20px rgba(255, 107, 107, 0.3)'
          }}>
            <h3 style={{
              color: '#FF8E53',
              marginBottom: '1rem',
              fontSize: '1.2rem'
            }}>
              Cosmic {category} Box
            </h3>
            
            <div style={{
              fontSize: '2.5rem',
              marginBottom: '1rem',
              filter: 'drop-shadow(0 0 10px rgba(255, 107, 107, 0.7))'
            }}>
              {category === 'Relics' && '🏺'}
              {category === 'Artifacts' && '💍'}
              {category === 'Weapons' && '⚔️'}
              {category === 'Pets' && '🐾'}
            </div>
            
            <p style={{ 
              color: '#FFE4E1', 
              marginBottom: '1rem', 
              fontSize: '0.85rem',
              lineHeight: '1.3'
            }}>
              Ultimate tier {category.toLowerCase()} from the Cosmic Dimension
            </p>
            
            <div style={{
              backgroundColor: '#FF6B6B',
              color: '#1a365d',
              padding: '0.4rem 0.8rem',
              borderRadius: '15px',
              fontSize: '1rem',
              fontWeight: 'bold',
              marginBottom: '1rem',
              display: 'inline-block',
              boxShadow: '0 0 10px rgba(255, 107, 107, 0.5)'
            }}>
              💎 {formatNumber(cosmicGachaBoxPrices[category])} Gems
            </div>
            
            <button
              onClick={() => purchaseCosmicGachaBox(category)}
              disabled={gems < cosmicGachaBoxPrices[category]}
              style={{
                width: '100%',
                padding: '0.8rem',
                border: 'none',
                borderRadius: '8px',
                backgroundColor: gems >= cosmicGachaBoxPrices[category] ? '#FF8E53' : 'rgba(255, 107, 107, 0.3)',
                color: gems >= cosmicGachaBoxPrices[category] ? 'white' : '#94a3b8',
                cursor: gems >= cosmicGachaBoxPrices[category] ? 'pointer' : 'not-allowed',
                fontSize: '0.9rem',
                fontWeight: '700',
                transition: 'background-color 0.3s',
                boxShadow: gems >= cosmicGachaBoxPrices[category] ? '0 0 10px rgba(255, 142, 83, 0.5)' : 'none'
              }}
            >
              {gems >= cosmicGachaBoxPrices[category] ? `Open Cosmic Box` : 'Not Enough Gems'}
            </button>
          </div>
        ))}
      </div>
      </>
      )}

      {/* Transcendent Gacha Boxes - World 4 Unlock Required */}
      {isWorldUnlocked(4) && (
        <>
          <h3 style={{ color: '#8B4513', marginBottom: '1.5rem', textAlign: 'center', fontSize: '1.5rem', marginTop: '3rem' }}>🌟 Transcendence Realm Equipment</h3>
      <div style={{
        display: 'grid',
        gridTemplateColumns: 'repeat(auto-fill, minmax(280px, 1fr))',
        gap: '1.5rem',
        marginBottom: '3rem'
      }}>
        {(['Weapons', 'Pets', 'Relics', 'Artifacts'] as ItemCategory[]).map(category => (
          <div key={`transcendent-${category}`} style={{
            border: '2px solid #8B4513',
            borderRadius: '12px',
            padding: '2rem',
            backgroundColor: 'rgba(139, 69, 19, 0.2)',
            textAlign: 'center',
            boxShadow: '0 0 20px rgba(139, 69, 19, 0.3)'
          }}>
            <h3 style={{
              color: '#CD853F',
              marginBottom: '1rem',
              fontSize: '1.2rem'
            }}>
              Transcendent {category} Box
            </h3>
            
            <div style={{
              fontSize: '2.5rem',
              marginBottom: '1rem',
              filter: 'drop-shadow(0 0 10px rgba(139, 69, 19, 0.7))'
            }}>
              {category === 'Relics' && '🏺'}
              {category === 'Artifacts' && '💫'}
              {category === 'Weapons' && '⚔️'}
              {category === 'Pets' && '🦋'}
            </div>
            
            <p style={{ 
              color: '#F5DEB3', 
              marginBottom: '1rem', 
              fontSize: '0.85rem',
              lineHeight: '1.3'
            }}>
              Ultimate tier {category.toLowerCase()} from the Transcendence Realm
            </p>
            
            <div style={{
              backgroundColor: '#8B4513',
              color: '#1a365d',
              padding: '0.4rem 0.8rem',
              borderRadius: '15px',
              fontSize: '1rem',
              fontWeight: 'bold',
              marginBottom: '1rem',
              display: 'inline-block',
              boxShadow: '0 0 10px rgba(139, 69, 19, 0.5)'
            }}>
              💎 {formatNumber(transcendentGachaBoxPrices[category])} Gems
            </div>
            
            <button
              onClick={() => purchaseTranscendentGachaBox(category)}
              disabled={gems < transcendentGachaBoxPrices[category]}
              style={{
                width: '100%',
                padding: '0.8rem',
                border: 'none',
                borderRadius: '8px',
                backgroundColor: gems >= transcendentGachaBoxPrices[category] ? '#A0522D' : 'rgba(139, 69, 19, 0.3)',
                color: gems >= transcendentGachaBoxPrices[category] ? 'white' : '#94a3b8',
                cursor: gems >= transcendentGachaBoxPrices[category] ? 'pointer' : 'not-allowed',
                fontSize: '0.9rem',
                fontWeight: '700',
                transition: 'background-color 0.3s',
                boxShadow: gems >= transcendentGachaBoxPrices[category] ? '0 0 10px rgba(160, 82, 45, 0.5)' : 'none'
              }}
            >
              {gems >= transcendentGachaBoxPrices[category] ? `Open Transcendent Box` : 'Not Enough Gems'}
            </button>
          </div>
        ))}
      </div>
      </>
      )}

      {/* Absolute Gacha Boxes - World 5 Unlock Required */}
      {isWorldUnlocked(5) && (
        <>
          <h3 style={{ color: '#FFD700', marginBottom: '1.5rem', textAlign: 'center', fontSize: '1.5rem', marginTop: '3rem' }}>🌌 Infinite Ascension Equipment</h3>
      <div style={{
        display: 'grid',
        gridTemplateColumns: 'repeat(auto-fill, minmax(280px, 1fr))',
        gap: '1.5rem',
        marginBottom: '3rem'
      }}>
        {(['Weapons', 'Pets', 'Relics', 'Artifacts'] as ItemCategory[]).map(category => (
          <div key={`absolute-${category}`} style={{
            border: '2px solid #FFD700',
            borderRadius: '12px',
            padding: '2rem',
            backgroundColor: 'rgba(255, 215, 0, 0.2)',
            textAlign: 'center',
            boxShadow: '0 0 20px rgba(255, 215, 0, 0.3)'
          }}>
            <h3 style={{
              color: '#FFF8DC',
              marginBottom: '1rem',
              fontSize: '1.2rem'
            }}>
              Absolute {category} Box
            </h3>
            
            <div style={{
              fontSize: '2.5rem',
              marginBottom: '1rem',
              filter: 'drop-shadow(0 0 10px rgba(255, 215, 0, 0.7))'
            }}>
              {category === 'Relics' && '🔮'}
              {category === 'Artifacts' && '✨'}
              {category === 'Weapons' && '⚡'}
              {category === 'Pets' && '🦄'}
            </div>
            
            <p style={{ 
              color: '#FFFF99', 
              marginBottom: '1rem', 
              fontSize: '0.85rem',
              lineHeight: '1.3'
            }}>
              Absolute tier {category.toLowerCase()} from Infinite Ascension
            </p>
            
            <div style={{
              backgroundColor: '#DAA520',
              color: '#1a365d',
              padding: '0.4rem 0.8rem',
              borderRadius: '15px',
              fontSize: '1rem',
              fontWeight: 'bold',
              marginBottom: '1rem',
              display: 'inline-block',
              boxShadow: '0 0 10px rgba(218, 165, 32, 0.5)'
            }}>
              💎 {formatNumber(absoluteGachaBoxPrices[category])} Gems
            </div>
            
            <button
              onClick={() => purchaseAbsoluteGachaBox(category)}
              disabled={gems < absoluteGachaBoxPrices[category]}
              style={{
                width: '100%',
                padding: '0.8rem',
                border: 'none',
                borderRadius: '8px',
                backgroundColor: gems >= absoluteGachaBoxPrices[category] ? '#DAA520' : 'rgba(218, 165, 32, 0.3)',
                color: gems >= absoluteGachaBoxPrices[category] ? 'white' : '#94a3b8',
                cursor: gems >= absoluteGachaBoxPrices[category] ? 'pointer' : 'not-allowed',
                fontSize: '0.9rem',
                fontWeight: '700',
                transition: 'background-color 0.3s',
                boxShadow: gems >= absoluteGachaBoxPrices[category] ? '0 0 10px rgba(218, 165, 32, 0.5)' : 'none'
              }}
            >
              {gems >= absoluteGachaBoxPrices[category] ? `Open Absolute Box` : 'Not Enough Gems'}
            </button>
          </div>
        ))}
      </div>
      </>
      )}
    </div>
  );

  const renderInventoryTab = () => (
    <div style={{
      backgroundColor: 'rgba(26, 54, 93, 0.95)',
      borderRadius: '15px',
      boxShadow: '0 8px 32px rgba(0, 0, 0, 0.3)',
      border: '2px solid #ff8c42',
      padding: '2rem',
      width: '95%',
      maxWidth: '1200px',
      height: '80vh',
      display: 'flex',
      flexDirection: 'column'
    }}>
      <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '2rem' }}>
        <h2 style={{ color: '#ff8c42', margin: 0 }}>Inventory</h2>
        
        <div style={{ display: 'flex', gap: '1rem', alignItems: 'center' }}>
          {/* Auto Delete Settings */}
          <div style={{ 
            backgroundColor: 'rgba(239, 68, 68, 0.1)', 
            border: '1px solid #ef4444', 
            borderRadius: '8px', 
            padding: '0.5rem 1rem',
            display: 'flex',
            alignItems: 'center',
            gap: '0.5rem'
          }}>
            <input
              type="checkbox"
              checked={autoDeleteSettings.enabled}
              onChange={(e) => setAutoDeleteSettings(prev => ({ ...prev, enabled: e.target.checked }))}
              style={{ margin: 0 }}
            />
            <span style={{ color: '#ef4444', fontSize: '0.8rem', fontWeight: '600' }}>Auto Delete</span>
            {autoDeleteSettings.enabled && (
              <select
                value={`${autoDeleteSettings.deleteCommon}-${autoDeleteSettings.deleteUncommon}-${autoDeleteSettings.deleteRare}`}
                onChange={(e) => {
                  const [common, uncommon, rare] = e.target.value.split('-').map(v => v === 'true');
                  setAutoDeleteSettings(prev => ({
                    ...prev,
                    deleteCommon: common,
                    deleteUncommon: uncommon,
                    deleteRare: rare
                  }));
                }}
                style={{
                  backgroundColor: 'rgba(26, 54, 93, 0.95)',
                  color: '#e2e8f0',
                  border: '1px solid #ef4444',
                  borderRadius: '4px',
                  padding: '0.2rem',
                  fontSize: '0.7rem'
                }}
              >
                <option value="false-false-false">None</option>
                <option value="true-false-false">Commons Only</option>
                <option value="true-true-false">Commons + Uncommons</option>
                <option value="true-true-true">Commons + Uncommons + Rares</option>
              </select>
            )}
          </div>
          
          {/* Equipment Management Buttons */}
          <button
            onClick={equipBest}
            style={{
              padding: '0.5rem 1rem',
              backgroundColor: '#4fc3f7',
              color: '#1a365d',
              border: 'none',
              borderRadius: '6px',
              fontSize: '0.9rem',
              fontWeight: '600',
              cursor: 'pointer'
            }}
          >
            Equip Best
          </button>
          
          <button
            onClick={unequipAll}
            style={{
              padding: '0.5rem 1rem',
              backgroundColor: '#ef4444',
              color: 'white',
              border: 'none',
              borderRadius: '6px',
              fontSize: '0.9rem',
              fontWeight: '600',
              cursor: 'pointer'
            }}
          >
            Unequip All
          </button>
          
          {/* Sort Controls */}
          <label style={{ color: '#e2e8f0' }}>Sort by:</label>
          <select 
            value={sortBy} 
            onChange={(e) => setSortBy(e.target.value as 'rarity' | 'energyMultiplier')}
            style={{
              padding: '0.5rem',
              borderRadius: '6px',
              border: '1px solid #4fc3f7',
              backgroundColor: '#2d5a87',
              color: '#e2e8f0'
            }}
          >
            <option value="rarity">Rarity</option>
            <option value="energyMultiplier">Energy Multiplier</option>
          </select>
        </div>
      </div>
      
      {/* Category Tabs */}
      <div style={{
        display: 'flex',
        marginBottom: '2rem',
        gap: '0.5rem'
      }}>
        {(['Weapons', 'Pets', 'Relics', 'Artifacts'] as ItemCategory[]).map(category => (
          <button
            key={category}
            onClick={() => setInventoryCategory(category)}
            style={{
              padding: '0.8rem 1.5rem',
              borderRadius: '8px',
              backgroundColor: inventoryCategory === category ? '#ff8c42' : 'rgba(45, 90, 135, 0.7)',
              color: inventoryCategory === category ? '#1a365d' : '#e2e8f0',
              cursor: 'pointer',
              fontWeight: '700',
              border: '1px solid #4fc3f7'
            }}
          >
            {category} ({inventory.filter(item => item.category === category).length})
          </button>
        ))}
      </div>
      
      {/* Items Display */}
      <div style={{ flex: 1, overflowY: 'auto' }}>
        {getSortedInventory(inventoryCategory).length === 0 ? (
          <p style={{ textAlign: 'center', color: '#e2e8f0', fontSize: '1.2rem', marginTop: '2rem' }}>
            No {inventoryCategory.toLowerCase()} in your inventory. Visit the shop to get some!
          </p>
        ) : (
          <div style={{
            display: 'grid',
            gridTemplateColumns: 'repeat(auto-fill, minmax(280px, 1fr))',
            gap: '1rem'
          }}>
            {getSortedInventory(inventoryCategory).map(item => (
              <div key={getItemUniqueKey(item)} style={{
                border: `3px solid ${rarityColors[item.rarity]}`,
                borderRadius: '12px',
                padding: '1rem',
                backgroundColor: isEquipped(item) ? 'rgba(79, 195, 247, 0.2)' : 'rgba(45, 90, 135, 0.7)',
                position: 'relative'
              }}>
                {/* World Badge */}
                <div style={{
                  position: 'absolute',
                  top: '0.5rem',
                  left: '0.5rem',
                  backgroundColor: getItemWorldInfo(item.id).color,
                  color: 'white',
                  padding: '0.2rem 0.5rem',
                  borderRadius: '10px',
                  fontSize: '0.7rem',
                  fontWeight: 'bold',
                  display: 'flex',
                  alignItems: 'center',
                  gap: '0.2rem'
                }}>
                  {getItemWorldInfo(item.id).emoji} W{getItemWorldInfo(item.id).world}
                </div>

                {isEquipped(item) && (
                  <div style={{
                    position: 'absolute',
                    top: '0.5rem',
                    right: '0.5rem',
                    backgroundColor: '#ff8c42',
                    color: '#1a365d',
                    padding: '0.2rem 0.5rem',
                    borderRadius: '10px',
                    fontSize: '0.7rem',
                    fontWeight: 'bold'
                  }}>
                    EQUIPPED
                  </div>
                )}
                
                <h3 style={{
                  color: rarityColors[item.rarity],
                  marginBottom: '0.5rem',
                  fontSize: '1.1rem',
                  marginLeft: '50px',
                  marginRight: isEquipped(item) ? '80px' : '0'
                }}>
                  {item.name}
                </h3>
                
                <div style={{
                  backgroundColor: rarityColors[item.rarity],
                  color: item.rarity === 'Secret' ? 'white' : 'white',
                  padding: '0.3rem 0.8rem',
                  borderRadius: '15px',
                  fontSize: '0.8rem',
                  display: 'inline-block',
                  marginBottom: '1rem'
                }}>
                  {item.rarity}
                </div>
                
                <p style={{ color: '#e2e8f0', marginBottom: '1rem', fontSize: '0.9rem' }}>
                  {item.description}
                </p>
                
                {/* Mutation Indicators */}
                {(item.mutations || item.isGold || item.isRainbow) && (
                  <div style={{ 
                    marginBottom: '1rem', 
                    padding: '0.8rem',
                    backgroundColor: 'rgba(79, 195, 247, 0.1)',
                    borderRadius: '8px',
                    border: '1px solid #4fc3f7'
                  }}>
                    <div style={{ 
                      color: '#4fc3f7', 
                      fontSize: '0.8rem', 
                      fontWeight: 'bold',
                      marginBottom: '0.5rem'
                    }}>
                      🔮 Mutations
                    </div>
                    
                    {item.isRainbow && (
                      <div style={{ 
                        display: 'inline-block',
                        background: 'linear-gradient(45deg, #ff0000, #ff8000, #ffff00, #80ff00, #00ff00, #00ff80, #00ffff, #0080ff, #0000ff, #8000ff, #ff00ff, #ff0080)',
                        backgroundSize: '200% 200%',
                        animation: 'rainbow 2s ease infinite',
                        color: 'white',
                        padding: '0.2rem 0.5rem',
                        borderRadius: '12px',
                        fontSize: '0.7rem',
                        fontWeight: 'bold',
                        marginRight: '0.3rem',
                        marginBottom: '0.3rem'
                      }}>
                        🌈 Rainbow (5x)
                      </div>
                    )}
                    
                    {item.isGold && !item.isRainbow && (
                      <div style={{ 
                        display: 'inline-block',
                        backgroundColor: '#ffd700',
                        color: '#1a365d',
                        padding: '0.2rem 0.5rem',
                        borderRadius: '12px',
                        fontSize: '0.7rem',
                        fontWeight: 'bold',
                        marginRight: '0.3rem',
                        marginBottom: '0.3rem'
                      }}>
                        🥇 Gold (2x)
                      </div>
                    )}
                    
                    {item.mutations && item.mutations.map((mutation, index) => (
                      <div key={index} style={{ 
                        display: 'inline-block',
                        backgroundColor: `${rarityColors[item.rarity]}40`,
                        color: rarityColors[item.rarity],
                        border: `1px solid ${rarityColors[item.rarity]}`,
                        padding: '0.2rem 0.5rem',
                        borderRadius: '12px',
                        fontSize: '0.7rem',
                        fontWeight: 'bold',
                        marginRight: '0.3rem',
                        marginBottom: '0.3rem'
                      }}>
                        {mutation.emoji} {mutation.weatherName} (+{Math.round((mutation.multiplierBonus - 1) * 100)}%)
                      </div>
                    ))}
                  </div>
                )}
                
                <div style={{ marginBottom: '1rem', fontSize: '1rem', color: '#e2e8f0' }}>
                  <div><strong>Quantity:</strong> {item.quantity}</div>
                  <div><strong>Level:</strong> {item.level}</div>
                </div>
                
                <div style={{ marginBottom: '1.5rem', fontSize: '0.9rem', color: '#e2e8f0' }}>
                  <div>⚡ Energy Multiplier: {formatNumber(item.energyMultiplier)}x</div>
                  <div>💎 Gem Multiplier: {formatNumber(item.gemMultiplier)}x</div>
                </div>
                
                {/* Equip/Unequip and Delete Buttons */}
                <div style={{ display: 'flex', gap: '0.5rem' }}>
                  <button
                    onClick={() => isEquipped(item) ? unequipItem(item) : equipItem(item)}
                    disabled={!isEquipped(item) && item.category === 'Pets' && equipped.pets.every(pet => pet !== null)}
                    style={{
                      flex: 1,
                      padding: '0.8rem',
                      border: 'none',
                      borderRadius: '6px',
                      backgroundColor: isEquipped(item) ? '#4fc3f7' : 
                        (!isEquipped(item) && item.category === 'Pets' && equipped.pets.every(pet => pet !== null)) ? 'rgba(189, 195, 199, 0.5)' : '#ff8c42',
                      color: isEquipped(item) ? '#1a365d' :
                        (!isEquipped(item) && item.category === 'Pets' && equipped.pets.every(pet => pet !== null)) ? '#94a3b8' : '#1a365d',
                      cursor: (!isEquipped(item) && item.category === 'Pets' && equipped.pets.every(pet => pet !== null)) ? 'not-allowed' : 'pointer',
                      fontSize: '1rem',
                      fontWeight: '700'
                    }}
                  >
                    {isEquipped(item) ? 'Unequip' : 
                     (!isEquipped(item) && item.category === 'Pets' && equipped.pets.every(pet => pet !== null)) ? 'Pet Slots Full' : 'Equip'}
                  </button>
                  
                  <button
                    onClick={() => {
                      if (confirm(`Delete ${item.name}? This cannot be undone.`)) {
                        deleteItem(item);
                      }
                    }}
                    style={{
                      padding: '0.8rem',
                      border: 'none',
                      borderRadius: '6px',
                      backgroundColor: '#ef4444',
                      color: 'white',
                      cursor: 'pointer',
                      fontSize: '1rem',
                      fontWeight: '700',
                      minWidth: '45px'
                    }}
                    title="Delete item"
                  >
                    🗑️
                  </button>
                </div>
              </div>
            ))}
          </div>
        )}
      </div>
    </div>
  );

  const renderUpgradesTab = () => (
    <div style={{
      backgroundColor: 'rgba(26, 54, 93, 0.95)',
      borderRadius: '15px',
      boxShadow: '0 8px 32px rgba(0, 0, 0, 0.3)',
      border: '2px solid #ff8c42',
      padding: '2rem',
      width: '95%',
      maxWidth: '1200px',
      height: '80vh',
      display: 'flex',
      flexDirection: 'column'
    }}>
      <h2 style={{ color: '#ff8c42', marginBottom: '2rem', textAlign: 'center' }}>Upgrades</h2>
      <p style={{ textAlign: 'center', color: '#e2e8f0', fontSize: '1rem', marginBottom: '2rem' }}>
        Permanent improvements to boost your power!
      </p>
      
      <div style={{ flex: 1, overflowY: 'auto' }}>
        <div style={{
          display: 'grid',
          gridTemplateColumns: 'repeat(auto-fill, minmax(350px, 1fr))',
          gap: '1.5rem'
        }}>
          {availableUpgrades.map(upgrade => {
            const currentLevel = upgrades[upgrade.id] || 0;
            const cost = getUpgradeCost(upgrade, currentLevel);
            const isMaxLevel = currentLevel >= upgrade.maxLevel;
            const canAfford = upgrade.costType === 'gems' ? gems >= cost : energy >= cost;
            
            return (
              <div key={upgrade.id} style={{
                border: '2px solid #4fc3f7',
                borderRadius: '12px',
                padding: '1.5rem',
                backgroundColor: 'rgba(45, 90, 135, 0.7)',
                position: 'relative'
              }}>
                <h3 style={{
                  color: '#ff8c42',
                  marginBottom: '0.5rem',
                  fontSize: '1.3rem'
                }}>
                  {upgrade.name}
                </h3>
                
                <p style={{ color: '#e2e8f0', marginBottom: '1rem', fontSize: '0.9rem' }}>
                  {upgrade.description}
                </p>
                
                <div style={{ marginBottom: '1rem', fontSize: '0.9rem', color: '#e2e8f0' }}>
                  <div><strong>Level:</strong> {currentLevel}/{upgrade.maxLevel}</div>
                  <div><strong>Effect:</strong> +{(upgrade.value * currentLevel).toFixed(1)} 
                    {upgrade.effect === 'clickMultiplier' && ' click power'}
                    {upgrade.effect === 'gemChance' && '% gem chance'}
                    {upgrade.effect === 'energyMultiplier' && ' energy multiplier'}
                    {upgrade.effect === 'gemMultiplier' && ' gem multiplier'}
                  </div>
                  {!isMaxLevel && (
                    <div><strong>Next Level:</strong> +{upgrade.value} additional boost</div>
                  )}
                </div>
                
                <div style={{
                  backgroundColor: upgrade.costType === 'gems' ? '#4fc3f7' : '#ff8c42',
                  color: '#1a365d',
                  padding: '0.5rem 1rem',
                  borderRadius: '20px',
                  fontSize: '1rem',
                  fontWeight: 'bold',
                  marginBottom: '1rem',
                  display: 'inline-block'
                }}>
                  {upgrade.costType === 'gems' ? '💎' : '⚡'} {formatNumber(cost)} {upgrade.costType === 'gems' ? 'Gems' : 'Energy'}
                </div>
                
                <button
                  onClick={() => purchaseUpgrade(upgrade.id)}
                  disabled={isMaxLevel || !canAfford}
                  style={{
                    width: '100%',
                    padding: '1rem',
                    border: 'none',
                    borderRadius: '8px',
                    backgroundColor: 
                      isMaxLevel ? 'rgba(34, 197, 94, 0.7)' :
                      canAfford ? '#ff8c42' : 'rgba(189, 195, 199, 0.5)',
                    color: 
                      isMaxLevel ? '#dcfce7' :
                      canAfford ? '#1a365d' : '#94a3b8',
                    cursor: (isMaxLevel || !canAfford) ? 'not-allowed' : 'pointer',
                    fontSize: '1.1rem',
                    fontWeight: '700',
                    transition: 'background-color 0.3s'
                  }}
                >
                  {isMaxLevel ? '✅ MAX LEVEL' : 
                   canAfford ? `Upgrade to Level ${currentLevel + 1}` : 
                   `Need ${formatNumber(cost - (upgrade.costType === 'gems' ? gems : energy))} more ${upgrade.costType}`}
                </button>
              </div>
            );
          })}
        </div>
      </div>
    </div>
  );

  const renderLoginScreen = () => (
    <div style={{
      height: '100vh',
      width: '100vw',
      background: 'linear-gradient(135deg, #1a365d 0%, #2d5a87 50%, #ff8c42 100%)',
      display: 'flex',
      flexDirection: 'column',
      alignItems: 'center',
      justifyContent: 'center'
    }}>
      <div style={{
        backgroundColor: 'rgba(26, 54, 93, 0.95)',
        padding: '3rem',
        borderRadius: '20px',
        boxShadow: '0 8px 32px rgba(0, 0, 0, 0.3)',
        border: '2px solid #ff8c42',
        textAlign: 'center',
        maxWidth: '400px',
        width: '90%',
        display: 'flex',
        flexDirection: 'column',
        alignItems: 'center',
        justifyContent: 'center'
      }}>
        <h1 style={{ 
          color: '#ff8c42', 
          marginBottom: '1rem', 
          fontSize: '2.5rem',
          textShadow: '0 0 20px rgba(255, 140, 66, 0.5)'
        }}>
          🎮 Anime Clicker
        </h1>
        <div style={{ marginBottom: '2rem' }}>
          <div style={{ display: 'flex', gap: '1rem', marginBottom: '1.5rem', justifyContent: 'center' }}>
            <button
              onClick={() => setIsRegistering(false)}
              style={{
                padding: '0.5rem 1rem',
                backgroundColor: !isRegistering ? '#ff8c42' : 'rgba(255, 140, 66, 0.3)',
                color: !isRegistering ? '#1a365d' : '#e2e8f0',
                border: '2px solid #ff8c42',
                borderRadius: '8px',
                cursor: 'pointer',
                fontSize: '0.9rem',
                fontWeight: '600',
                transition: 'all 0.3s'
              }}
            >
              Login
            </button>
            <button
              onClick={() => setIsRegistering(true)}
              style={{
                padding: '0.5rem 1rem',
                backgroundColor: isRegistering ? '#ff8c42' : 'rgba(255, 140, 66, 0.3)',
                color: isRegistering ? '#1a365d' : '#e2e8f0',
                border: '2px solid #ff8c42',
                borderRadius: '8px',
                cursor: 'pointer',
                fontSize: '0.9rem',
                fontWeight: '600',
                transition: 'all 0.3s'
              }}
            >
              Register
            </button>
          </div>
          <p style={{ color: '#e2e8f0', fontSize: '1.1rem', margin: 0 }}>
            {isRegistering 
              ? 'Create a new account to start your adventure!'
              : 'Welcome back! Enter your credentials to continue.'
            }
          </p>
        </div>
        
        <input
          type="text"
          placeholder="Enter username (3+ characters)"
          value={loginInput}
          onChange={(e) => setLoginInput(e.target.value)}
          style={{
            width: '100%',
            padding: '1rem',
            border: '2px solid #4fc3f7',
            borderRadius: '10px',
            backgroundColor: 'rgba(45, 90, 135, 0.7)',
            color: '#e2e8f0',
            fontSize: '1rem',
            marginBottom: '1rem',
            textAlign: 'center'
          }}
        />

        <input
          type="password"
          placeholder="Enter password (3+ characters)"
          value={passwordInput}
          onChange={(e) => setPasswordInput(e.target.value)}
          onKeyPress={(e) => e.key === 'Enter' && (isRegistering ? handleRegister() : handleLogin())}
          style={{
            width: '100%',
            padding: '1rem',
            border: '2px solid #4fc3f7',
            borderRadius: '10px',
            backgroundColor: 'rgba(45, 90, 135, 0.7)',
            color: '#e2e8f0',
            fontSize: '1rem',
            marginBottom: '1.5rem',
            textAlign: 'center'
          }}
        />
        
        <button
          onClick={isRegistering ? handleRegister : handleLogin}
          disabled={loginInput.trim().length < 3 || passwordInput.trim().length < 3}
          style={{
            width: '100%',
            padding: '1rem 2rem',
            fontSize: '1.1rem',
            fontWeight: '700',
            backgroundColor: (loginInput.trim().length >= 3 && passwordInput.trim().length >= 3) ? '#ff8c42' : 'rgba(189, 195, 199, 0.5)',
            color: (loginInput.trim().length >= 3 && passwordInput.trim().length >= 3) ? '#1a365d' : '#94a3b8',
            border: 'none',
            borderRadius: '10px',
            cursor: (loginInput.trim().length >= 3 && passwordInput.trim().length >= 3) ? 'pointer' : 'not-allowed',
            transition: 'all 0.3s'
          }}
        >
          {(loginInput.trim().length >= 3 && passwordInput.trim().length >= 3) 
            ? (isRegistering ? 'Create Account' : 'Start Adventure')
            : 'Username & password required'
          }
        </button>
        
        <p style={{ 
          color: '#94a3b8', 
          fontSize: '0.9rem', 
          marginTop: '1rem',
          lineHeight: '1.4'
        }}>
          {isRegistering
            ? 'Your progress will be automatically saved to your browser. Choose a unique username!'
            : 'Your progress will be automatically saved to your browser. Use the same username to continue your adventure!'
          }
        </p>
      </div>
    </div>
  );

  // Main component logic - login check and return
  if (!isLoggedIn) {
    return renderLoginScreen();
  }

  return (
    <div style={{
      height: '100vh',
      width: '100vw',
      background: getCurrentArea().background,
      filter: getWeatherAreaEffects().filter,
      display: 'flex',
      flexDirection: 'column',
      position: 'relative',
      overflow: 'hidden'
    }}>
      {renderTabNavigation()}
      {activeTab === 'game' && renderGameTab()}
      {activeTab === 'shop' && renderShopTab()}
      {activeTab === 'inventory' && renderInventoryTab()}
      {activeTab === 'upgrades' && renderUpgradesTab()}
    </div>
  );
  
  // Component end
};

export default AnimeClickerGame;
